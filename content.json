[{"title":"【利器篇】GitKraken——顶级酷炫Git图像化客户端","date":"2017-10-05T09:33:20.000Z","path":"2017/10/05/【利器篇】GitKraken——顶级酷炫Git图像化工具/","text":"不喜欢敲命令？那么这款酷炫的Git客户端让你逼格满满！ 真正的忘记是不需要努力的。——《大鱼海棠》 首先废话一段：以前我上班的时候，公司里的SCM用的是perforce，你应该、可能没听过( ╯□╰ )。总之，就是集中式版本管理系统，相比于git的分布式有很多缺陷，具体可以看廖雪峰的这篇文章：“集中式vs分布式”。但作为一款商业软件，perforce提供的优秀客户端体验还是相当不错的。使用git后，一直都是敲命令的，一是因为习惯，毕竟码代码逼格高嘛，二是因为git的GUI客户端要不很丑，要不功能捉急，总之不想用。之后，在微博上看到这款软件，又同类似的SourceTree相比体验了一下，无奈，我，还是喜欢颜值高的~ o(￣▽￣)o另外，以前外教老师提问说《加勒比海盗2》中的那个怪物叫啥，阅片无数的我，那天竟然没回答上，装逼失败，所以对这只“挪威海怪kraken”影响特别深刻。好了，开始正题吧，扯远了~ 官网/下载：GitKraken GitKraken对Windows/Linux/Mac三大主流平台都支持，其方便之处在于，它不需要安装配置，双击打开就可以了。打开之后，可以选择用Github账号登陆，需要Github授权： gitkraken_sign_in_with_github 打开/克隆/初始化GitKranken支持打开本地仓库，从指定的URL或Github、Gitlab、Bitbucket等上面直接克隆。前面我们已经用Github直接登陆了，所以，从Github克隆时，会直接列出你当前的所有仓库项目，非常方便。当然，也可以连接到Gitlab/Bitbucket平台： gitkraken_clone_from_github 初始化/新建项目也非常方便，在Init选项中，可以选择初始化一个本地仓库或类似Github之类的远程仓库。GitKraken初始化时还提供了.gitignore的文件的相关模板： gitkraken_init_github_repo 界面/功能打开一个仓库后，主界面如下图，酷炫简洁，顶部提供了常用的Git功能，就不细说了。我主要提及一下，如何进行版本差分： gitkraken_main_ui 在提交日志的主界面，如果要比较任意两个版本之间的差分，按住Ctrl键，选择要比较的版本，右边会自动列出两个版本之间所修改的文件，点击文件就可以看到diff了： gitkraken_view_commits_diff gitkraken_view_file_diff 当然，最新版本（本文使用的是3.1版本）的GitKraken提供了Merge和Diff工具的自定义（File-Preferences-General中设置），比如说我最常用的Merge工具是WinMerge，就可以在这里配置。 抛砖引玉，大致介绍了一下，其实熟悉Git的话，这个工具使用起来还是蛮简单的~ o(￣▽￣)o","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"利器篇","slug":"利器篇","permalink":"https://ex2tron.github.io/tags/利器篇/"},{"name":"Git","slug":"Git","permalink":"https://ex2tron.github.io/tags/Git/"},{"name":"GitKraken","slug":"GitKraken","permalink":"https://ex2tron.github.io/tags/GitKraken/"}]},{"title":"小白深度学习笔记1：logistic回归","date":"2017-10-02T13:06:32.000Z","path":"2017/10/02/小白深度学习笔记1：logistic回归/","text":"开启神经网络与深度学习之坑！本篇内容包含部分数学公式，需要用MathJax脚本渲染，所以页面需等待加载完成后，才可完整显示公式。 When life ends up breathtakingly fucked, you can generally trace it back to one big, bad decision.——《DeadPool》当你的生活变成一坨屎的时候，通常都是因为你当时做的傻逼决定。——《死侍》 本文是我在观看吴恩达老师的《神经网络和深度学习》视频课程时，相关的笔记整理，大佬勿喷！ 二类分类比如说分析一张图片中有猫还是没猫，这就是一个二类分类（Binary Classification）问题。这里，我们用输出y=1表示有猫，y=0表示没有猫。输入是一张图片，做过图像处理的同学应该知道图片是以RGB三个矩阵存储的，把RGB三分量的值提取出来，作为X，如下图： rgb_convert_input_x 那么当有m个样本时，X就是一个(nx,m)，即nx行、m列的矩阵，而输出Y的形状（形状就是指矩阵的行数和列数）是(1,m)。 logistic回归logistic回归（Logistic Regression）就是一个用于二类分类的学习算法：假定给出输入的特征向量\\(x_1\\)（如一张图片），我们希望程序给出一个预测值\\(\\hat{y}\\)，它指出这张图片中有猫还是没猫的概率，即：$$\\hat{y}=P(y=1\\ or\\ 0\\mid x)$$ 既然\\(\\hat{y}\\)是一个概率，那么\\(\\hat{y}\\in[0,1]\\)。如果按照线性回归，输出值应该是：\\(\\hat{y}=w^Tx+b\\)，w形状是(nx,1)，b形状是(1,1)，但是这个值可能远比1大或者出现负数，所以，需要用一个sigmoid函数做限定，最终输出为：$$\\hat{y}=\\sigma(w^Tx+b)$$ 观察sigmoid函数\\(\\sigma(z)=\\frac{1}{1+e^{-z}}\\)的曲线图： \\(z\\rightarrow\\infty,\\sigma(z)\\rightarrow1;z\\rightarrow-\\infty,\\sigma(z)\\rightarrow0;z=0,\\sigma(z)=0.5\\) sigmoid_function_graph 损失函数既然我们的目标就是训练得到logistic回归函数中的w和b参数，那么怎么衡量算法的运行情况呢？我们可以用损失函数（Loss Function）L表示预测值与真值的接近程度。最简单的损失函数可以定义成\\(L(\\hat{y},y)=\\hat{y}-y\\)。但是不会这样用，因为要考虑到优化算法的运算速度和效率，排除多个局部最优解。一般，损失函数定义为：$$L(\\hat{y},y)=-[y\\log\\hat{y}+(1-y)\\log(1-\\hat{y})]$$ 显然，损失函数越小，结果越好。那么这个损失函数如何起作用的呢？ 假设真值y=1，那么上式就会变成：\\(L(\\hat{y},1)=-\\log\\hat{y}\\)，要让损失函数尽量小，那么\\(\\log\\hat{y}\\)尽量大，也就是说\\(\\hat{y}\\)尽量大，由于\\(\\hat{y}\\in[0,1]\\)，所以，这个损失函数会使预测值\\(\\hat{y}\\)尽量接近1，即真值。同样，大家可以推一下真值y=0的情况。 成本函数前面所说的损失函数是针对单个训练样本定义的，我们可以用成本函数（Cost Function）来定义全体训练样本上的算法运行情况，定义如下：$$J(w,b)=\\frac{1}{m}\\sum_{i=1}^mL(\\hat{y^i},y^i)$$ 梯度下降法好，到这里，先总结一下： logistic回归模型是用于二类分类的一种学习算法 损失函数衡量参数w和b在单个训练样本的效果 成本函数衡量参数w和b在全体训练样本的效果 训练目标：找到使成本函数J尽可能小的参数w和b 那么w和b参数是怎么调整的呢？为了说明梯度下降法（Gradient Descent），吴恩达老师假定w和b都是实数，那么J(w,b)的函数图形类似下图： cost_function_graph 一般，先随机初始化w和b，通常都初始化为0，然后朝着最快下降的方向不断按下面的公式调整w和b参数，最后得到最优解（:=表示更新w的值）： $$w:=w-\\alpha\\frac{dJ(w,b)}{dw}$$$$b:=b-\\alpha\\frac{dJ(w,b)}{db}$$ \\(\\alpha\\)成为学习率（Learning Rate），表示梯度下降法的步长。 好了，这就是相关的logistic回归的简单理论笔记。","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"神经网络","slug":"神经网络","permalink":"https://ex2tron.github.io/tags/神经网络/"},{"name":"深度学习","slug":"深度学习","permalink":"https://ex2tron.github.io/tags/深度学习/"},{"name":"logistic回归","slug":"logistic回归","permalink":"https://ex2tron.github.io/tags/logistic回归/"}]},{"title":"【算法贴】三点定位算法","date":"2017-09-29T10:58:31.000Z","path":"2017/09/29/【算法贴】三点定位算法/","text":"已知三个点的坐标和未知点到这三个点的距离，求未知点？ 过去的如果就这么过去了，以后只会越来越糟。——《驴得水》 p.s.本文引用了mathjax脚本用来显示数学公式，所以需等待加载完成才能显示正常。 算法解析如下图所示，以三个已知点为圆心，d1,d2,d3为半径作圆，交点便是要求解的未知点： trilateration_sample 刚开始百度了一下，各种稀奇的算法，包括将三角形平移、旋转啥的，其实不用这么麻烦，直接通过勾股定理死算就可以了。 $$(x_1-x_0)^2+(y_1-y_0)^2=d_1^2$$ $$(x_2-x_0)^2+(y_2-y_0)^2=d_2^2$$ $$(x_3-x_0)^2+(y_3-y_0)^2=d_3^2$$ 将上面三个式子展开： $$x_1^2+x_0^2-2x_0x_1+y_1^2+y_0^2-2y_0y_1=d_1^2 ①$$$$x_2^2+x_0^2-2x_0x_2+y_2^2+y_0^2-2y_0y_2=d_2^2 ②$$$$x_3^2+x_0^2-2x_0x_3+y_3^2+y_0^2-2y_0y_3=d_3^2 ③$$ 显然通过三个式子中的任意两个相减，比如①-③和②-③就可以得到两个未知数的两个式子： $$x_1^2-x_3^2-2x_0(x_1-x_3)+y_1^2-y_3^2-2y_0(y_1-y_3)=d_1^2-d_3^2$$$$x_2^2-x_3^2-2x_0(x_2-x_3)+y_2^2-y_3^2-2y_0(y_2-y_3)=d_2^2-d_3^2$$ 接下来就不用说了，其实这都是初中数学的问题( ╯□╰ ) 算法实现CSharp根据上面的推导，我们的算法就很好写了。先定义一个Point的结构体或类，然后编写一个函数，将已知的三个点和三个距离传入： 12345678910111213141516171819202122232425262728293031/// &lt;summary&gt;/// 定义Point结构体/// &lt;/summary&gt;public struct Point&#123; public double X; public double Y;&#125;static Point GetMobilePoint(Point p1, Point p2, Point p3, double d1, double d2, double d3)&#123; //相当于①式-③式 double A = p1.X - p3.X; double B = p1.Y - p3.Y; double C = Math.Pow(p1.X, 2) - Math.Pow(p3.X, 2) + Math.Pow(p1.Y, 2) - Math.Pow(p3.Y, 2) + Math.Pow(d3, 2) - Math.Pow(d1, 2); //相当于②式-③式 double D = p2.X - p3.X; double E = p2.Y - p3.Y; double F = Math.Pow(p2.X, 2) - Math.Pow(p3.X, 2) + Math.Pow(p2.Y, 2) - Math.Pow(p3.Y, 2) + Math.Pow(d3, 2) - Math.Pow(d2, 2); //计算结果 double x0 = (B * F - E * C) / (2 * B * D - 2 * A * E); double y0 = (A * F - D * C) / (2 * A * E - 2 * B * D); Point resultPoint; resultPoint.X = x0; resultPoint.Y = y0; return resultPoint;&#125;","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"算法","slug":"算法","permalink":"https://ex2tron.github.io/tags/算法/"},{"name":"三角定位","slug":"三角定位","permalink":"https://ex2tron.github.io/tags/三角定位/"}]},{"title":"构建法、杀死变量","date":"2017-09-28T13:23:45.000Z","path":"2017/09/28/构建法、杀死变量/","text":"如果你仔细回想一下，平日阅读代码的时候，是什么占用了你大量的时间和精力？毫无疑问：变量。 Why do we fall, Bruce? So we can learn to pick ourselves up. ——《Batman Begins》我们为何会跌倒？这样我们才可以学会自己爬起来。——《蝙蝠侠：侠影之谜》 如果一个变量在代码中很分散，阅读者在同一时间内考虑的代码行数势必会增加，编写者引入Bug的概率也会增大。那么，该如何从减少变量的作用域角度提高代码质量呢？ p.s.本文相关内容仍旧是我阅读《代码大全》时的笔记与总结，大佬勿喷！ 变量跨度与存活时间建议一：把对变量的引用尽可能集中在一起，使变量局部化12345a = 0; b = 0;c = 0;a = b + c;b += 1; 跨度（span）是衡量变量不同引用点靠近程度的一种方法。比如说上面的代码，对a的第一次引用和第二次引用之间有2行代码，那么变量a的跨度就是2。引用多次的话，可以取平均跨度。如b的第一次和第二次引用之间行数为1，第二次和第三次引用之间行数为0，所以平均跨度span(b)=(1+0)/2=0.5。 另外一个概念是：存活时间（live time）。跟跨度类似，不过存活时间只跟变量第一次和最后一次引用有关。比如对于上面代码中的b变量，跨度是0.5，但是存活时间是4条语句。 显然，我们的目标就是缩短变量的跨度和存活时间。如果用这两个概念考察全局变量，就会发现全局变量的跨度和存活时间都很长，这也是为什么避免使用全局变量的原因之一。 减小作用域的建议建议二：把相关语句放在一起把变量的引用点集中在一起，使代码易于自上而下的阅读，举例来说： 12345678910111213141516//跳来跳去的糟糕代码MarketingData marketingData;SalesData salesData;TravelData travelData;travelData.ComputeWeekly();salesData.ComputeWeekly();marketingData.ComputeWeekly();salesData.ComputeAnnually();travelData.ComputeAnnually();marketingData.ComputeAnnually();salesData.print();travelData.print();marketingData.print(); 显然，如果你要想知道marketingData的计算流程，就必须在这段代码的不同行数跳跃。所以，这样组织代码会更好： 123456789101112131415//组织良好，从上而下阅读MarketingData marketingData;marketingData.ComputeWeekly();marketingData.ComputeAnnually();marketingData.print();SalesData salesData;salesData.ComputeWeekly();salesData.ComputeAnnually();salesData.print();TravelData travelData;travelData.ComputeWeekly();travelData.ComputeAnnually();travelData.print(); 《代码大全》中介绍了一种简便的检查相关语句是否组成得当的方法，把你的代码片段打印出来，然后把相关的语句画上框，组织得当的话， 这些框是不会重叠的： good_grouping_related_statements 建议三：把相关语句提取成单独的子程序更短的子程序相比长的子程序，变量的跨度和存活时间更小。比如，可以尝试这样重构上面的代码： 123456//重构，提取子程序ComputeMarketingData();ComputeSalesData();ComputeTravelData(); 建议四：开始使用最小的作用域，然后根据需求再扩展一句话解释就是：把全局变量转换为成员局部变量要比局部变量转换为全局变量难的多。因此，在设计程序时，如果对变量的作用域犹豫不决时，优先倾向于最小的作用域。 建议五：循环开始之前再去初始化循环变量一个不好的编程习惯就是在程序开头初始化好循环所使用的变量，如int i = 0,j = 0;。而在很后面才使用到循环。这样做的坏处一是查看循环时需要跳到开头才知道循环变量的值，另外，如果要修改这个循环，往往会忘记同时修改循环变量。 往期【构建法】系列回顾： 构建法、单点控制 构建法、表驱动法","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"构建法","slug":"构建法","permalink":"https://ex2tron.github.io/tags/构建法/"},{"name":"变量","slug":"变量","permalink":"https://ex2tron.github.io/tags/变量/"},{"name":"作用域","slug":"作用域","permalink":"https://ex2tron.github.io/tags/作用域/"}]},{"title":"【片单】诺兰神作集","date":"2017-09-24T12:37:41.000Z","path":"2017/09/24/【片单】诺兰神作集/","text":"有的导演，虽然没拿过奥斯卡，作品不多，但每部却都被影迷奉为神作。没错，说的就是诺神：克里斯托弗·诺兰 克里斯托弗·诺兰今天周末，回顾了下诺神的蝙蝠侠和盗梦空间，加上前段时间刚看完敦刻尔克，按耐不住，就分享下诺兰的神作电影下载链接吧。 作品按时间排序，点击片名或者右键复制链接即可： 敦刻尔克 | Dunkirk（目前无资源） Dunkirk 星际穿越 | Interstellar Interstellar 蝙蝠侠：黑暗骑士崛起 | The Dark Knight Rises The Dark Knight Rises 盗梦空间 | Inception Inception 蝙蝠侠：黑暗骑士 | The Dark Knight The Dark Knight 致命魔术 | The Prestige The Prestige 蝙蝠侠.侠影之谜 | Batman Begins Batman Begins 记忆碎片 | Memento Memento p.s.本文所有的图片均来自TMDB，如果你觉得很酷炫的话，我会在后期开发一款专门下载影视壁纸的APP，敬请期待！","tags":[{"name":"Lens","slug":"Lens","permalink":"https://ex2tron.github.io/tags/Lens/"},{"name":"诺兰","slug":"诺兰","permalink":"https://ex2tron.github.io/tags/诺兰/"},{"name":"蝙蝠侠","slug":"蝙蝠侠","permalink":"https://ex2tron.github.io/tags/蝙蝠侠/"},{"name":"敦刻尔克","slug":"敦刻尔克","permalink":"https://ex2tron.github.io/tags/敦刻尔克/"},{"name":"盗梦空间","slug":"盗梦空间","permalink":"https://ex2tron.github.io/tags/盗梦空间/"},{"name":"星际穿越","slug":"星际穿越","permalink":"https://ex2tron.github.io/tags/星际穿越/"}]},{"title":"【利器篇】七牛云——用做每月免费10G的图床","date":"2017-09-18T11:55:38.000Z","path":"2017/09/18/【利器篇】七牛云——用做每月免费10G的图床/","text":"随着越来越多的人开始使用Markdown写自己的独立博客，一个好用稳定的图床是必不可少的了。 对比在七牛云之前，我使用过国外的Cloud App和阿里云的oss对象存储。 首先，国外的东西在国内稳定性和速度都是相对较差的，我试着在阿里云和Cloud App上上传同一张图片并生成外链，Cloud App要比阿里的加载速度延迟1-2s，阿里基本秒开。 阿里的oss对象存储虽然很稳定，但是并不提供免费的空间。相对来说，七牛云提供的每月10G免费流量，对于博客来说，绰绰有余了。 另外，七牛云提供了诸多的图片处理接口，如水印、格式转换、缩放等，很实用，很强大。 使用注册并登陆七牛云，在七牛云的产品列表中，添加一个对象存储，如这里取名为picblog： create_new_bucket 创建好之后，七牛云会自动生成一个测试域名： test_domain_name 这个域名就是你文件的前缀了。比如，我们点击内容管理，点击上传文件，选择一幅图片上传。上传完成后，复制该文件的外链地址： copy_file_link 这个地址就是你的图片地址辣，你可以在浏览器中访问该地址，比如你可以访问我的这个：mysql_demo 绑定域名添加二级域名如同前面那张图上所说，七牛云默认的测试域名有很多限制。所以，你如果已经购买了域名的话，可以在这里绑定自己的二级域名，这样既好记又方便管理。 比如，这里我已经在万网上购买了ex2tron.xin的域名，这里我演示如何将七牛云的存储空间绑定pic.ex2tron.xin这个域名。 在七牛云的存储空间页面，点击绑定域名，只需要在加速域名处填写要绑定的域名，其他项保持默认即可：1加速域名： pic.ex2tron.xin bucket_binding_domain_name 创建后，系统会配置一段时间，等待处理完成，会显示一个诸如xxx.qiniudns.com的CNAME记录值，记下此值，后面要用到。 cname_for_binding 添加域名解析打开万网的域名控制台，添加一条CNAME的解析：1234记录类型：CNAME主机记录：pic记录值：xxx.qiniudns.com# 其他选型保持默认 add_dns_for_qiniu 这样，你上传的图片外链就是：http://pic.ex2tron.xin/filename.png之类的了。 添加图片样式利用七牛云做图床的另外一个强大之处在于丰富的图片样式。点击图片样式-新建图片样式，七牛云提供了如下很多种场景： api_for_image_process 比如，这里我们选择指定宽高，强行缩放+打图片水印，然后添加一个文字水印，可以调整文字的字体样式，位置等等： add_water_mark_api 调整好之后，为样式取个名称，如webpic，这样，只要在原来外链的后面添加-webpic就可以了： 1http://pic.ex2tron.xin/filename.png-webpic 其中-这个连接符可以通过存储空间控制面板的样式分隔符设置中进行修改。 图床工具对于七牛云，每张图片都在网页端上传还是比较麻烦的，所以用一些图床客户端工具会更加快速。 这里推荐使用MPic图床神器。打开软件后，设置好自己的AK和SK（可在七牛云的个人中心-密钥管理中看到）。MPic支持文件拖拽上传，点击复制就可以复制外链，非常方便： mpic_qiniu","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"qiniu","slug":"qiniu","permalink":"https://ex2tron.github.io/tags/qiniu/"},{"name":"七牛云","slug":"七牛云","permalink":"https://ex2tron.github.io/tags/七牛云/"},{"name":"图床","slug":"图床","permalink":"https://ex2tron.github.io/tags/图床/"}]},{"title":"Hexo+Github Pages轻松搭博客(2)——在Github上部署","date":"2017-09-13T12:15:47.000Z","path":"2017/09/13/Hexo-Github-Pages轻松搭博客-2-——在Github上部署/","text":"使用免费的Github Pages服务或者部署在自己服务器上，别人就可以访问你的博客啦！ 如果你已经有配置好的云服务器，直接可以将Hexo博客生成的public目录文件放在服务器上就好了。比如我购买的是阿里云服务器（apache），只需要将public下的文件放在/var/www/html/下面就可以用你服务器地址访问博客了。很容易，不过，考虑到云服务器的价格，这里我们还是用免费的Github吧。 关联Github首先登陆Github，没有账号的话，先注册一个。新建一个名为username.github.io的仓库，username必须与你的账户名相同，比如我的就是ex2tron.github.io，这就是你博客的域名地址了（绑定独立域名之后再说）。新建时注意勾选”Initialize this repository with a README“，因为这个仓库必须不能为空。 如果你是git新用户的话，推荐看：廖雪峰的Git教程-远程仓库 create_github_pages_repository 接下来打开博客目录下的_config.yml配置文件，定位到最后的deploy选项，修改如下：1234deploy: type: git repository: git@github.com:ex2tron/ex2tron.github.io.git branch: master 注意冒号后面有个空格，不然会出错滴~~~配置好之后，使用下面的命令就可以部署到Github上了：123$ hexo clean$ hexo g$ hexo d 这样通过Github提供的域名地址（如我的：https://ex2tron.github.io）就可以访问你的博客了，简单快速高效！ 发布新博客博客搭建起来之后，就可以用Markdown写博客辣，使用下面的命令，创建新博客（如名为：我的第一篇博客）：1$ hexo new '我的第一篇博客' 此命令会在博客目录\\source_posts\\h下生成“我的第一篇博客.md”文件，这就是你的博客源文件啦，文件开头如下，记得冒号后面有空格噢，不然会出错：12345---title: 我的第一篇博客date: 2017-09-13 20:15:47tags: #文章标签，格式：[1,2,3]--- 不熟悉Markdown语法的可以看：Markdown 语法说明。写完之后依然使用之前的三条命令发布：123$ hexo clean$ hexo g$ hexo d 后面两条指令也可以简化为一条：1$ hexo g -d 常出现的问题 在hexo d进行部署时，如果出现ERROR Deployer not found: git的问题，可以先用下面的命令修复： 1$ npm install hexo-deployer-git --save 如果你没配置过ssh导致部署失败（可以通过ssh -T username@example.com来测试ssh有无配置成功），可以参考这篇文章：针对github权限导致hexo部署失败的解决方案","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"Hexo","slug":"Hexo","permalink":"https://ex2tron.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://ex2tron.github.io/tags/Github/"}]},{"title":"Hexo+Github Pages轻松搭博客(1)","date":"2017-09-13T08:07:06.000Z","path":"2017/09/13/Hexo-Github-Pages轻松搭博客-1/","text":"想用Github Pages轻松搭建自己的博客，用Hexo，10分钟！ 废话区域：我在接触Hexo（可以读作Hack So）之前，绝对没少尝试建立一个完全自由、自己说了算的独立博客：WordPress定位重量级，功能强大，生成的是动态网站，依赖数据库……太繁琐了，放弃~而Jekyll和Hexo都是静态建站工具，但Jekyll的依赖项也很多，也不简约，不想用~最后才是名气相对不高的Hexo，相信我，熟练的情况下，10分钟就可以搭出来： 简介Hexo是一个免费的静态Blog生成工具。简单来说，就是把你写的Markdown博客文件生成静态网页，把这个网页放在Github或者你自己的服务器上就可以快速访问了。软件界，从来不缺自动化工具(ง •_•)ง 安装官网文档：Hexo Docs Hexo安装前，你的电脑上需要先有下面这两个东西： Node.js Git 如果已经安装了的话，命令行下一句话就好啦：1$ npm install -g hexo-cli 初始化博客目录在你的本地新建一个存放博客的目录，比如”D:\\MyHexoBlog“，然后在这个目录右键，选择”Git Bash Here“，输入下面两条命令进行初始化：12$ hexo init$ npm install 初始化完成之后，你的目录结构应该是这样的：12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 如果没有出错的话，继续执行下面的指令启动服务：12$ hexo g $ hexo s 启动之后，在浏览器中访问：http://localhost:4000/，是不是看到了漂亮的Hexo博客页面了。不过目前这个博客还是运行在你本机上的，下篇我们看一下怎么样让别人也能访问这个博客。 default_hexo_index 参考资料： Hexo Docs Hexo+Github搭建个人博客(一)——开始搭建","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"Hexo","slug":"Hexo","permalink":"https://ex2tron.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://ex2tron.github.io/tags/Github/"}]},{"title":"【利器篇】用VS Code写Markdown","date":"2017-09-11T07:11:22.000Z","path":"2017/09/11/【利器篇】用VSCode写Markdown/","text":"Markdown以其简洁、优雅整齐的风格，成为目前非常流行的博客文件格式。甚至有人说：每个人都应该用Markdown写博客。关于Markdown相较富文本的优势，我就不细说了。 Markdown编辑器支持Markdown的工具有很多，大家可以参考网上，如这篇文章：码字必备：18 款优秀的 Markdown 写作工具 | 2015 年度盘点。就我自己目前在Windows上使用的而言有：简书、有道云笔记、Typora、VSCode 简书本身就是一个博客平台，有道云笔记是类似OneNote和印象笔迹的应用。如果你已经在使用这两个平台的话，就不用多说了。但如果只是想用一个单纯的Markdown编辑器的话，推荐极致简洁的Typora。虽说界面简洁，但功能强大，不仅内置了常见的一些Markdown样式，还支持PDF/HTML等多种格式导出： markdown_in_typora 你是一枚文青的话，千万不要错过这款编辑器。不过，对于程序猿来说，VSCode才显得更有味道。 用VSCode写MarkdownVSCode就不过多介绍了，我之前也写过关于它的介绍： Visual Studio Code Preview初体验 Visual Studio Code Preview深度体验、使用技巧 现在版本的VSCode默认已经支持Markdown预览，不需要下载插件。用VSCode打开md文件或将当前文件更改为Markdown格式就可以开始书写了： markdown_in_vscode VSCode支持两种预览方式： 按下Ctrl+K V，像上图一样左右同步实时预览 按下Ctrl+Shift+V，只预览最终渲染结果 editor_preview_Synchronization 如上图，编写和预览界面是实时同步的，不需要的话，可以按下Ctrl+,组合键，添加如下两条设置： 12\"markdown.preview.scrollEditorWithPreview\": false,\"markdown.preview.scrollPreviewWithEditorSelection\": false 另外，目前VSCode预览样式中，中文的显示很别扭，这里推荐下载Github风格的CSS 下载完成后，配置css文件的设置如下即可： 123\"markdown.styles\": [ \"file:///D:/markdown-github.css\"] 另外，VSCode中有很多Markdown相关的插件，如”Markdown All in One”和”Markdown Theme Kit”等，大家可以下载下来尝试一下哈！ 参考资料：Markdown editing with Visual Studio Code","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"Markdown","slug":"Markdown","permalink":"https://ex2tron.github.io/tags/Markdown/"},{"name":"VSCode","slug":"VSCode","permalink":"https://ex2tron.github.io/tags/VSCode/"}]},{"title":"【利器篇】MyCLI——自动补全和语法高亮的MySQL命令行工具","date":"2017-09-11T06:32:14.000Z","path":"2017/09/11/【利器篇】MyCLI——自动补全和语法高亮的MySQL命令行工具/","text":"mycli是MySQL命令行工具，支持关键字语法高亮和自动补全，看下面的动图你就知道了： mycli_demo mycli不仅会提示MySQL的关键字，更牛掰的是数据库名、表名、字段名都可以提示，非常方便。如果你经常在命令行里码MySQL命令，相信这款工具一定会让你满意。 官网：MyCLI 安装其实mycli是一个Python的包，所以你已经安装了Python(pip)的话，用下面一条指令就好了： 1&gt; pip install mycli 如果出现问题，可以参考官网，有详细的说明。 install_mycli 使用安装好之后，在cmd下，将以往登陆MySQL用的mysql换成mycli就可以了： login_with_mycli 好了，大家觉得好用的话，欢迎扩散噢！ Never give up. Never stop fighting. Excelsior!","tags":[{"name":"Code","slug":"Code","permalink":"https://ex2tron.github.io/tags/Code/"},{"name":"MyCLI","slug":"MyCLI","permalink":"https://ex2tron.github.io/tags/MyCLI/"},{"name":"MySQL","slug":"MySQL","permalink":"https://ex2tron.github.io/tags/MySQL/"}]},{"title":"博客新篇章！Brave New World","date":"2017-09-11T03:34:20.326Z","path":"2017/09/11/博客新篇章！/","text":"从2014/08/23开始在lofter上写我的第一篇博客开始，已经过去了整整三年…… 再见，lofterlofter是一个非常不错的轻博客平台，我喜欢它的设计和定位。但lofter终究不适合程序猿，长久以来不支持markdown也让我很头痛。现在，终于还是要说再见了! http://ex2tron.lofter.com 旧的66篇博客【Code/编程/开发】构建法、单点控制 构建法、表驱动法 【云端漫步】一起上“阿里云”（1）、购买学生党套餐 【云端漫步】一起上“阿里云”（2）、远程登陆服务器 【云端漫步】一起上“阿里云”（3）、LAMP环境搭建 【云端漫步】一起上“阿里云”（4）、搭建Git服务器 【云端漫步】一起上“阿里云”（5）、域名购买和解析 Python多字节二进制文件读取 C#中集合List的深浅拷贝 C#中常用的集合List去重方法 C#多字节二进制文件读取 深入理解C#（01）：堆栈、值类型和引用类型、值传递和引用传递 宽字符 编程命名法 编程字体推荐 Json序列化与反序列化（1）-JavaScriptSerializer Json序列化与反序列化（2）-Json.Net Json序列化与反序列化（3）-DataContractJsonSerializer CR与LF（操作系统“下一行”的不同） Visual Studio Code Preview初体验 Visual Studio Code Preview深度体验、使用技巧 Brand7-品牌漆上架商店啦！ UWP应用Brand7开发小记（1）、判断App是否是第一次启动 UWP应用Brand7开发小记（2）、用Excel和Json初始化本地数据源Part1 UWP应用Brand7开发小记（2）、用Excel和Json初始化本地数据源Part2 UWP 应用Brand7开发小记（3）、判断GridView的滚动方向 UWP应用Brand7开发小记（4）、集合控件的虚拟化问题 UWP 应用Brand7开发小记（5）、控件嵌入标题栏 MySQL学习小记（1）-不能启动MySQL服务 MySQL学习小记（2）-添加远程访问权限详解 MySQL学习小记（3）-外键的使用 MySQL学习小记（4）-最大连接数 MySQL学习小记（5）-主从服务器同步 VS至强插件ReSharper指南01、安装入门 【视觉与图像】【视觉与图像】摄像头篇（1）、CCD靶面尺寸 【视觉与图像】摄像头篇（2）、焦距和视角 CMake编译OpenCV3.2（Qt平台） Qt+OpenCV环境搭建 【Design/演示/设计】玩转PPT放映第一篇、演示者视图 玩转PPT放映第二篇、快捷键 玩转PPT放映第三篇、自定义放映 【PPT动画】钟摆效果 【PPT动画】模糊渐变切换效果 【PPT动画】制作左、右浮入效果 PPT制作画中画效果 PPT绘制长阴影图标 PPT三维立体图形绘制 PPT巧用矩形等分区域（黄金分割线） 【Lens/摄影/影视】家乡 | 黑白 | PENTAX K-50 | 看见不一样 看见，时光（延时摄影短片） 我那时的“计量”（一），黑白质感 我那时的“计量”（二），迎新色彩 Lumia 1520 by iPhone6s 历届奥斯卡最佳动画长片下载（1） 历届奥斯卡最佳动画长片下载（2） 「精品」皮克斯15部动画长片下载 【Other/科普/发现】PPI与DPI USB接口类型（2.0概述） Type-C和USB3.0（3.1） 发现Win10 Bug两枚（均得微软官方确认，一枚已解决） 再战之后，这场旅途，只属于我 Win8以上系统安装PL2303驱动 硬盘容量计算的差别 硬盘整数分区原理及计算（附工具下载） 详解Windows运行组件第一篇、原理篇 详解Windows运行组件第二篇、自定义运行指令 Windows 10技术预览版体验视频 Never give up. Never stop fighting. Excelsior!","tags":[]}]