<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ex2tron&#39;s Blog</title>
  <subtitle>Excelsior!</subtitle>
  <link href="/atom.xaml" rel="self"/>
  
  <link href="https://ex2tron.github.io/"/>
  <updated>2017-12-09T13:38:13.474Z</updated>
  <id>https://ex2tron.github.io/</id>
  
  <author>
    <name>Tony Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python+OpenCV教程9：鼠标绘图</title>
    <link href="https://ex2tron.github.io/2017/12/09/Python-OpenCV%E6%95%99%E7%A8%8B9%EF%BC%9A%E9%BC%A0%E6%A0%87%E7%BB%98%E5%9B%BE/"/>
    <id>https://ex2tron.github.io/2017/12/09/Python-OpenCV教程9：鼠标绘图/</id>
    <published>2017-12-09T09:28:34.000Z</published>
    <updated>2017-12-09T13:38:13.474Z</updated>
    
    <content type="html"><![CDATA[<p>学习如何用鼠标实时绘图。<a id="more"></a>图片等可到<a href="#引用">源码处</a>下载。</p>
<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>捕获鼠标事件</li>
<li>OpenCV函数：cv2.setMouseCallback()</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="知道鼠标在哪儿"><a href="#知道鼠标在哪儿" class="headerlink" title="知道鼠标在哪儿"></a>知道鼠标在哪儿</h3><p>OpenCV中，我们需要创建一个鼠标的回调函数来知道鼠标当前的位置，当前的事件如左键按下、左键释放或是右键单击等等，然后执行相应的功能。</p>
<p>使用<code>cv2.setMouseCallback()</code>来创建鼠标的回调函数，比如我们在左键单击的时候，打印出当前鼠标的位置：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># 鼠标的回调函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouse_event</span><span class="params">(event, x, y, flags, param)</span>:</span></div><div class="line">    <span class="comment"># 通过flags判断具体是什么事件，这里是左键按下</span></div><div class="line">    <span class="keyword">if</span> flags == cv2.EVENT_LBUTTONDOWN:</div><div class="line">        print((x, y))</div><div class="line"></div><div class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</div><div class="line">cv2.namedWindow(<span class="string">'image'</span>)</div><div class="line"><span class="comment"># 定义鼠标的回调函数</span></div><div class="line">cv2.setMouseCallback(<span class="string">'image'</span>, mouse_event)</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">    cv2.imshow(<span class="string">'image'</span>, img)</div><div class="line">    <span class="comment"># 按下ESC键退出</span></div><div class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">20</span>) == <span class="number">27</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>上面的代码先定义鼠标的回调函数<code>mouse_event()</code>，然后在回调函数中判断是否是左键单击事件<code>EVENT_LBUTTONDOWN</code>，是的话就打印出坐标。需要注意的是，回调函数的参数格式是固定的，不要随意更改。</p>
<p>那除了左键单击之外，还有哪些事件呢？可以用下面的代码打印出来：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取所有的事件</span></div><div class="line">events = [i <span class="keyword">for</span> i <span class="keyword">in</span> dir(cv2) <span class="keyword">if</span> <span class="string">'EVENT'</span> <span class="keyword">in</span> i]</div><div class="line">print(events)</div></pre></td></tr></table></figure>
<h3 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h3><p>现在我们来实现一个综合的例子，这个实例会帮助你理解图像交互的一些思想：</p>
<p>在图像上用鼠标画图，可以画圆或矩形，按m键在两种模式下切换。左键按下时开始画图，移动到哪儿画到哪儿，左键释放时结束画图。听上去很复杂，是吗？一步步分析下：</p>
<ul>
<li>用鼠标画图：需要定义鼠标的回调函数mouse_event</li>
<li>画圆或矩形：需要定义一个画图的模式mode</li>
<li>左键单击、移动、释放：需要捕获三个不同的事件</li>
<li>开始画图，结束画图：需要定义一个画图的标记位drawing</li>
</ul>
<p>好，开始coding吧：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">drawing = <span class="keyword">False</span>  <span class="comment"># 是否开始画图</span></div><div class="line">mode = <span class="keyword">True</span>  <span class="comment"># True：画矩形，False：画圆</span></div><div class="line">start = (<span class="number">-1</span>, <span class="number">-1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouse_event</span><span class="params">(event, x, y, flags, param)</span>:</span></div><div class="line">    <span class="keyword">global</span> start, drawing, mode</div><div class="line"></div><div class="line">    <span class="comment"># 左键按下：开始画图</span></div><div class="line">    <span class="keyword">if</span> event == cv2.EVENT_LBUTTONDOWN:</div><div class="line">        drawing = <span class="keyword">True</span></div><div class="line">        start = (x, y)</div><div class="line">    <span class="comment"># 鼠标移动，画图</span></div><div class="line">    <span class="keyword">elif</span> event == cv2.EVENT_MOUSEMOVE:</div><div class="line">        <span class="keyword">if</span> drawing:</div><div class="line">            <span class="keyword">if</span> mode:</div><div class="line">                cv2.rectangle(img, start, (x, y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                cv2.circle(img, (x, y), <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">-1</span>)</div><div class="line">    <span class="comment"># 左键释放：结束画图</span></div><div class="line">    <span class="keyword">elif</span> event == cv2.EVENT_LBUTTONUP:</div><div class="line">        drawing = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> mode:</div><div class="line">            cv2.rectangle(img, start, (x, y), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            cv2.circle(img, (x, y), <span class="number">5</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">-1</span>)</div><div class="line"></div><div class="line"></div><div class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</div><div class="line">cv2.namedWindow(<span class="string">'image'</span>)</div><div class="line">cv2.setMouseCallback(<span class="string">'image'</span>, mouse_event)</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">    cv2.imshow(<span class="string">'image'</span>, img)</div><div class="line">    <span class="comment"># 按下m切换模式</span></div><div class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'m'</span>):</div><div class="line">        mode = <span class="keyword">not</span> mode</div><div class="line">    <span class="keyword">elif</span> cv2.waitKey(<span class="number">1</span>) == <span class="number">27</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>效果应该如下图所示：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_mouse_drawing_rectangle_circle.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>要用鼠标绘图，需要用cv2.setMouseCallback()定义回调函数，然后在回调函数中根据不同的flags事件，执行不同的功能。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li>（选做）实现用鼠标画矩形，跟实例差不多，但只实时画一个，类似下面动图：</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_live_draw_rectangle.gif" alt="实时画一个矩形" title="">
                </div>
                <div class="image-caption">实时画一个矩形</div>
            </figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/9.%20%E9%BC%A0%E6%A0%87%E7%BB%98%E5%9B%BE" target="_blank" rel="external">本节源码</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_mouse_handling/py_mouse_handling.html" target="_blank" rel="external">Mouse as a Paint-Brush</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习如何用鼠标实时绘图。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="绘图" scheme="https://ex2tron.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程8：绘图功能</title>
    <link href="https://ex2tron.github.io/2017/12/09/Python-OpenCV%E6%95%99%E7%A8%8B8%EF%BC%9A%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD/"/>
    <id>https://ex2tron.github.io/2017/12/09/Python-OpenCV教程8：绘图功能/</id>
    <published>2017-12-09T03:29:48.000Z</published>
    <updated>2017-12-09T06:17:54.976Z</updated>
    
    <content type="html"><![CDATA[<p>学习画线、圆和矩形等多种几何形状，给图片添加文字。<a id="more"></a>图片等可到<a href="#引用">源码处</a>下载。</p>
<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>绘制各种几何形状、添加文字</li>
<li>OpenCV函数：cv2.line(), cv2.circle(), cv2.rectangle(), cv2.ellipse(), cv2.putText()</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>绘制形状的函数有一些共同的参数，提前在此说明一下：</p>
<ul>
<li>img：要绘制形状的图片</li>
<li>color：绘制的颜色，彩色（BGR）的话，传入一个元组，如(255,0,0)。灰度图，传入一个值就行</li>
<li>thickness：线宽，默认为1。对于矩形/圆之类的封闭形状而言，传入-1的话，代表填充</li>
</ul>
<p>p.s.此节及之后的教程，为节约篇幅，显示图片的代码，我会省略掉：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cv2.imshow(<span class="string">'img'</span>, img)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_drawing_functions.jpg" alt="绘制各种几何形状" title="">
                </div>
                <div class="image-caption">绘制各种几何形状</div>
            </figure>
<p>上图就是本教程代码绘制的最终效果，下面一步步来看：</p>
<h3 id="画线"><a href="#画线" class="headerlink" title="画线"></a>画线</h3><p>画线只需知道起点和终点的坐标就行：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># 创建一副黑色的图片</span></div><div class="line">img = np.zeros((<span class="number">512</span>, <span class="number">512</span>, <span class="number">3</span>), np.uint8)</div><div class="line"><span class="comment"># 画一条线宽为5的蓝色直线，参数2：起点，参数3：终点</span></div><div class="line">cv2.line(img, (<span class="number">0</span>, <span class="number">0</span>), (<span class="number">512</span>, <span class="number">512</span>), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">5</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>经验之谈：绘图函数会直接影响到原图片，这点要注意。</p>
</blockquote>
<h3 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h3><p>画矩形需要知道左上角和右下角的坐标：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 画一个绿色边框的矩形，参数2：左上角坐标，参数3：右下角坐标</span></div><div class="line">cv2.rectangle(img, (<span class="number">384</span>, <span class="number">0</span>), (<span class="number">510</span>, <span class="number">128</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">3</span>)</div></pre></td></tr></table></figure>
<h3 id="画圆"><a href="#画圆" class="headerlink" title="画圆"></a>画圆</h3><p>画圆需要指定圆心和半径，注意下面的例子中线宽=-1代表填充：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 画一个填充红色的圆，参数2：圆心坐标，参数3：半径</span></div><div class="line">cv2.circle(img, (<span class="number">447</span>, <span class="number">63</span>), <span class="number">63</span>, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">-1</span>)</div></pre></td></tr></table></figure>
<h3 id="画椭圆"><a href="#画椭圆" class="headerlink" title="画椭圆"></a>画椭圆</h3><p>画椭圆需要的参数比较多，请对照后面的代码理解这几个参数：</p>
<ul>
<li>参数2：椭圆中心(x,y)</li>
<li>参数3：x/y轴的长度</li>
<li>参数4：angle–椭圆的旋转角度</li>
<li>参数5：startAngle–椭圆的起始角度</li>
<li>参数6：endAngle–椭圆的结束角度</li>
</ul>
<blockquote>
<p>经验之谈：这里的角度是以顺时针方向计算的。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在图中心画一个填充的半圆</span></div><div class="line">cv2.ellipse(img, (<span class="number">256</span>, <span class="number">256</span>), (<span class="number">100</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">0</span>, <span class="number">180</span>, (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">-1</span>)</div></pre></td></tr></table></figure>
<h3 id="画多边形"><a href="#画多边形" class="headerlink" title="画多边形"></a>画多边形</h3><p>画多边形需要指定一系列多边形的顶点坐标，相当于从第一个点到第二个点画直线，再从第二个点到第三个点画直线….</p>
<p>多边形的顶点坐标需要变成”顶点数×1×2”维的矩阵：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义四个顶点坐标</span></div><div class="line">pts = np.array([[<span class="number">10</span>, <span class="number">5</span>],  [<span class="number">50</span>, <span class="number">10</span>], [<span class="number">70</span>, <span class="number">20</span>], [<span class="number">20</span>, <span class="number">30</span>]], np.int32)</div><div class="line"><span class="comment"># 顶点个数：4，矩阵变成4*1*2维</span></div><div class="line">pts = pts.reshape((<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>))</div><div class="line">img = cv2.polylines(img, [pts], <span class="keyword">True</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>))</div></pre></td></tr></table></figure>
<p><code>cv2.polylines()</code>的参数3如果是False的话，多边形就不闭合。</p>
<blockquote>
<p>经验之谈：如果需要绘制多条直线，使用cv2.polylines()要比cv2.line()高效很多，例如：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用cv2.polylines()画多条直线</span></div><div class="line">line1 = np.array([[<span class="number">100</span>, <span class="number">20</span>],  [<span class="number">300</span>, <span class="number">20</span>]], np.int32).reshape((<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>))</div><div class="line">line2 = np.array([[<span class="number">100</span>, <span class="number">60</span>],  [<span class="number">300</span>, <span class="number">60</span>]], np.int32).reshape((<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>))</div><div class="line">line3 = np.array([[<span class="number">100</span>, <span class="number">100</span>],  [<span class="number">300</span>, <span class="number">100</span>]], np.int32).reshape((<span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>))</div><div class="line">img = cv2.polylines(img, [line1, line2, line3], <span class="keyword">True</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>))</div></pre></td></tr></table></figure>
<h3 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h3><p>使用<code>cv2.putText()</code>添加文字，它的参数也比较多，同样请对照后面的代码理解这几个参数：</p>
<ul>
<li>参数2：要添加的文本</li>
<li>参数3：文字的起始坐标（左下角为起点）</li>
<li>参数4：字体</li>
<li>参数5：文字大小（缩放比例）</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 添加文字</span></div><div class="line">font = cv2.FONT_HERSHEY_SIMPLEX</div><div class="line">cv2.putText(img, <span class="string">'ex2tron'</span>, (<span class="number">10</span>, <span class="number">500</span>), font,</div><div class="line">            <span class="number">4</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>, lineType=cv2.LINE_AA)</div></pre></td></tr></table></figure>
<p>这里有个线型lineType参数，LINE_AA表示抗锯齿线型，具体可见<a href="https://docs.opencv.org/3.3.1/d0/de1/group__core.html#gaf076ef45de481ac96e0ab3dc2c29a777" target="_blank" rel="external">此表</a></p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>cv2.line()画直线，cv2.circle()画圆，cv2.rectangle()画矩形，cv2.ellipse()画椭圆，cv2.polylines()画多边形，cv2.putText()添加文字。</p>
<p>画多条直线时，cv2.polylines()要比cv2.line()高效很多。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li>你能用已学的绘图功能画出OpenCV的logo吗？(提示：椭圆和圆)</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_draw_opencv_logo.jpg" alt="OpenCV logo" title="">
                </div>
                <div class="image-caption">OpenCV logo</div>
            </figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/8.%20%E7%BB%98%E5%9B%BE%E5%8A%9F%E8%83%BD" target="_blank" rel="external">本节源码</a></p>
<p><a href="https://docs.opencv.org/3.3.1/d0/de1/group__core.html#gaf076ef45de481ac96e0ab3dc2c29a777" target="_blank" rel="external">LineTypes</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_drawing_functions/py_drawing_functions.html" target="_blank" rel="external">Drawing Functions in OpenCV</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习画线、圆和矩形等多种几何形状，给图片添加文字。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="绘图" scheme="https://ex2tron.github.io/tags/%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程7：图像几何变换</title>
    <link href="https://ex2tron.github.io/2017/12/08/Python-OpenCV%E6%95%99%E7%A8%8B7%EF%BC%9A%E5%9B%BE%E5%83%8F%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/"/>
    <id>https://ex2tron.github.io/2017/12/08/Python-OpenCV教程7：图像几何变换/</id>
    <published>2017-12-08T06:36:53.000Z</published>
    <updated>2017-12-09T03:31:35.275Z</updated>
    
    <content type="html"><![CDATA[<p>学习如何旋转、平移和缩放图片，了解仿射/透视变换。<a id="more"></a>图片等可到<a href="#引用">源码处</a>下载。</p>
<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>实现旋转、平移和缩放图片</li>
<li>了解仿射变换和透视变换</li>
<li>OpenCV函数：cv2.resize(), cv2.warpAffine(), cv2.warpPerspective()</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="缩放图片"><a href="#缩放图片" class="headerlink" title="缩放图片"></a>缩放图片</h3><p>缩放就是调整图片的大小，使用<code>cv2.resize()</code>函数实现缩放。可以按照比例缩放，也可以按照指定的大小缩放：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">img = cv2.imread(<span class="string">'drawing.jpg'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 按照指定的宽度、高度缩放图片</span></div><div class="line">res = cv2.resize(img, (<span class="number">132</span>, <span class="number">150</span>))</div><div class="line"><span class="comment"># 按照比例缩放，如x,y轴均放大一倍</span></div><div class="line">res2 = cv2.resize(img, <span class="keyword">None</span>, fx=<span class="number">2</span>, fy=<span class="number">2</span>, interpolation=cv2.INTER_LINEAR)</div><div class="line"></div><div class="line">cv2.imshow(<span class="string">'shrink'</span>, res), cv2.imshow(<span class="string">'zoom'</span>, res2)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>我们也可以指定缩放方法<code>interpolation</code>，更专业点叫插值方法，默认是<code>INTER_LINEAR</code>，全部可以参考：<a href="https://docs.opencv.org/3.3.1/da/d54/group__imgproc__transform.html#ga5bb5a1fea74ea38e1a5445ca803ff121" target="_blank" rel="external">InterpolationFlags</a></p>
<h2 id="平移图片"><a href="#平移图片" class="headerlink" title="平移图片"></a>平移图片</h2><p>这里涉及到<a href="https://baike.baidu.com/item/仿射变换" target="_blank" rel="external">仿射变换</a>的概念，大家不用知道它的意思，只需要了解下面三点：</p>
<ul>
<li>仿射变换后，原图中平行的线依然平行</li>
<li>用<code>cv2.warpAffine()</code>实现仿射变换</li>
<li>仿射变换需要定义一个2*3维的变换矩阵</li>
</ul>
<p>要平移图片，我们需要定义下面这样一个矩阵，tx,ty是向x和y方向平移的距离：</p>
<p>$$<br> M = \left[<br> \begin{matrix}<br>   1 &amp; 0 &amp; tx \newline<br>   0 &amp; 1 &amp; ty<br>  \end{matrix}<br>  \right] \tag{3}<br>$$</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 平移图片</span></div><div class="line">rows, cols = img.shape[:<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="comment"># 定义平移矩阵，需要是numpy的float32类型</span></div><div class="line"><span class="comment"># x轴平移100，y轴平移50</span></div><div class="line">M = np.float32([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">100</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">50</span>]])</div><div class="line"><span class="comment"># 用仿射变换实现平移</span></div><div class="line">dst = cv2.warpAffine(img, M, (cols, rows))</div><div class="line"></div><div class="line">cv2.imshow(<span class="string">'shift'</span>, dst)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>再次强调一下：图片的高度（y方向）是rows，宽度（x方向）是cols，请勿混淆。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_translation_100_50.jpg" alt="平移图片" title="">
                </div>
                <div class="image-caption">平移图片</div>
            </figure>
<h3 id="旋转图片"><a href="#旋转图片" class="headerlink" title="旋转图片"></a>旋转图片</h3><p>旋转同平移一样，也需要定义一个变换矩阵。OpenCV直接提供了<code>cv2.getRotationMatrix2D()</code>函数用来生成这个矩阵，对这个矩阵的形式感兴趣的童鞋可以去<a href="#引用">引用</a>查看：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 45°旋转图片并缩小一半</span></div><div class="line">M = cv2.getRotationMatrix2D((cols / <span class="number">2</span>, rows / <span class="number">2</span>), <span class="number">45</span>, <span class="number">0.5</span>)</div><div class="line">dst = cv2.warpAffine(img, M, (cols, rows))</div><div class="line"></div><div class="line">cv2.imshow(<span class="string">'rotation'</span>, dst)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><code>cv2.getRotationMatrix2D()</code>函数有三个参数：</p>
<ul>
<li>参数1：图片的旋转中心</li>
<li>参数2：旋转角度</li>
<li>参数3：缩放比例，该例中0.5表示我们缩小一半</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_rotation_45_degree.jpg" alt="旋转45°并缩放" title="">
                </div>
                <div class="image-caption">旋转45°并缩放</div>
            </figure>
<h3 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h3><p>除了平移和旋转，如何实现任意的图像变换呢？同样的道理，我们需要一个变换矩阵。</p>
<p>要生成这个变换矩阵，需要定义变换前后的三个点，比如说：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 变换前的三个点</span></div><div class="line">pts1 = np.float32([[<span class="number">50</span>, <span class="number">65</span>], [<span class="number">150</span>, <span class="number">65</span>], [<span class="number">210</span>, <span class="number">210</span>]])</div><div class="line"><span class="comment"># 变换后的三个点</span></div><div class="line">pts2 = np.float32([[<span class="number">50</span>, <span class="number">100</span>], [<span class="number">150</span>, <span class="number">65</span>], [<span class="number">100</span>, <span class="number">250</span>]])</div><div class="line"></div><div class="line"><span class="comment"># 生成变换矩阵</span></div><div class="line">M = cv2.getAffineTransform(pts1, pts2)</div><div class="line">dst = cv2.warpAffine(img, M, (cols, rows))</div><div class="line"></div><div class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'input'</span>)</div><div class="line">plt.subplot(<span class="number">122</span>), plt.imshow(dst), plt.title(<span class="string">'output'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>变换前后的三个点我已经标记出来了。用<code>cv2.getAffineTransform()</code>生成变换矩阵，接下来再用<code>cv2.warpAffine()</code>实现变换。大家可以修改下变换后的三个点坐标看看效果：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_affine_transformation_drawing.jpg" alt="仿射变换前后对比图" title="">
                </div>
                <div class="image-caption">仿射变换前后对比图</div>
            </figure>
<h3 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h3><p><a href="https://baike.baidu.com/item/%E9%80%8F%E8%A7%86%E5%8F%98%E6%8D%A2" target="_blank" rel="external">透视变换</a>绝对是一项很酷的功能。我们经常会用手机去拍身份证和文件，无论你怎么拍，貌似都拍不正或者有边框。如果你使用过手机上面一些扫描类软件，比如”<a href="https://baike.baidu.com/item/%E6%89%AB%E6%8F%8F%E5%85%A8%E8%83%BD%E7%8E%8B" target="_blank" rel="external">扫描全能王</a>“，”<a href="https://baike.baidu.com/item/Office%20Lens" target="_blank" rel="external">Office Lens</a>“，它们能很好地矫正图片。这些软件就是应用透视变换实现的，跟仿射变换一样，我们不用知道它的具体原理。</p>
<p>透视变换后，原图中的直线依旧是直线。如下图，我们实现这个功能：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_perspective_transformations_inm.jpg" alt="矫正一鸣的卡片" title="">
                </div>
                <div class="image-caption">矫正一鸣的卡片</div>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">img = cv2.imread(<span class="string">'card.jpg'</span>)</div><div class="line">rows, cols = img.shape[:<span class="number">2</span>]</div><div class="line"></div><div class="line"><span class="comment"># 原图中卡片的四个角点</span></div><div class="line">pts1 = np.float32([[<span class="number">148</span>, <span class="number">80</span>], [<span class="number">437</span>, <span class="number">114</span>], [<span class="number">94</span>, <span class="number">247</span>], [<span class="number">423</span>, <span class="number">288</span>]])</div><div class="line"><span class="comment"># 变换后分别在左上、右上、左下、右下四个点</span></div><div class="line">pts2 = np.float32([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">320</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">178</span>], [<span class="number">320</span>, <span class="number">178</span>]])</div><div class="line"></div><div class="line"><span class="comment"># 生成透视变换矩阵</span></div><div class="line">M = cv2.getPerspectiveTransform(pts1, pts2)</div><div class="line"><span class="comment"># 进行透视变换</span></div><div class="line">dst = cv2.warpPerspective(img, M, (<span class="number">320</span>, <span class="number">178</span>))</div><div class="line"></div><div class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img[:, :, ::<span class="number">-1</span>]), plt.title(<span class="string">'input'</span>)</div><div class="line">plt.subplot(<span class="number">122</span>), plt.imshow(dst[:, :, ::<span class="number">-1</span>]), plt.title(<span class="string">'output'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>透视变换需要前后四个点来生成3*3的变换矩阵，用<code>cv2.getPerspectiveTransform()</code>实现。然后再用<code>cv2.warpPerspective()</code>进行变换。代码中有个<code>img[:, :, ::-1]</code>还记得吗？忘记的话，请看<a href="#练习">练习</a>。</p>
<p>是不是很简单？当然，我们后面学习了特征提取之后，就可以自动识别角点了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>cv2.resize()缩放图片，可以按指定大小缩放，亦可以按比例缩放。</p>
<p>平移和旋转是靠cv2.warpAffine()仿射变换实现的，也可以自己定义变换前后的点，实现任意变换。</p>
<p>透视变换常用于矫正图片，是一个很酷的功能。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li>透视变换代码中有个<code>img[:, :, ::-1]</code>，还记得吗？请复习：<a href="http://ex2tron.top/2017/12/06/Python-OpenCV教程番外篇1：Matplotlib显示图像/" target="_blank" rel="external">Matplotlib显示图像</a> </li>
</ol>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/7.%20%E5%9B%BE%E5%83%8F%E9%9B%86%E5%90%88%E5%8F%98%E6%8D%A2" target="_blank" rel="external">本节源码</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_geometric_transformations/py_geometric_transformations.html" target="_blank" rel="external">Geometric Transformations of Images</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习如何旋转、平移和缩放图片，了解仿射/透视变换。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="几何变换" scheme="https://ex2tron.github.io/tags/%E5%87%A0%E4%BD%95%E5%8F%98%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程番外篇2：Otsu阈值法</title>
    <link href="https://ex2tron.github.io/2017/12/08/Python-OpenCV%E6%95%99%E7%A8%8B%E7%95%AA%E5%A4%96%E7%AF%872%EF%BC%9AOtsu%E9%98%88%E5%80%BC%E6%B3%95/"/>
    <id>https://ex2tron.github.io/2017/12/08/Python-OpenCV教程番外篇2：Otsu阈值法/</id>
    <published>2017-12-08T04:48:05.000Z</published>
    <updated>2017-12-08T04:54:42.360Z</updated>
    
    <content type="html"><![CDATA[<p>大部分图像处理任务都需要先二值化操作，所以阈值的选取很关键，Otsu阈值法会自动计算阈值。<a id="more"></a></p>
<p><a href="https://baike.baidu.com/item/otsu/16252828" target="_blank" rel="external">Otsu阈值法</a>（日本人提出的，也可以叫大津算法）会自动计算阈值，它适用于双峰图片，啥意思呢？</p>
<h2 id="什么是双峰图片？"><a href="#什么是双峰图片？" class="headerlink" title="什么是双峰图片？"></a>什么是双峰图片？</h2><p>双峰图片就是指图片的灰度直方图上有两个峰值：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_bimodal_image_two_peaks.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>Otsu算法假设这副图片由前景色和背景色组成，通过统计学方法（最大类间方差）选取一个阈值，将前景和背景尽可能分开，算法详解：<a href="https://en.wikipedia.org/wiki/Otsu%27s_method" target="_blank" rel="external">Otsu’s Method(wikipedia)</a></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>下面这段代码对比了使用固定阈值和Otsu阈值后的不同结果：</p>
<p>另外，对含噪点的图像，先进行滤波操作效果会更好。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">img = cv2.imread(<span class="string">'noisy.jpg'</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 固定阈值法</span></div><div class="line">ret1, th1 = cv2.threshold(img, <span class="number">100</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</div><div class="line"></div><div class="line"><span class="comment"># Otsu阈值法</span></div><div class="line">ret2, th2 = cv2.threshold(img, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY + cv2.THRESH_OTSU)</div><div class="line"></div><div class="line"><span class="comment"># 先进行高斯滤波，再使用Otsu阈值法</span></div><div class="line">blur = cv2.GaussianBlur(img, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</div><div class="line">ret3, th3 = cv2.threshold(blur, <span class="number">0</span>, <span class="number">255</span>, cv2.THRESH_BINARY + cv2.THRESH_OTSU)</div><div class="line"></div><div class="line">images = [img, <span class="number">0</span>, th1,</div><div class="line">          img, <span class="number">0</span>, th2,</div><div class="line">          blur, <span class="number">0</span>, th3]</div><div class="line">titles = [<span class="string">'Original'</span>, <span class="string">'Histogram'</span>, <span class="string">'Global(v=100)'</span>,</div><div class="line">          <span class="string">'Original'</span>, <span class="string">'Histogram'</span>, <span class="string">"Otsu's"</span>,</div><div class="line">          <span class="string">'Gaussian filtered Image'</span>, <span class="string">'Histogram'</span>, <span class="string">"Otsu's"</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    <span class="comment"># 绘制原图</span></div><div class="line">    plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i * <span class="number">3</span> + <span class="number">1</span>)</div><div class="line">    plt.imshow(images[i * <span class="number">3</span>], <span class="string">'gray'</span>)</div><div class="line">    plt.title(titles[i * <span class="number">3</span>], fontsize=<span class="number">8</span>)</div><div class="line">    plt.xticks([]), plt.yticks([])</div><div class="line"></div><div class="line">    <span class="comment"># 绘制直方图plt.hist，ravel函数将数组降成一维</span></div><div class="line">    plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i * <span class="number">3</span> + <span class="number">2</span>)</div><div class="line">    plt.hist(images[i * <span class="number">3</span>].ravel(), <span class="number">256</span>)</div><div class="line">    plt.title(titles[i * <span class="number">3</span> + <span class="number">1</span>], fontsize=<span class="number">8</span>)</div><div class="line">    plt.xticks([]), plt.yticks([])</div><div class="line"></div><div class="line">    <span class="comment"># 绘制阈值图</span></div><div class="line">    plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i * <span class="number">3</span> + <span class="number">3</span>)</div><div class="line">    plt.imshow(images[i * <span class="number">3</span> + <span class="number">2</span>], <span class="string">'gray'</span>)</div><div class="line">    plt.title(titles[i * <span class="number">3</span> + <span class="number">2</span>], fontsize=<span class="number">8</span>)</div><div class="line">    plt.xticks([]), plt.yticks([])</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_otsu_vs_simple_thresholding.jpg" alt="固定阈值 vs Otsu阈值" title="">
                </div>
                <div class="image-caption">固定阈值 vs Otsu阈值</div>
            </figure>
<p>可以看到，Otsu阈值明显由于固定阈值，省去了不断尝试阈值判断效果好坏的过程。其中，绘制直方图时，使用了numpy中的<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html" target="_blank" rel="external">ravel()</a>函数，它会将原矩阵压缩成一维数组，便于画直方图。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/6.%20阈值分割" target="_blank" rel="external">本节源码</a></p>
<p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html" target="_blank" rel="external">numpy.ravel</a></p>
<p><a href="https://en.wikipedia.org/wiki/Otsu%27s_method" target="_blank" rel="external">Otsu’s Method</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_thresholding/py_thresholding.html" target="_blank" rel="external">Image Thresholding</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大部分图像处理任务都需要先二值化操作，所以阈值的选取很关键，Otsu阈值法会自动计算阈值。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="阈值" scheme="https://ex2tron.github.io/tags/%E9%98%88%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程6：阈值分割</title>
    <link href="https://ex2tron.github.io/2017/12/07/Python-OpenCV%E6%95%99%E7%A8%8B6%EF%BC%9A%E9%98%88%E5%80%BC%E5%88%86%E5%89%B2/"/>
    <id>https://ex2tron.github.io/2017/12/07/Python-OpenCV教程6：阈值分割/</id>
    <published>2017-12-07T13:14:44.000Z</published>
    <updated>2017-12-08T06:31:36.057Z</updated>
    
    <content type="html"><![CDATA[<p>学习使用不同的阈值方法”二值化”图像。<a id="more"></a>图片等可到<a href="#引用">源码处</a>下载。</p>
<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>使用固定阈值、自适应阈值和Otsu阈值法”二值化”图像</li>
<li>OpenCV函数：cv2.threshold(), cv2.adaptiveThreshold()</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="固定阈值分割"><a href="#固定阈值分割" class="headerlink" title="固定阈值分割"></a>固定阈值分割</h3><p>固定阈值分割很直接，一句话说就是像素点值大于阈值一个值，小于阈值是另外一个值。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_threshold_binary_demo.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"><span class="comment"># 灰度图读入</span></div><div class="line">img = cv2.imread(<span class="string">'gradient.jpg'</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 阈值分割</span></div><div class="line">ret, th = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</div><div class="line">cv2.imshow(<span class="string">'thresh'</span>, th)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><code>cv2.threshold()</code>用来实现阈值分割，ret是return value缩写，代表当前的阈值，暂时无用，不用管它。函数有4个参数：</p>
<ul>
<li>参数1：要处理的原图，<strong>一般是灰度图</strong></li>
<li>参数2：设定的阈值</li>
<li>参数3：最大阈值，一般为255</li>
<li>参数4：阈值的方式，主要有5种，详情：<a href="https://docs.opencv.org/3.3.1/d7/d1b/group__imgproc__misc.html#gaa9e58d2860d4afa658ef70a9b1115576" target="_blank" rel="external">ThresholdTypes</a></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 应用5种不同的阈值方法</span></div><div class="line">ret, th1 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</div><div class="line">ret, th2 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY_INV)</div><div class="line">ret, th3 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TRUNC)</div><div class="line">ret, th4 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO)</div><div class="line">ret, th5 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_TOZERO_INV)</div><div class="line"></div><div class="line">titles = [<span class="string">'Original'</span>, <span class="string">'BINARY'</span>, <span class="string">'BINARY_INV'</span>, <span class="string">'TRUNC'</span>, <span class="string">'TOZERO'</span>, <span class="string">'TOZERO_INV'</span>]</div><div class="line">images = [img, th1, th2, th3, th4, th5]</div><div class="line"></div><div class="line"><span class="comment"># 使用Matplotlib显示</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</div><div class="line">    plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i + <span class="number">1</span>)</div><div class="line">    plt.imshow(images[i], <span class="string">'gray'</span>)</div><div class="line">    plt.title(titles[i], fontsize=<span class="number">8</span>)</div><div class="line">    plt.xticks([]), plt.yticks([])  <span class="comment"># 隐藏坐标轴</span></div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_different_threshold_demo.jpg" alt="5种不同的阈值方式结果" title="">
                </div>
                <div class="image-caption">5种不同的阈值方式结果</div>
            </figure>
<p>结合下表，就很容易理解这5种方式了：</p>
<blockquote>
<p>经验之谈：很多人误以为阈值分割就是<a href="https://baike.baidu.com/item/%E4%BA%8C%E5%80%BC%E5%8C%96" target="_blank" rel="external">二值化</a>。从上图中可以发现，两者并不等同，阈值分割结果是两种值，而不是两个值，所以教程开头我把二值化加了引号。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_different_thresholds_theory.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h3 id="自适应阈值"><a href="#自适应阈值" class="headerlink" title="自适应阈值"></a>自适应阈值</h3><p>看得出来固定阈值是在整幅图片上应用一个阈值进行分割，<em>它并不适用于明暗分布不均的图片</em>。<code>cv2.adaptiveThreshold()</code>自适应阈值会每次取图片的一小部分计算阈值，这样图片不同区域的阈值就不尽相同。它有5个参数，其实很好理解，先看下效果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自适应阈值对比固定阈值</span></div><div class="line">img = cv2.imread(<span class="string">'sudoku.jpg'</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 固定阈值</span></div><div class="line">ret, th1 = cv2.threshold(img, <span class="number">127</span>, <span class="number">255</span>, cv2.THRESH_BINARY)</div><div class="line"><span class="comment"># 自适应阈值</span></div><div class="line">th2 = cv2.adaptiveThreshold(</div><div class="line">    img, <span class="number">255</span>, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, <span class="number">11</span>, <span class="number">4</span>)</div><div class="line">th3 = cv2.adaptiveThreshold(</div><div class="line">    img, <span class="number">255</span>, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, <span class="number">17</span>, <span class="number">6</span>)</div><div class="line"></div><div class="line">titles = [<span class="string">'Original'</span>, <span class="string">'Global(v = 127)'</span>, <span class="string">'Adaptive Mean'</span>, <span class="string">'Adaptive Gaussian'</span>]</div><div class="line">images = [img, th1, th2, th3]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</div><div class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, i + <span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)</div><div class="line">    plt.title(titles[i], fontsize=<span class="number">8</span>)</div><div class="line">    plt.xticks([]), plt.yticks([])</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_adaptive_vs_global_thresholding.jpg" alt="自适应阈值对比固定阈值" title="">
                </div>
                <div class="image-caption">自适应阈值对比固定阈值</div>
            </figure>
<ul>
<li>参数1：要处理的原图</li>
<li>参数2：最大阈值，一般为255</li>
<li>参数3：小区域阈值的计算方式<ul>
<li>ADAPTIVE_THRESH_MEAN_C：小区域内取均值</li>
<li>ADAPTIVE_THRESH_GAUSSIAN_C：小区域内加权求和，权重是个高斯核</li>
</ul>
</li>
<li>参数4：阈值方式（跟前面讲的那5种相同）</li>
<li>参数5：小区域的面积，如11就是11*11的小块</li>
<li>参数6：最终阈值等于小区域计算出的阈值再减去此值</li>
</ul>
<p>如果你没看懂上面的参数也不要紧，暂时会用就行，当然我建议你调整下参数看看不同的结果。</p>
<h3 id="Otsu阈值"><a href="#Otsu阈值" class="headerlink" title="Otsu阈值"></a>Otsu阈值</h3><p>在前面固定阈值中，我们是随便选了一个阈值如127，那如何知道我们选的这个阈值效果好不好呢？答案是：不断尝试，所以这种方法在很多文献中都被称为经验阈值。<a href="https://baike.baidu.com/item/otsu/16252828" target="_blank" rel="external">Otsu阈值法</a>就提供了一种自动高效的二值化方法，不过我们直方图还没学，这里暂时略过。</p>
<p>好吧，我知道我激起了你的兴趣，~ o(<em>￣▽￣</em>)o，有能力的童鞋可以看下<a href="#练习">练习题</a>。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>cv2.threshold()用来进行固定阈值分割。固定阈值不适用于光线不均匀的图片，所以用cv2.adaptiveThreshold()进行自适应阈值分割。</p>
<p>二值化跟阈值分割并不等同。针对不同的图片，可以采用不同的阈值方法。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li>Otsu阈值是一种高效的二值化算法，请尝试阅读<a href="http://ex2tron.top/2017/12/08/Python-OpenCV教程番外篇2：Otsu阈值法/" target="_blank" rel="external">番外篇2：Otsu阈值法</a>。</li>
</ol>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/6.%20阈值分割" target="_blank" rel="external">本节源码</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_thresholding/py_thresholding.html" target="_blank" rel="external">Image Thresholding</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习使用不同的阈值方法”二值化”图像。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="阈值" scheme="https://ex2tron.github.io/tags/%E9%98%88%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程5：颜色空间转换</title>
    <link href="https://ex2tron.github.io/2017/12/07/Python-OpenCV%E6%95%99%E7%A8%8B5%EF%BC%9A%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    <id>https://ex2tron.github.io/2017/12/07/Python-OpenCV教程5：颜色空间转换/</id>
    <published>2017-12-07T07:21:19.000Z</published>
    <updated>2017-12-07T11:33:45.500Z</updated>
    
    <content type="html"><![CDATA[<p>学习如何进行图片的颜色空间转换，视频中追踪特定颜色物体。<a id="more"></a>图片等可到<a href="#引用">源码处</a>下载。</p>
<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>颜色空间转换，如BGR↔Gray，BGR↔HSV等</li>
<li>追踪视频中特定颜色的物体</li>
<li>OpenCV函数：cv2.cvtColor(),cv2.inRange()</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="颜色空间转换"><a href="#颜色空间转换" class="headerlink" title="颜色空间转换"></a>颜色空间转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">img = cv2.imread(<span class="string">'lena.jpg'</span>)</div><div class="line"><span class="comment"># 转换为灰度图</span></div><div class="line">img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</div><div class="line">cv2.imshow(<span class="string">'img'</span>, img)</div><div class="line">cv2.imshow(<span class="string">'gray'</span>, img_gray), cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p><code>cv2.cvtColor()</code>用来进行颜色模型转换，参数1是要转换的图片，参数2是转换模式，<code>COLOR_BGR2GRAY</code>表示BGR→Gray，可用下面的代码显示所有的转换模式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">flags = [i <span class="keyword">for</span> i <span class="keyword">in</span> dir(cv2) <span class="keyword">if</span> i.startswith(<span class="string">'COLOR_'</span>)]</div><div class="line">print(flags)</div></pre></td></tr></table></figure>
<h3 id="视频中特定颜色物体追踪"><a href="#视频中特定颜色物体追踪" class="headerlink" title="视频中特定颜色物体追踪"></a>视频中特定颜色物体追踪</h3><p><a href="https://baike.baidu.com/item/HSV/547122" target="_blank" rel="external">HSV</a>是一个常用于颜色识别的模型，相比BGR更易区分颜色，转换模式用<code>COLOR_BGR2HSV</code>表示。</p>
<blockquote>
<p>经验之谈：OpenCV中色调H范围为[0,179]，饱和度S是[0,255]，明度V是[0,255]。<br>其他软件可能使用不同的尺度表示，所以同其他软件使用时，记得归一化。</p>
</blockquote>
<p>现在，我们实现一个使用HSV来只显示视频中蓝色物体的例子，步骤如下：</p>
<ol>
<li>捕获视频中的一帧</li>
<li>从BGR转换到HSV</li>
<li>提取蓝色范围的物体</li>
<li>只显示蓝色物体</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_blue_object_tracking.jpg" alt="跟踪视频中的蓝色物体" title="">
                </div>
                <div class="image-caption">跟踪视频中的蓝色物体</div>
            </figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 蓝色的范围，不同光照条件下不一样，可灵活调整</span></div><div class="line">lower_blue = np.array([<span class="number">100</span>, <span class="number">110</span>, <span class="number">110</span>])</div><div class="line">upper_blue = np.array([<span class="number">130</span>, <span class="number">255</span>, <span class="number">255</span>])</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">    <span class="comment"># 1.捕获视频中的一帧</span></div><div class="line">    ret, frame = capture.read()</div><div class="line"></div><div class="line">    <span class="comment"># 2.从BGR转换到HSV</span></div><div class="line">    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)</div><div class="line"></div><div class="line">    <span class="comment"># 3.inRange()：介于lower/upper之间的为白色，其余黑色</span></div><div class="line">    mask = cv2.inRange(hsv, lower_blue, upper_blue)</div><div class="line"></div><div class="line">    <span class="comment"># 4.只保留原图中的蓝色部分</span></div><div class="line">    res = cv2.bitwise_and(frame, frame, mask=mask)</div><div class="line"></div><div class="line">    cv2.imshow(<span class="string">'frame'</span>, frame)</div><div class="line">    cv2.imshow(<span class="string">'mask'</span>, mask)</div><div class="line">    cv2.imshow(<span class="string">'res'</span>, res)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>其中，bitwise_and()函数暂时不用管，后面会讲到。那蓝色的HSV值的lower和upper范围是怎么得到的呢？其实很简单，我们先把标准蓝色的值用cvtColor()转换下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">blue = np.uint8([[[<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>]]])</div><div class="line">hsv_blue = cv2.cvtColor(blue, cv2.COLOR_BGR2HSV)</div><div class="line">print(hsv_blue)  <span class="comment"># [[[120 255 255]]]</span></div></pre></td></tr></table></figure>
<p>结果是[120, 255, 255]，所以，我们把蓝色的范围调整成了上面代码那样。</p>
<blockquote>
<p>经验之谈：<a href="https://baike.baidu.com/item/Lab/1514615" target="_blank" rel="external">Lab</a>颜色空间也经常用来做颜色识别，有兴趣的同学可以了解下。</p>
</blockquote>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>cv2.cvtColor()函数用来进行颜色空间转换，常用BGR↔Gray，BGR↔HSV。</p>
<p>HSV/Lab颜色模型常用于颜色识别。要想知道某种颜色在HSV下的值，可以将它的BGR值用cvtColor()转换得到。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li>尝试在视频中同时提取红色、蓝色、绿色的物体。（效果如下）</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_exercise_tracking_three_colors.jpg" alt="同时追踪3种颜色" title="">
                </div>
                <div class="image-caption">同时追踪3种颜色</div>
            </figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/5.%20%E9%A2%9C%E8%89%B2%E7%A9%BA%E9%97%B4%E8%BD%AC%E6%8D%A2" target="_blank" rel="external">本节源码</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_colorspaces/py_colorspaces.html" target="_blank" rel="external">Changing Colorspaces</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习如何进行图片的颜色空间转换，视频中追踪特定颜色物体。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="HSV" scheme="https://ex2tron.github.io/tags/HSV/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程4：图像基本操作</title>
    <link href="https://ex2tron.github.io/2017/12/07/Python-OpenCV%E6%95%99%E7%A8%8B4%EF%BC%9A%E5%9B%BE%E5%83%8F%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://ex2tron.github.io/2017/12/07/Python-OpenCV教程4：图像基本操作/</id>
    <published>2017-12-07T04:13:15.000Z</published>
    <updated>2017-12-07T07:13:43.720Z</updated>
    
    <content type="html"><![CDATA[<p>学习获取和修改像素点的值，ROI感兴趣区域，通道分离合并等基本操作。<a id="more"></a>图片等可到<a href="#引用">源码处</a>下载。</p>
<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>访问和修改图片像素点的值</li>
<li>获取图片的宽、高、通道数等属性</li>
<li>了解感兴趣区域ROI</li>
<li>分离和合并图像通道</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="获取和修改像素点值"><a href="#获取和修改像素点值" class="headerlink" title="获取和修改像素点值"></a>获取和修改像素点值</h3><p>我们先读入一张图片：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line">img = cv2.imread(<span class="string">'lena.jpg'</span>)</div></pre></td></tr></table></figure>
<p>通过行列的坐标来获取某像素点的值，对于彩色图，这个值是B,G,R三个值的列表，对于灰度图，只有一个值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">px = img[<span class="number">100</span>, <span class="number">100</span>]</div><div class="line">print(px)  <span class="comment"># [119 108 201]</span></div><div class="line"></div><div class="line"><span class="comment"># 只获取蓝色blue通道的值</span></div><div class="line">px_blue = img[<span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>]</div><div class="line">print(px_blue)  <span class="comment"># 119</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意，行列坐标是img[y,x]，如下图，本教程不再赘述图像处理的基本理论，只做简单提及。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_image_coordinate_channels.jpg" alt="图像坐标和通道" title="">
                </div>
                <div class="image-caption">图像坐标和通道</div>
            </figure>
<p>修改像素的值也是同样的方式：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">img[<span class="number">100</span>, <span class="number">100</span>] = [<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>]</div><div class="line">print(img[<span class="number">100</span>, <span class="number">100</span>])  <span class="comment"># [255 255 255]</span></div></pre></td></tr></table></figure>
<blockquote>
<p>经验之谈：还记得之前说过OpenCV-Python原生支持numpy吗？numpy是针对矩阵运算优化的，所以像上面的操作性能较差，更推荐的方式是：<br>获取：img.item(100,100,0)，修改：img.itemset((100,100,0),255)，但这种方式只能B,G,R逐一进行。</p>
</blockquote>
<h3 id="图片属性"><a href="#图片属性" class="headerlink" title="图片属性"></a>图片属性</h3><p><code>img.shape</code>获取图像的形状，图片是彩色的话，返回一个包含高度、宽度和通道数的元组，灰度图只返回高度和宽度：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">print(img.shape)  <span class="comment"># (263, 263, 3)</span></div><div class="line"><span class="comment"># 形状中包括高度、宽度和通道数</span></div><div class="line">height, width, channels = img.shape</div><div class="line"><span class="comment"># img是灰度图的话：height, width = img.shape</span></div></pre></td></tr></table></figure>
<p><code>img.dtype</code>获取图像数据类型：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(img.dtype)  <span class="comment"># uint8</span></div></pre></td></tr></table></figure>
<blockquote>
<p>经验之谈：很多错误都是因为数据类型不对导致的，所以健壮的代码需要对这个属性加以判断。</p>
</blockquote>
<p><code>img.size</code>获取图像总像素数：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(img.size)  <span class="comment"># 263*263*3=207507</span></div></pre></td></tr></table></figure>
<h3 id="ROI"><a href="#ROI" class="headerlink" title="ROI"></a>ROI</h3><p><a href="https://baike.baidu.com/item/ROI/1125333#viewPageContent" target="_blank" rel="external">ROI</a>：region of interest，感兴趣区域。什么意思呢？比如我们要检测眼睛，因为眼睛肯定在脸上，所以我们感兴趣的只有脸这部分，其他不需要关注，这样就可以大大节省计算量，提高运行速度。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_lena_face_roi_crop.jpg" alt="只关注脸( ╯□╰ )" title="">
                </div>
                <div class="image-caption">只关注脸( ╯□╰ )</div>
            </figure>
<p>截取ROI非常简单，指定图片的范围即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 截取脸部ROI</span></div><div class="line">face = img[<span class="number">100</span>:<span class="number">200</span>, <span class="number">115</span>:<span class="number">188</span>]</div><div class="line">cv2.imshow(<span class="string">'face'</span>, face)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h3 id="通道分割与合并"><a href="#通道分割与合并" class="headerlink" title="通道分割与合并"></a>通道分割与合并</h3><p>彩色图的BGR三个通道是可以分开单独访问的，也可以将单独的三个通道合并成一副图像。分别使用<code>cv2.split()</code>和<code>cv2.merge()</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">b, g, r = cv2.split(img)</div><div class="line">img = cv2.merge((b, g, r))</div></pre></td></tr></table></figure>
<p>split()函数比较耗时，<strong>更高效的方式是用numpy的索引</strong>，如提取B通道：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b = img[:, :, <span class="number">0</span>]</div><div class="line">cv2.imshow(<span class="string">'blue'</span>, b)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>img[y,x]获取/设置像素点值，img.shape：图片的形状（高度、宽度、通道数）,img.dtype：图像的数据类型。</p>
<p>img[y1:y2,x1:x2]进行ROI截取，cv2.split()/cv2.merge()通道分割/合并。更推荐的获取单通道方式：b = img[:, :, 0]。</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li>打开lena.jpg，将帽子部分（高：25~120，宽：50~220）的红色通道截取出来并显示。</li>
</ol>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/4.%20图像基本操作" target="_blank" rel="external">本节源码</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_core/py_basic_ops/py_basic_ops.html#basic-ops" target="_blank" rel="external">Basic Operations on Images</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习获取和修改像素点的值，ROI感兴趣区域，通道分离合并等基本操作。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="ROI" scheme="https://ex2tron.github.io/tags/ROI/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程3：打开摄像头</title>
    <link href="https://ex2tron.github.io/2017/12/06/Python-OpenCV%E6%95%99%E7%A8%8B3%EF%BC%9A%E6%89%93%E5%BC%80%E6%91%84%E5%83%8F%E5%A4%B4/"/>
    <id>https://ex2tron.github.io/2017/12/06/Python-OpenCV教程3：打开摄像头/</id>
    <published>2017-12-06T08:38:02.000Z</published>
    <updated>2017-12-07T06:43:08.695Z</updated>
    
    <content type="html"><![CDATA[<p>学习打开摄像头捕获照片、播放本地视频、录制视频等。<a id="more"></a>视频等可到<a href="#引用">源码处</a>下载。</p>
<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>打开摄像头并捕获照片</li>
<li>播放本地视频，录制视频</li>
<li>OpenCV函数：cv2.VideoCapture(), cv2.VideoWriter()</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="打开摄像头"><a href="#打开摄像头" class="headerlink" title="打开摄像头"></a>打开摄像头</h3><p>要使用摄像头，需要使用<code>cv2.VideoCapture(0)</code>创建VideoCapture对象，参数0指的是摄像头的编号。如果你电脑上有两个摄像头的话，访问第2个摄像头就可以传入1。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 打开摄像头并灰度化显示</span></div><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</div><div class="line">    <span class="comment"># 获取一帧</span></div><div class="line">    ret, frame = capture.read()</div><div class="line">    <span class="comment"># 将这帧转换为灰度图</span></div><div class="line">    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</div><div class="line"></div><div class="line">    cv2.imshow(<span class="string">'frame'</span>, gray)</div><div class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p><code>capture.read()</code>函数返回的第一个参数是一个布尔值，frame获取正确的话，ret=True。<code>cv2.cvtColor()</code>是颜色空间转换函数，OpenCV默认以BGR通道顺序存储图像，这里转成灰度图。</p>
<p>另外，通过<code>cap.get(propId)</code>可以获取摄像头的一些信息，比如捕获的分辨率，亮度和对比度等。propId是从0~18的数字，代表不同的属性，完整的属性列表可以参考：<a href="https://docs.opencv.org/3.3.0/d4/d15/group__videoio__flags__base.html#gaeb8dd9c89c10a5c63c139bf7c4f5704d" target="_blank" rel="external">Property Identifier</a>。也可以使用<code>cap.set(propId,value)</code>来修改属性值。比如说，我们在while之前添加如下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取捕获的分辨率</span></div><div class="line">width, height = capture.get(<span class="number">3</span>), capture.get(<span class="number">4</span>)</div><div class="line">print(width, height)</div><div class="line"></div><div class="line"><span class="comment"># 以原分辨率的一倍来捕获，</span></div><div class="line"><span class="comment"># 参数1可以直接写数字，或者OpenCV符号表示</span></div><div class="line">capture.set(cv2.CAP_PROP_FRAME_WIDTH, width * <span class="number">2</span>)</div><div class="line">capture.set(cv2.CAP_PROP_FRAME_HEIGHT, height * <span class="number">2</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>经验之谈：某些摄像头设定分辨率等参数时会无效，因为它有固定的分辨率大小支持，一般可在摄像头的资料页中找到。</p>
</blockquote>
<h3 id="播放本地视频"><a href="#播放本地视频" class="headerlink" title="播放本地视频"></a>播放本地视频</h3><p>跟打开摄像头一样，如果把摄像头的编号换成本地视频的路径就可以播放了。回想一下<code>cv2.waitKey()</code>，它的参数表示暂停时间，所以这个值越大，视频播放速度越慢，反之，播放速度越快，通常设置为25或30。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line"><span class="comment"># 播放本地视频</span></div><div class="line">capture = cv2.VideoCapture(<span class="string">'demo_video.mp4'</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span>(capture.isOpened()):</div><div class="line">    ret, frame = capture.read()</div><div class="line">    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</div><div class="line"></div><div class="line">    cv2.imshow(<span class="string">'frame'</span>, gray)</div><div class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">30</span>) == ord(<span class="string">'q'</span>):</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<h3 id="录制视频"><a href="#录制视频" class="headerlink" title="录制视频"></a>录制视频</h3><p>之前我们保存图片用的是<code>cv2.imwrite()</code>，要保存视频，我们需要创建一个<code>VideoWriter</code>对象，可以给它传入四个参数：</p>
<ul>
<li>输出的文件名，如’output.avi’</li>
<li>编码方式<a href="https://baike.baidu.com/item/fourcc/6168470?fr=aladdin" target="_blank" rel="external">FourCC</a>码</li>
<li>帧率<a href="https://baike.baidu.com/item/FPS/3227416" target="_blank" rel="external">FPS</a></li>
<li>要保存的分辨率大小</li>
</ul>
<p>FourCC是用来指定视频编码方式的四字节码，所有的编码可参考<a href="http://www.fourcc.org/codecs.php" target="_blank" rel="external">Video Codecs</a>。如MJPG编码可以这样写：<code>cv2.VideoWriter_fourcc(*&#39;MJPG&#39;)</code>或<code>cv2.VideoWriter_fourcc(&#39;M&#39;,&#39;J&#39;,&#39;P&#39;,&#39;G&#39;)</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 定义编码方式并创建VideoWriter对象</span></div><div class="line">fourcc = cv2.VideoWriter_fourcc(*<span class="string">'MJPG'</span>)</div><div class="line">outfile = cv2.VideoWriter(<span class="string">'output.avi'</span>, fourcc, <span class="number">25.</span>, (<span class="number">640</span>, <span class="number">480</span>))</div><div class="line"></div><div class="line"><span class="keyword">while</span>(capture.isOpened()):</div><div class="line">    ret, frame = capture.read()</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ret:</div><div class="line">        <span class="comment"># 写入文件</span></div><div class="line">        outfile.write(frame)</div><div class="line"></div><div class="line">        cv2.imshow(<span class="string">'frame'</span>, frame)</div><div class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == ord(<span class="string">'q'</span>):</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>使用cv2.VideoCapture()创建视频对象，然后在循环中一帧帧显示图像。参数传入数字时，代表打开摄像头，传入本地视频地址时，代表播放本地视频。</p>
<p>cap.get(propId)获取视频属性，cap.set(propId,value)设置视频属性。</p>
<p>cv2.VideoWriter()创建视频写入对象，用来录制/保存视频，四位FOURCC码表示视频编码方式。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/3.%20%E6%89%93%E5%BC%80%E6%91%84%E5%83%8F%E5%A4%B4" target="_blank" rel="external">本节源码</a></p>
<p><a href="http://www.fourcc.org/codecs.php" target="_blank" rel="external">Video Codecs by FOURCC</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_video_display/py_video_display.html" target="_blank" rel="external">Getting Started with Videos</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习打开摄像头捕获照片、播放本地视频、录制视频等。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程番外篇1：Matplotlib显示图像</title>
    <link href="https://ex2tron.github.io/2017/12/06/Python-OpenCV%E6%95%99%E7%A8%8B%E7%95%AA%E5%A4%96%E7%AF%871%EF%BC%9AMatplotlib%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/"/>
    <id>https://ex2tron.github.io/2017/12/06/Python-OpenCV教程番外篇1：Matplotlib显示图像/</id>
    <published>2017-12-06T07:55:15.000Z</published>
    <updated>2017-12-09T03:21:24.909Z</updated>
    
    <content type="html"><![CDATA[<p>学习如何使用Matplotlib显示OpenCV图像。<a id="more"></a></p>
<p>Matplotlib是Python的一个非常重要的绘图库，更多内容可以去<a href="www.matplotlib.org/">官网</a>学习。</p>
<h2 id="显示灰度图"><a href="#显示灰度图" class="headerlink" title="显示灰度图"></a>显示灰度图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">img = cv2.imread(<span class="string">'lena.jpg'</span>, <span class="number">0</span>)</div><div class="line"><span class="comment"># 灰度图显示，cmap(color map)设置为gray</span></div><div class="line">plt.imshow(img, cmap=<span class="string">'gray'</span>)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_matplotlib_show_gray_image.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="显示彩色图"><a href="#显示彩色图" class="headerlink" title="显示彩色图"></a>显示彩色图</h2><p><strong>OpenCV中的图像是以BGR的通道顺序存储的</strong>，但Matplotlib是以RGB模式显示的，所以直接在Matplotlib中显示OpenCV图像会出现问题，因此需要转换一下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line">img = cv2.imread(<span class="string">'lena.jpg'</span>)</div><div class="line">img2 = img[:, :, ::<span class="number">-1</span>]</div><div class="line"><span class="comment"># 或使用</span></div><div class="line"><span class="comment"># img2 = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span></div><div class="line"></div><div class="line"><span class="comment"># 显示不正确的图</span></div><div class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img) </div><div class="line"><span class="comment"># 显示正确的图</span></div><div class="line">plt.subplot(<span class="number">122</span>)</div><div class="line">plt.xticks([]), plt.yticks([]) <span class="comment"># 隐藏x和y轴</span></div><div class="line">plt.imshow(img2)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<blockquote>
<p>注解：img[:,:,0]代表拷贝图片的蓝色通道，熟悉Python的同学应该知道，对一个字符串s进行翻转用的是s[::-1]，同样img[:,:,::-1]就表示BGR通道翻转，变成RGB。</p>
</blockquote>
<p>结果如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_matplotlib_show_color_image.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/blob/master/Python%2BOpenCV/2.%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87/cv2_using_matplotlib_show_image.py" target="_blank" rel="external">本节源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习如何使用Matplotlib显示OpenCV图像。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="Matplotlib" scheme="https://ex2tron.github.io/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程2：基本元素——图片</title>
    <link href="https://ex2tron.github.io/2017/12/06/Python-OpenCV%E6%95%99%E7%A8%8B2%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0%E2%80%94%E2%80%94%E5%9B%BE%E7%89%87/"/>
    <id>https://ex2tron.github.io/2017/12/06/Python-OpenCV教程2：基本元素——图片/</id>
    <published>2017-12-06T07:52:06.000Z</published>
    <updated>2017-12-07T06:43:17.880Z</updated>
    
    <content type="html"><![CDATA[<p>学习如何加载图片，显示并保存图片。<a id="more"></a>图片等可到<a href="#引用">源码处</a>下载。</p>
<hr>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>加载图片，显示图片，保存图片</li>
<li>OpenCV函数：cv2.imread(), cv2.imshow(), cv2.imwrite()</li>
</ul>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3><p>使用<code>cv2.imread()</code>来读入一张图片：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> cv2</div><div class="line"></div><div class="line"><span class="comment"># 灰度图加载</span></div><div class="line">img = cv2.imread(<span class="string">'lena.jpg'</span>, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<ul>
<li><p>参数1是图片的文件名：</p>
<ul>
<li>如果图片放在当前文件夹下，直接写文件名就行了，如’lena.jpg’</li>
<li>否则，需要给出绝对路径，如’D:\OpenCVSamples\lena.jpg’</li>
</ul>
</li>
<li><p>参数2是图片的读入方式，省略即采用默认值：</p>
<ul>
<li>cv2.IMREAD_COLOR：忽略透明通道的彩色图，默认值(1)</li>
<li>cv2.IMREAD_GRAYSCALE：灰度图加载(0)</li>
<li>cv2.IMREAD_UNCHANGED：包含透明通道的彩色图(-1)</li>
</ul>
</li>
</ul>
<blockquote>
<p>经验之谈：图片如果没有加载成功的话是不会报错的，而是img=None，后面处理才会报错，算是个小坑。</p>
</blockquote>
<h3 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h3><p>使用<code>cv2.imshow()</code>显示图片，窗口会自适应图片的大小：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cv2.imshow(<span class="string">'lena'</span>, img)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>结果应该如下：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_show_lena_gray.jpg" alt="lena灰度图显示" title="">
                </div>
                <div class="image-caption">lena灰度图显示</div>
            </figure>
<ul>
<li>参数1是窗口的名字，参数2是要显示的图片。</li>
</ul>
<p><code>cv2.waitKey()</code>是让程序暂停等待按键的函数。参数是等待时间（单位：毫秒ms），时间一到，会继续执行接下来的程序，传入0的话代表一直等待。按键可通过<code>k = cv2.waitKey(0)</code>获取（<a href="#练习">练习1</a>）。</p>
<p>我们也可以先用<code>cv2.namedWindow()</code>创建一个窗口，之后再显示图片。参数1依旧是窗口的名字，参数2默认是<code>cv2.WINDOW_AUTOSIZE</code>，代表窗口大小自适应图片，也可以设置为<code>cv2.WINDOW_NORMAL</code>，来调整窗口大小：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 先定义窗口，后显示图片</span></div><div class="line">cv2.namedWindow(<span class="string">'lena2'</span>, cv2.WINDOW_NORMAL)</div><div class="line">cv2.imshow(<span class="string">'lena2'</span>, img)</div><div class="line">cv2.waitKey(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h3 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h3><p>使用<code>cv2.imwrite()</code>保存图片：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cv2.imwrite(<span class="string">'lena_gray.jpg'</span>, img)</div></pre></td></tr></table></figure>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>cv2.imread()读入图片、cv2.imshow()显示图片、cv2.imwrite()保存图片</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol>
<li><p>打开lena.jpg并显示，显示时如果按下’s’，就保存图片为’lena_save.bmp’，否则就结束程序。</p>
</li>
<li><p>Matplotlib是Python中很重要的绘图库，请学习这篇内容：<a href="http://ex2tron.top/2017/12/06/Python-OpenCV教程番外篇1：Matplotlib显示图像/" target="_blank" rel="external">Matplotlib显示图像</a> </p>
</li>
</ol>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="https://github.com/ex2tron/BlogCode/tree/master/Python%2BOpenCV/2.%20%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0%E2%80%94%E2%80%94%E5%9B%BE%E7%89%87" target="_blank" rel="external">本节源码</a></p>
<p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_gui/py_image_display/py_image_display.html" target="_blank" rel="external">Getting Started with Images</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习如何加载图片，显示并保存图片。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python+OpenCV教程1：简介</title>
    <link href="https://ex2tron.github.io/2017/12/06/Python-OpenCV%E6%95%99%E7%A8%8B1%EF%BC%9A%E7%AE%80%E4%BB%8B/"/>
    <id>https://ex2tron.github.io/2017/12/06/Python-OpenCV教程1：简介/</id>
    <published>2017-12-06T07:50:59.000Z</published>
    <updated>2017-12-07T07:17:45.466Z</updated>
    
    <content type="html"><![CDATA[<p>Python+OpenCV搞图像处理与C/C++一样快！<a id="more"></a></p>
<p>首先本教程绝对浅显易懂，非常easy的辣，大家尽可放心食用！其次，我相信<strong>大多数人的疑问在<a href="https://baike.baidu.com/item/Python/" target="_blank" rel="external">Python</a>调用<a href="https://baike.baidu.com/item/opencv" target="_blank" rel="external">OpenCV</a>进行图像处理的性能上面</strong>，所以这里我们主要说下这个。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cv2_python_opencv_poster.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<p>其实，你英文Ok的话，推荐你看<a href="#引用">官方教程</a>。我写的大部分也是照搬，但官方是按照OpenCV中的组件顺序讲的，大部分功能并不常用，所以我按照使用度和难易程度重写了一遍。</p>
<hr>
<h2 id="Python照样快"><a href="#Python照样快" class="headerlink" title="Python照样快"></a>Python照样快</h2><p>众所周知，虽然Python语法简洁，编写高效，但相比C/C++慢很多。然而Python还有个重要的特性：它是一个胶水语言！Python可以很容易地扩展C/C++。</p>
<p>OpenCV-Python就是用Python包装了C++的实现，背后实际就是C++的代码在跑，所以，代码的运行速度跟原生C/C++速度一样快，而且更加容易编写。</p>
<p>另外，OpenCV-Python原生支持<a href="https://baike.baidu.com/item/numpy" target="_blank" rel="external">numpy</a>，为矩阵操作、科学计算提供了极大的便利性。所以，<strong>扔掉你的C/C++，开始OpenCV-Python吧！！！</strong></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>本教程使用的软件版本是：OpenCV 3.x，Python 3.x。</p>
<p>如果你还没安装Python，我强烈推荐你安装<a href="https://www.anaconda.com/download/" target="_blank" rel="external">Anaconda</a>，它包含了大量的科学计算包，后期不用我们一个个安装。即使你已经装了Python也没有影响，Anaconda中自带Python，互不干扰。</p>
<p>Anaconda装好之后，打开cmd，输入：<code>pip install opencv-python</code>，等待安装完成即可。</p>
<ol>
<li><p>如果识别不了<code>pip</code>，说明没有将pip的目录添加到环境变量。找到pip的安装目录，添加到用户变量（或系统变量）的path中。</p>
</li>
<li><p>如果下载速度很慢，可以<a href="https://pypi.python.org/pypi?%3Aaction=search&amp;term=opencv-python&amp;submit=search" target="_blank" rel="external">点击此处</a>下载离线版。下载完成后，cmd切换到下载的目录，输入<code>pip install 文件名</code>安装。</p>
</li>
</ol>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html" target="_blank" rel="external">OpenCV-Python Tutorials</a></p>
<p><a href="https://docs.scipy.org/doc/numpy-dev/user/quickstart.html" target="_blank" rel="external">Numpy Quickstart Tutorial</a></p>
<p><a href="https://docs.opencv.org/" target="_blank" rel="external">OpenCV Docs</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python+OpenCV搞图像处理与C/C++一样快！
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://ex2tron.github.io/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【片单】漫威宇宙电影合集</title>
    <link href="https://ex2tron.github.io/2017/12/05/%E3%80%90%E7%89%87%E5%8D%95%E3%80%91%E6%BC%AB%E5%A8%81%E5%AE%87%E5%AE%99%E7%94%B5%E5%BD%B1%E5%90%88%E9%9B%86/"/>
    <id>https://ex2tron.github.io/2017/12/05/【片单】漫威宇宙电影合集/</id>
    <published>2017-12-05T14:44:35.000Z</published>
    <updated>2017-12-05T14:48:43.314Z</updated>
    
    <content type="html"><![CDATA[<p>十年，17部电影，超过130亿美元的总票房，漫威宇宙电影合集下载！！！<a id="more"></a></p>
<blockquote>
<p><em>Excelsior!</em>  ——<a href="https://baike.baidu.com/item/%E6%96%AF%E5%9D%A6%C2%B7%E6%9D%8E?fromtitle=%E6%96%AF%E5%9D%A6%E6%9D%8E" target="_blank" rel="external">斯坦·李</a></p>
</blockquote>
<p>漫威电影宇宙MCU的成绩有目共睹，在十周年《复仇者联盟3》上映之前，来补一波漫威宇宙的电影吧（点击片名即可下载）！</p>
<p>MCU观影指南：</p>
<ul>
<li><p>第一阶段：</p>
<ul>
<li><p>2008<a href="ed2k://|file|Iron.Man.%E9%92%A2%E9%93%81%E4%BE%A0.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.HR-HDTV.AC3.1024X576.X264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86%E5%88%B6%E4%BD%9C.mkv|2361675752|A57750EDD6B523F23E23DF9D123FA998|h=3PEOFILFEMS624ZBPUHMPBMDQEQ6FR4L|/" target="_blank" rel="external">《钢铁侠1》</a>、</p>
</li>
<li><p>2008<a href="ed2k://|file|The.Incredible.Hulk.2008.无敌浩克.HR-HDTV.AC3.1024X576.x264-人人影视制作.mkv|2057353900|d922864d91ddc2d951e0b7a0e8ce92d5|h=sjk76hnh4i7jcr4iawdgxgt5qrplkgwq|/" target="_blank" rel="external">《无敌浩克》</a></p>
</li>
<li><p>2010<a href="ed2k://|file|Iron.Man.2.2010.钢铁侠2.双语字幕.HR-HDTV.AC3.1024X576.X264-人人影视制作-V2.mkv|2399217093|B2EDD162F3F87A44BB3F22B6A56139C9|h=S567W4RKR7DEDYM4RWPUDUGZ3WODMNEO|/" target="_blank" rel="external">《钢铁侠2》</a></p>
</li>
<li><p>2011<a href="ed2k://|file|Thor.2011.雷神.双语字幕.HR-HDTV.AC3.1024X576.x264-人人影视制作.mkv|1880859452|66fd462065e75f7212c395830604353b|h=knfugovs45x6lb3r3u6ynsvzunih3htf|/" target="_blank" rel="external">《雷神1》</a></p>
</li>
<li><p>2011<a href="ed2k://|file|Captain.America.The.First.Avenger.2011.美国队长.双语字幕.HR-HDTV.AC3.国英双轨.1024x576.x264-人人影视制作V2.mkv|2390474328|597f0eda174822459c9148b98c89254a|h=poz6edd26vnwxsckctja2wcmze6ik3wv|/" target="_blank" rel="external">《美国队长1：复仇者先锋》</a></p>
</li>
<li><p>2012<a href="ed2k://|file|The.Avengers.2012.%E5%A4%8D%E4%BB%87%E8%80%85%E8%81%94%E7%9B%9F.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.HR-HDTV.AC3.1024X576.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86%E5%88%B6%E4%BD%9C.mkv|2342023084|e7aaff83360f02590456ae9a9bbbd62c|h=tgi7w7tygvfi2mw7l3yc3cxrhvxkl7re|/" target="_blank" rel="external">《复仇者联盟1》</a></p>
</li>
</ul>
</li>
<li><p>第二阶段：</p>
<ul>
<li><p>2013<a href="ed2k://|file|Iron.Man.3.2013.%E9%92%A2%E9%93%81%E4%BE%A03.%E5%9B%BD%E8%8B%B1%E9%9F%B3%E8%BD%A8.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.HR-HDTV.AC3.1024X576.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86%E5%88%B6%E4%BD%9C.mkv|2516386988|a32e610de8f7204e3ef1648992d2e931|h=6kn524mepattpprjcj5pial632dvcusq|/" target="_blank" rel="external">《钢铁侠3》</a></p>
</li>
<li><p>2013<a href="ed2k://|file|Thor.The.Dark.World.2013.%E9%9B%B7%E7%A5%9E2.%E9%BB%91%E6%9A%97%E4%B8%96%E7%95%8C.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.HR-HDTV.AC3.1024X576.x264.V3.mkv|1836942899|ee1b92de5932b3e256f2806fa181a3a8|h=fnv6kfu6o22x5gcthfwcmgqkhb5c2oiv|/" target="_blank" rel="external">《雷神2：黑暗世界》</a></p>
</li>
<li><p>2014<a href="ed2k://|file|Captain.America.The.Winter.Soldier.2014.%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF2.%E5%AF%92%E5%86%AC%E6%88%98%E5%A3%AB.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.%E5%9B%BD%E8%8B%B1%E9%9F%B3%E8%BD%A8.HR-HDTV.AC3.1024X576.x264.mkv|2423689222|aab58a8e1597f8f2eb458bbf6a5fabee|h=dvu33u5xxr23yrz7iueicgw7v3tt7l45|/" target="_blank" rel="external">《美国队长2：冬日战士》</a></p>
</li>
<li><p>2014<a href="ed2k://|file|Guardians.of.the.Galaxy.2014.%E9%93%B6%E6%B2%B3%E6%8A%A4%E5%8D%AB%E9%98%9F.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.%E5%9B%BD%E8%8B%B1%E9%9F%B3%E8%BD%A8.HR-HDTV.AC3.1024X576.x264.mkv|2329356557|c1ad7fca434823a2fcc338f04a93454d|h=4fpq6vlgvevlw7ynubbq24qwlgdcd5db|/" target="_blank" rel="external">《银河护卫队1》</a></p>
</li>
<li><p>2015<a href="ed2k://|file|%E5%A4%8D%E4%BB%87%E8%80%85%E8%81%94%E7%9B%9F2.%E5%A5%A5%E5%88%9B%E7%BA%AA%E5%85%83.Avengers.Age.of.Ultron.2015.%E4%B8%AD%E8%8B%B1%E5%AD%97%E5%B9%95.720p.BluRay.x264.%E6%B7%B1%E5%BD%B1%E5%AD%97%E5%B9%95%E7%BB%84V2.mkv|2880214307|40624438C45C22FD97DCAA729D20CEE7|h=P2KBJUF4NMPP4SAKFZ3BEQ36XIKCLWS2|/" target="_blank" rel="external">《复仇者联盟2：奥创纪元》</a></p>
</li>
<li><p>2015<a href="ed2k://|file|%E8%9A%81%E4%BA%BA.%E5%9B%BD%E8%8B%B1%E5%8F%8C%E8%AF%AD.Ant.Man.2015.%E4%B8%AD%E8%8B%B1%E5%AD%97%E5%B9%95.720p.BluRay.x264%E6%B7%B1%E5%BD%B1%E5%AD%97%E5%B9%95%E7%BB%84%E5%8E%9F%E5%88%9B%E7%BF%BB%E8%AF%91.mkv|3270488398|23049A0021390D3C8DE2EB01475E894D|h=O5QUE3SUOMOJQJHOHMECRZQXWYSSLHY7|/" target="_blank" rel="external">《蚁人》</a></p>
</li>
</ul>
</li>
<li><p>第三阶段：</p>
<ul>
<li><p>2016<a href="ed2k://|file|Captain.America.Civil.War.2016.%E7%BE%8E%E5%9B%BD%E9%98%9F%E9%95%BF3.%E5%86%85%E6%88%98.720p.Chi_Eng.ZMZ-BD-MP4.mp4|2211413028|21396487c8b522d35aa41e730de259f1|h=mxuhofnlvyag73wjmpnuslvydr25ekb4|/" target="_blank" rel="external">《美国队长3：内战》</a></p>
</li>
<li><p>2016<a href="ed2k://|file|Doctor.Strange.2016.%E5%A5%87%E5%BC%82%E5%8D%9A%E5%A3%AB.720p.Chi_Eng.ZMZ-BD-MP4-V2.mp4|1720039183|f459977e521c1195072e325ff265729b|h=ejbqsrl2qh4o2vx4z4ukaj3h27eg74nk|/" target="_blank" rel="external">《奇异博士》</a></p>
</li>
<li><p>2017<a href="ed2k://|file|Guardians.of.the.Galaxy.Vol.2.2017.%E9%93%B6%E6%B2%B3%E6%8A%A4%E5%8D%AB%E9%98%9F2.720p.Chi_Eng.BD-MP4-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86.mp4|2031475653|594ceb90d556b5f05cef10791f396651|h=z4ujw3gtdapunozxu52a4xn6eqjun3pd|/" target="_blank" rel="external">《银河护卫队2》</a></p>
</li>
<li><p>2017<a href="ed2k://|file|%E8%9C%98%E8%9B%9B%E4%BE%A0.%E8%8B%B1%E9%9B%84%E5%BD%92%E6%9D%A5%E4%B8%AD%E8%8B%B1%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.Spider-Man.Homecoming.2017.1080p.BluRay.x264.chs.eng-EX8.mp4|2637604541|C51B6D12CB5AC288F65639027075E7C3|h=UDYIQXIDKMCOMOAU4A6OFPNVNMZEO4QF|/" target="_blank" rel="external">《蜘蛛侠：英雄归来》</a></p>
</li>
<li><p>2017《雷神3：诸神黄昏》(上映中)</p>
</li>
<li><p>2018《复仇者联盟3：无限战争》(即将上映)</p>
</li>
</ul>
</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://img5.mtime.cn/pi/2017/07/26/151208.45265741_1000X1000.jpg" alt="无限战争！！！" title="">
                </div>
                <div class="image-caption">无限战争！！！</div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;十年，17部电影，超过130亿美元的总票房，漫威宇宙电影合集下载！！！
    
    </summary>
    
    
      <category term="Lens" scheme="https://ex2tron.github.io/tags/Lens/"/>
    
      <category term="片单" scheme="https://ex2tron.github.io/tags/%E7%89%87%E5%8D%95/"/>
    
      <category term="漫威" scheme="https://ex2tron.github.io/tags/%E6%BC%AB%E5%A8%81/"/>
    
      <category term="Marvel" scheme="https://ex2tron.github.io/tags/Marvel/"/>
    
      <category term="复仇者联盟" scheme="https://ex2tron.github.io/tags/%E5%A4%8D%E4%BB%87%E8%80%85%E8%81%94%E7%9B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Brand7 2.0更名&quot;品牌漆&quot;正式上架咯！</title>
    <link href="https://ex2tron.github.io/2017/11/26/Brand7-2-0%E6%9B%B4%E5%90%8D%E5%93%81%E7%89%8C%E6%BC%86%E6%AD%A3%E5%BC%8F%E4%B8%8A%E6%9E%B6%E5%92%AF%EF%BC%81/"/>
    <id>https://ex2tron.github.io/2017/11/26/Brand7-2-0更名品牌漆正式上架咯！/</id>
    <published>2017-11-26T11:04:32.000Z</published>
    <updated>2017-11-26T11:07:47.956Z</updated>
    
    <content type="html"><![CDATA[<p>隔了一年更新，良心都有点痛了( ╯□╰ )<a id="more"></a></p>
<blockquote>
<p><em>示威的人做的不对的话，引起示威的人呢？</em>  ——<a href="https://movie.douban.com/subject/21937445/" target="_blank" rel="external">《辩护人》</a></p>
</blockquote>
<p>当初Brand7写完的时候，一直想写一个关于电影的APP，甚至做出了雏形：MovieBackdrops，可惜，时间不多，事情却很多。前段时间闭关，摸着自己的良心，终于把Brand7更新了一把，来看看更新内容吧：</p>
<p><strong><a href="https://www.microsoft.com/store/productId/9NBLGGH546QC" target="_blank" rel="external">品牌漆</a>（Brand7）是一款Win10 UWP猜品牌的小游戏，里面涵盖了汽车、娱乐、时尚、生活、餐饮、科技、旅游七个类别的550个品牌。Ver2.0.1更新日志如下：</strong></p>
<ol>
<li><p>更名“品牌漆”</p>
</li>
<li><p>全新Logo</p>
</li>
<li><p>全新启动界面</p>
</li>
<li><p>新增50个品牌，现共550个品牌</p>
</li>
<li><p>全面中文版（英文被很多人吐槽看不懂( ╯□╰ )）</p>
</li>
<li><p>界面UI调整</p>
</li>
</ol>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/brand7_v2_comparation.jpg" alt="新旧版对比：中文版" title="">
                </div>
                <div class="image-caption">新旧版对比：中文版</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/brand7_v2_ui.jpg" alt="完成界面" title="">
                </div>
                <div class="image-caption">完成界面</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/brand7_v2_startui.jpg" alt="新的启动界面" title="">
                </div>
                <div class="image-caption">新的启动界面</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/brand7_v2_share.jpg" alt="分享界面" title="">
                </div>
                <div class="image-caption">分享界面</div>
            </figure>
<p>可以在Win10应用商店中搜索“品牌漆”进行下载，或<a href="https://www.microsoft.com/store/productId/9NBLGGH546QC" target="_blank" rel="external">点击此处</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;隔了一年更新，良心都有点痛了( ╯□╰ )
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Brand7" scheme="https://ex2tron.github.io/tags/Brand7/"/>
    
      <category term="品牌漆" scheme="https://ex2tron.github.io/tags/%E5%93%81%E7%89%8C%E6%BC%86/"/>
    
  </entry>
  
  <entry>
    <title>软件+影视汁源贴(updating...)</title>
    <link href="https://ex2tron.github.io/2017/11/15/%E8%BD%AF%E4%BB%B6-%E5%BD%B1%E8%A7%86%E6%B1%81%E6%BA%90%E8%B4%B4-updating/"/>
    <id>https://ex2tron.github.io/2017/11/15/软件-影视汁源贴-updating/</id>
    <published>2017-11-15T11:53:46.000Z</published>
    <updated>2017-12-05T14:52:17.458Z</updated>
    
    <content type="html"><![CDATA[<p>经常有人跟我要一些软件和电影的资源，毕竟我是老司机( ╯□╰ )特此整理，有时间会不断更新。<a id="more"></a></p>
<blockquote>
<p><em>I’ve always believed with hard work and a little bit of luck, it’s only a matter of time before I’m discovered!</em>  ——<a href="https://movie.douban.com/subject/1793491/" target="_blank" rel="external">《Ratatouille》</a><br><br><em>我总是相信勤奋与努力外加一点点幸运就能换来成功，我的天分被发现只是时间的问题。</em>——<a href="https://movie.douban.com/subject/1793491/" target="_blank" rel="external">《料理鼠王》</a></p>
</blockquote>
<hr>
<h2 id="软件汁源"><a href="#软件汁源" class="headerlink" title="软件汁源"></a><strong>软件汁源</strong></h2><p>首先列出一些常用网站，后面我只列出常用的软件和官网，<strong>请大家优先选择官网进行下载</strong>，因为官网版本一般都是最新的，也比较安全。官网进不去，可以<strong>点击</strong>我给出的版本下载：</p>
<h3 id="常用资源站"><a href="#常用资源站" class="headerlink" title="常用资源站"></a>常用资源站</h3><ul>
<li><p><a href="https://www.ithome.com/bibei/" target="_blank" rel="external">Windows装机必备</a>、<a href="http://mirrors.163.com/" target="_blank" rel="external">网易开源镜像站</a></p>
</li>
<li><p><a href="https://xbeta.info/" target="_blank" rel="external">善用佳软</a>、<a href="https://www.portablesoft.org/" target="_blank" rel="external">精品绿色便携软件</a></p>
</li>
<li><p><a href="http://www.anxz.com/" target="_blank" rel="external">俺下载</a>、<a href="http://www.verycd.gdajie.com/" target="_blank" rel="external">逛电驴</a>、<a href="http://www.ed2000.com/" target="_blank" rel="external">ED2000资源共享</a></p>
</li>
</ul>
<h3 id="微软官方系统"><a href="#微软官方系统" class="headerlink" title="微软官方系统"></a>微软官方系统</h3><ul>
<li><p>Windows 10创意者更新秋季版：<a href="ed2k://|file|cn_windows_10_multi-edition_version_1709_updated_sept_2017_x64_dvd_100090804.iso|4740610048|37051C54894776826823DAEBDD03F1DC|/" target="_blank" rel="external">64位(4.42 GB)</a>、<a href="ed2k://|file|cn_windows_10_multi-edition_version_1709_updated_sept_2017_x86_dvd_100090805.iso|3551899648|6C24A796B66CDA6D909508A16C74B406|/" target="_blank" rel="external">32位(3.31 GB)</a></p>
</li>
<li><p>Windows 7 With SP1 简体中文旗舰版：<a href="ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/" target="_blank" rel="external">64位(3.19 GB)</a>、<a href="ed2k://|file|cn_windows_7_ultimate_with_sp1_x86_dvd_u_677486.iso|2653276160|7503E4B9B8738DFCB95872445C72AEFB|/" target="_blank" rel="external">32位(2.47 GB)</a></p>
</li>
<li><p>激活工具：<a href="https://pan.baidu.com/s/1i45IaSt" target="_blank" rel="external">优先OEM10，密码：c6wz</a></p>
</li>
</ul>
<h3 id="Office办公套件"><a href="#Office办公套件" class="headerlink" title="Office办公套件"></a>Office办公套件</h3><ul>
<li><p>Office Pro Plus 2016批量授权版：<a href="ed2k://|file|SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20-42426.ISO|1123452928|31087A00FF67D4F5B4CBF4AA07C3433B|/" target="_blank" rel="external">64位</a>、<a href="ed2k://|file|SW_DVD5_Office_Professional_Plus_2016_W32_ChnSimp_MLF_X20-41351.ISO|986441728|2DE74581C10096137481873B3AD57D43|/" target="_blank" rel="external">32位</a></p>
</li>
<li><p>Visio Pro 2016 批量授权版：<a href="ed2k://|file|SW_DVD5_Visio_Pro_2016_64Bit_ChnSimp_MLF_X20-42759.ISO|714913792|FC930AB97B366B3595FC2F28ABAC2A6F|/" target="_blank" rel="external">64位</a>、<a href="ed2k://|file|SW_DVD5_Visio_Pro_2016_W32_ChnSimp_MLF_X20-41580.ISO|609447936|91EB248558F236AA66D234EA03FAD9A9|/" target="_blank" rel="external">32位</a></p>
</li>
<li><p><a href="ed2k://|file|cn_office_professional_plus_2016_x86_x64_dvd_6969182.iso|2588266496|27EEA4FE4BB13CD0ECCDFC24167F9E01|/" target="_blank" rel="external">Office Pro Plus 2016 即点即用版</a></p>
</li>
<li><p><a href="ed2k://|file|cn_visio_professional_2016_x86_x64_dvd_6970929.iso|2588262400|52A997F3AF4E40B896C8E4677CF10E90|/" target="_blank" rel="external">Visio Pro 2016 即点即用版</a></p>
</li>
<li><p>激活工具：<a href="https://pan.baidu.com/s/1i45IaSt" target="_blank" rel="external">优先OEM10，密码：c6wz</a></p>
</li>
</ul>
<h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><ul>
<li><p><a href="https://download.visualstudio.microsoft.com/download/pr/100266676/045b56eb413191d03850ecc425172a7d/vs_Community.exe" target="_blank" rel="external">Visual Studio 2017 Community 15.4</a>：<a href="https://www.visualstudio.com/" target="_blank" rel="external">官网</a></p>
</li>
<li><p>Android Studio：<a href="https://dl.google.com/dl/android/studio/install/3.0.0.18/android-studio-ide-171.4408382-windows.exe" target="_blank" rel="external">3.0</a>、<a href="https://dl.google.com/dl/android/studio/install/2.3.3.0/android-studio-bundle-162.4069837-windows.exe" target="_blank" rel="external">2.3.3</a></p>
</li>
<li><p><a href="http://download.qt.io/archive/qt/5.8/5.8.0/qt-opensource-windows-x86-mingw530-5.8.0.exe" target="_blank" rel="external">Qt 5.8.0 mingw</a>：<a href="http://download.qt.io/archive/qt/" target="_blank" rel="external">官网</a></p>
</li>
<li><p>Matlab：<a href="ed2k://|file|[矩阵实验室].R2017a_win64_dvd1.iso|7829774336|b0ed2efeac2af78ce1f797152d8b430a|h=xbq3qn6r6uztxdawcdzgimpzqmcxy3nh|/" target="_blank" rel="external">R2017a x64 dvd1</a>、<a href="ed2k://|file|[矩阵实验室].R2017a_win64_dvd2.iso|2707779584|ce396df6ebc36a94118a736338d7e05e|h=34xjg5hg77ldbsgf6j64evexssys2hm3|/" target="_blank" rel="external">R2017a x64 dvd2</a>、<a href="ed2k://|file|[矩阵实验室].Crack.rar|957381|725c8700b78027809055ecb5e6986b59|h=rf5lftd7ffdm4dhk3qn5m5ke2zxugztk|/" target="_blank" rel="external">破解工具</a></p>
</li>
<li><p>Python相关：</p>
<ul>
<li><a href="https://www.python.org/" target="_blank" rel="external">官网</a>、Python相关包（如tensorflow）：<a href="https://pypi.python.org/pypi" target="_blank" rel="external">源1</a>、<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">源2</a></li>
<li>Anaconda：<a href="https://www.anaconda.com/download/" target="_blank" rel="external">官网</a>、<a href="https://repo.continuum.io/archive/Anaconda3-5.0.1-Windows-x86_64.exe" target="_blank" rel="external">5.0.1 Python 3.6 x86_x64</a>、<a href="https://repo.continuum.io/archive/Anaconda3-5.0.1-Windows-x86.exe" target="_blank" rel="external">5.0.1 Python 3.6 x86</a></li>
</ul>
</li>
<li><p>MySQL：<a href="https://www.mysql.com/" target="_blank" rel="external">官网</a>、<a href="https://cdn.mysql.com//Downloads/MySQLInstaller/mysql-installer-community-5.7.20.0.msi" target="_blank" rel="external">MySQL Installer 5.7.20</a></p>
<ul>
<li>WampServer：<a href="http://www.wampserver.com/en/" target="_blank" rel="external">官网</a>、<a href="https://jaist.dl.sourceforge.net/project/wampserver/WampServer%203/WampServer%203.0.0/wampserver3.1.0_x64.exe" target="_blank" rel="external">3.1.0 x64</a>、<a href="https://jaist.dl.sourceforge.net/project/wampserver/WampServer%203/WampServer%203.0.0/wampserver3.1.0_x86.exe" target="_blank" rel="external">3.1.0 x86</a></li>
</ul>
</li>
<li><p>开发组件：</p>
<ul>
<li><p>串口抓包工具AccessPort：<a href="http://www.sudt.com/cn/ap/download.htm" target="_blank" rel="external">官网</a>、<a href="http://www.sudt.com/download/AccessPort137.zip" target="_blank" rel="external">1.37</a></p>
</li>
<li><p>protobuf：<a href="https://github.com/google/protobuf/releases" target="_blank" rel="external">官网(需翻墙)</a>  ffmpeg：<a href="http://ffmpeg.org/download.html" target="_blank" rel="external">官网</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h3><ul>
<li>Adobe CC 2017：<a href="http://pan.baidu.com/s/1eRNym9W" target="_blank" rel="external">精简版 密码：f7yt</a></li>
</ul>
<h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><p>我平常整理的一些各类有用的工具：<a href="https://pan.baidu.com/s/1pLwsEUZ" target="_blank" rel="external">密码：806j</a></p>
<h2 id="影视汁源"><a href="#影视汁源" class="headerlink" title="影视汁源"></a><strong>影视汁源</strong></h2><h3 id="资源站"><a href="#资源站" class="headerlink" title="资源站"></a>资源站</h3><ul>
<li><p><a href="http://6vhao.com/" target="_blank" rel="external">6v电影网</a></p>
</li>
<li><p><a href="http://www.zimuzu.tv/" target="_blank" rel="external">字幕组（原人人影视）</a></p>
</li>
<li><p><a href="http://www.ed2000.com/" target="_blank" rel="external">ED2000资源共享</a></p>
</li>
<li><p><a href="http://www.dytt8.net/" target="_blank" rel="external">电影天堂</a></p>
</li>
<li><p><a href="http://www.piaohua.com/" target="_blank" rel="external">飘花电影网</a></p>
</li>
</ul>
<h3 id="电影榜单"><a href="#电影榜单" class="headerlink" title="电影榜单"></a>电影榜单</h3><ul>
<li><p>IMDB电影排行榜：<a href="http://www.imdb.com/chart/top" target="_blank" rel="external">TOP250</a></p>
</li>
<li><p>豆瓣电影排行榜：<a href="https://movie.douban.com/top250" target="_blank" rel="external">TOP250</a></p>
</li>
<li><p>全球电影票房排行榜：<a href="https://www.douban.com/doulist/1641439/" target="_blank" rel="external">中文版</a>、<a href="http://www.boxofficemojo.com/alltime/world/" target="_blank" rel="external">英文版</a></p>
</li>
</ul>
<h3 id="电影合集"><a href="#电影合集" class="headerlink" title="电影合集"></a>电影合集</h3><ul>
<li><p><a href="https://ex2tron.github.io/2017/09/24/%E3%80%90%E7%89%87%E5%8D%95%E3%80%91%E8%AF%BA%E5%85%B0%E7%A5%9E%E4%BD%9C%E9%9B%86/">诺兰电影合集</a></p>
</li>
<li><p><a href="https://ex2tron.github.io/2017/12/05/%E3%80%90%E7%89%87%E5%8D%95%E3%80%91%E6%BC%AB%E5%A8%81%E5%AE%87%E5%AE%99%E7%94%B5%E5%BD%B1%E5%90%88%E9%9B%86/">漫威电影合集</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常有人跟我要一些软件和电影的资源，毕竟我是老司机( ╯□╰ )特此整理，有时间会不断更新。
    
    </summary>
    
    
      <category term="Lens" scheme="https://ex2tron.github.io/tags/Lens/"/>
    
      <category term="软件" scheme="https://ex2tron.github.io/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="影视" scheme="https://ex2tron.github.io/tags/%E5%BD%B1%E8%A7%86/"/>
    
  </entry>
  
  <entry>
    <title>计量史：时间之旅</title>
    <link href="https://ex2tron.github.io/2017/11/08/%E8%AE%A1%E9%87%8F%E5%8F%B2%EF%BC%9A%E6%97%B6%E9%97%B4%E4%B9%8B%E6%97%85/"/>
    <id>https://ex2tron.github.io/2017/11/08/计量史：时间之旅/</id>
    <published>2017-11-08T13:35:51.000Z</published>
    <updated>2017-11-08T13:38:51.854Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章也是我一年前研一《计量史》课上的小论文，感觉不错，也放在博客上，哈哈。<a id="more"></a></p>
<blockquote>
<p><em>Whoever find a friend, find a treasure.</em>  ——<a href="https://movie.douban.com/subject/3036478/" target="_blank" rel="external">《Cars2》</a><br><br><em>一个朋友，一个宝。</em>——<a href="https://movie.douban.com/subject/3036478/" target="_blank" rel="external">《汽车总动员2》</a></p>
</blockquote>
<p>宇宙大爆炸的那一刻就注定了这个世界充满着平凡与不平凡，宇宙的变迁、星云的诞生，看似杂乱无章但又井然有序，一切都注入了时间的长河中。而随着一个奇迹：生命的诞生，人类意识、情感的快速升华，人类开始认识到了“时间”，并随着时间的流逝，逐渐认识这个世界。通过自然界的周期现象——日出日落，季节的轮换，潮汐的涨落，来有意识地进行活动。于是，当我们尝试去考量时间的时候，就促使了时间计量产生。作为《时间之谜》的阅读报告，我摘录了一部分原书材料来表述时间计量的科学演变，最后结合自己的经历和见识表达了自己对科学研究和时间计量意义的一些想法。</p>
<p>时间，从来就不是一个很好形容或定义的概念。每当我们想去探讨它时，总会陷入困境，就像有人让你解释你是怎么走路的一样。《时间之谜》 从实用和客观的角度探讨了时间计量的科学演变。通过人们尝试对时间进行测定的手段、时间的使用以及时间对于数学、物理学、天文学的影响等各种客观事实材料，来启发我们对于时间的思考。</p>
<hr>
<h2 id="I-“时间”的科学演变"><a href="#I-“时间”的科学演变" class="headerlink" title="I. “时间”的科学演变"></a>I. “时间”的科学演变</h2><p>如今，科学一词早已被大众所认知，并赋予崇高的含义。我想大多数人孩童时候的梦想就是成为一名科学家。而Science一词最早出现在19世纪，像牛顿当时被称为自然哲学家，而非科学家。可以看出，科学溯源于大自然规律的必然性。那么“时间”从哪儿来的呢？</p>
<p>远古人民往往利用自然界的周期现象——日出日落，季节轮换，甚至潮汐的涨落来进行着人类的日常生活。我小时候在家乡的时候，就是鸡鸣时刻起床，黄昏时刻结束农耕作业。不同于现在城市的生活，那时的我们并不会过分关注具体的“钟表时间”。这种主导人们规律作息生活的自然之力，无疑引起了远古人们对它的神秘、畏惧和崇拜之感。于是，人们内心的欲望和探索心理驱动着我们去开始去关心天文和自然。</p>
<p>然而时间不同于长度、质量或温度，<em>“我们能辨别距离，感受到重量和温度，但人体的任何感官都不能感知时间，我们见不到它，听不到它，嗅不到它，也尝不到它，而只能通过意识，或者通过观测它的效应来理解它。”</em>（《时间之谜》）观测，这就是最开始单纯的“自然界的钟”的产生，也就是通过有意识地观测太阳、月亮和星星的这种大的、显式的运动，来确立时间的原型。之后人们认识到了运动的规律，产生了能否利用以恒定速率运转物体的时间间隔来对时间单位进行计数的问题，于是便有了“钟”。中国古代出现的利用水的推动力造的水钟、十四世纪出现的利用重锤驱动的机械钟以及惠更斯研制的摆钟等等都是探索过程中朝着精密性、易用性的改进。随着人们对自然界的深入了解，特别是对电、磁和物质的原子结构的了解，诸如石英钟、原子钟等一些新的方案得以发展和实现。</p>
<p>现在再去回顾历史，很容易就可以看出时间计量对工业、科学研究和当今世界诸多事务的影响。约翰•哈里逊时钟克服了海洋的颠簸、温度变化和咸水的溅射，大大改善了船只导航。对晶体谐振频率的研究有了如今改变世界的半导体。从“定性上的为什么”到“定量上的多准确”的科学演变，促使了精密测量的需求，进而影响到了数学、物理学、天文学……那么如今的我们需要再去思考“时间”吗？</p>
<h2 id="II-阿尔法到欧米伽（始与终）"><a href="#II-阿尔法到欧米伽（始与终）" class="headerlink" title="II. 阿尔法到欧米伽（始与终）"></a>II. 阿尔法到欧米伽（始与终）</h2><p>太过普世、默会的科学往往会被我们所忽略掉。拿起杯子喝口水，对于人来说，无疑再简单不过，但如果要造一个可以端起杯子喝水的机器人呢？显然，这是一个相对有难度并且复杂的任务，其中所涉及到的运动学、控制学、人体工程学等等科学知识都不是随便说说那么简单。因此，回溯历史能够使我们对那些在日常生活中扮演着最基本角色的事物产生认知，并进一步引领我们去思考。时间，它就扮演着使得人类的一切活动有秩序、有组织地进行着的角色。我想试图去了解时间，可以帮助我们更好的规划工作和生活。</p>
<p>虽然当今社会的物质财富已经相对丰富，但大多数人却丧失了求真求知，我们经常被当下的现实琐碎问题所困。这种局限使得人们疲于现实，而缺少创造和求知的勇气。假设我们可以做一次时间的旅行，<em>“水母、鳄鱼胚胎、星云、犹他州的峡谷和木卫三；第一缕生命的信号、细菌、细胞起源、初恋感觉、意识诞生、人类进化、生与死。”</em>（纪录片《<a href="https://baike.baidu.com/item/时间之旅/4524703" target="_blank" rel="external">时间之旅</a>》）从宇宙大爆炸的那一刻开始到人类高级智慧的诞生，就注定了人类在漫漫时间长河中探索和认识这个世界的过程。在这个漫长的过程中，时间见证了无数人的探索求真精神，有始有终，从阿尔法到欧米伽，驱动着人类的进步。</p>
<p>我想时间就是一个很好的例子，来溯源支配当今社会行为准则的起源与内涵。正如同天平这种衡器的诞生以及后人对它的不断改进与完善，就是人们对公平与公正追求的一种体现。这种以此来扩充我们见识的过程，有助于锻炼我们的思维，突破一些困扰我们的现实问题，尝试新思路，并最终试图解决我们一直在思考的问题：自我存在。起码这种思维方法对我自己很有帮助：我是工作后考的研究生。考研期间，我没有用智能手机，由于一个人很难坚持下来，于是尝试每天早上7：15到7：45期间用静坐的方式来保持心态的平和。这种方法却意外之外了我的一笔人生财富，因为静坐的时候，我会尝试去想一些平静的事，慢慢地就会回忆起那些很久之前早就遗忘的事情。我想那个时候我就在进行着一趟回溯自己的时间之旅。每件事，好的，坏的都有始有终，总会过去，自己的心态也就变得好起来。静坐之后，洗漱完，8点准时出发，开始一天的学习生活……到现在读研期间，我依旧保持了考研时的一些习惯。</p>
<h2 id="III-结束语"><a href="#III-结束语" class="headerlink" title="III. 结束语"></a>III. 结束语</h2><p>正如同泰伦斯•马力克执导的纪录片《<a href="https://baike.baidu.com/item/时间之旅/4524703" target="_blank" rel="external">时间之旅</a>》所传达的哲学信息：“<strong>如果你在寻找上帝，仔细观察时间的一切就够了。</strong>”我想这就是时间对我们个体的意义。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章也是我一年前研一《计量史》课上的小论文，感觉不错，也放在博客上，哈哈。
    
    </summary>
    
    
      <category term="Lens" scheme="https://ex2tron.github.io/tags/Lens/"/>
    
      <category term="计量" scheme="https://ex2tron.github.io/tags/%E8%AE%A1%E9%87%8F/"/>
    
      <category term="时间之旅" scheme="https://ex2tron.github.io/tags/%E6%97%B6%E9%97%B4%E4%B9%8B%E6%97%85/"/>
    
  </entry>
  
  <entry>
    <title>摄影之魅：瞬间是一面&quot;镜子&quot;</title>
    <link href="https://ex2tron.github.io/2017/11/08/%E6%91%84%E5%BD%B1%E4%B9%8B%E9%AD%85%EF%BC%9A%E7%9E%AC%E9%97%B4%E6%98%AF%E4%B8%80%E9%9D%A2%E9%95%9C%E5%AD%90/"/>
    <id>https://ex2tron.github.io/2017/11/08/摄影之魅：瞬间是一面镜子/</id>
    <published>2017-11-08T12:56:32.000Z</published>
    <updated>2017-11-08T13:25:51.731Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章其实是我一年前研一《摄影艺术》课上的小论文，感觉写的还行，放在博客上。<a id="more"></a></p>
<blockquote>
<p><em>Not everyone can become a great artist, but a great artist can come from anywhere.</em>  ——<a href="https://movie.douban.com/subject/1793491/" target="_blank" rel="external">《Ratatouille》</a><br><br><em>并非是谁都能成为伟大的艺术家，不过伟大的艺术家却可能来自任何角落。</em>——<a href="https://movie.douban.com/subject/1793491/" target="_blank" rel="external">《料理鼠王》</a></p>
</blockquote>
<p>19世纪30年代末期，<a href="https://baike.baidu.com/item/达盖尔" target="_blank" rel="external">达盖尔</a>发明银版照相法，<a href="https://baike.baidu.com/item/尼埃普斯" target="_blank" rel="external">尼埃普斯</a>拍摄了世界上第一张照片，影像开始可以被记录下来。<a href="https://baike.baidu.com/item/卢米埃尔兄弟" target="_blank" rel="external">卢米埃尔兄弟</a>在《<a href="https://baike.baidu.com/item/火车进站/7413603" target="_blank" rel="external">火车进站</a>》中开启了24帧的艺术之旅——“电影”。如今，影像无处不在，传递着无穷无尽、千变万化的讯息。这一切都源于定格影像的瞬间——摄影术的独特魅力。</p>
<hr>
<h2 id="I-艺术源于生活、艺术高于生活"><a href="#I-艺术源于生活、艺术高于生活" class="headerlink" title="I. 艺术源于生活、艺术高于生活"></a>I. 艺术源于生活、艺术高于生活</h2><p>在选修“摄影艺术”这门课程之前，我刚刚入手了一款入门级单反：宾得PENTAX K-50。本着对摄影的爱好，在入手单反之前就经常用手机去拍一些小东西。所以，理所当然，选修这门课程就是希望自己能够拍出“好看”的照片，即追求表意上的拍摄技法。最初，刚接触摄影的我迫切想积累诸如快门、光圈、感光度、景深、构图等等各种专业术语。不可否认的是，这种“量”的层面上的堆积确实有助于提升拍摄认知和水平，但往往会也会束缚我们，缺少创造力、缺少对摄影“质”的理解。自己对摄影的认知也停留在肤浅的“这张照片拍的好，但说不出所以然来”上面。很高兴，这门课程改变了我的很多想法。</p>
<p>人是爱“美”的。如今，拍照是一件及其简单的事。一方面，得益于智能手机的发展，我们只需要按下手机上的拍照按钮，就会捕获一张照片，接近零成本。另一方面，由于拍摄的简便性，对生活中事物的记录变得极其频繁，这某种程度上降低了我们独立思考和赏析的能力。我们往往会赞美一张“好看”的照片，被照片所表现出来的第一观感所牵引，有些人虽然会对拍摄的技法做一些分析，获取经验，但却极少表达对照片的理解。并且，这些赞美和分析通常都只是建立在一张“美”的照片上。之所以强调了多次“美”的照片，是因为摄影不仅仅只是最终呈现出的照片的观感，摄影更多的含义是一个过程，这一过程的目的往往是真实地或艺术地反映出现实，并表现出拍摄者的情感寄托。当然，摄影术发明的目的就是代替画像，它源于生活，更是高于生活，因此，摄影是个庞杂的体系，前面的理解或许只是一种粗浅的认识。对于不同的摄影类别，诸如纪实摄影、风光摄影、商业时尚摄影等等，摄影都有不同的目的和表现方式，但摄影本身又是绝对的自由，它代表这一种艺术、创造力和想象力。</p>
<p>规则是用来打破的，但打破规则之前，我们必需清楚这个规则。得益于课堂之上邱老师介绍的各类摄影大师以及他们的作品，我了解了很多摄影的历史和大师级摄影师的风格。他们能够在摄影史上留下名字，通常都是某种风格的开创者，有着自己个性鲜明的摄影语言并对一个时代产生深远的影响。</p>
<h2 id="II-以小见大，“决定性瞬间”——布列松"><a href="#II-以小见大，“决定性瞬间”——布列松" class="headerlink" title="II. 以小见大，“决定性瞬间”——布列松"></a>II. 以小见大，“决定性瞬间”——布列松</h2><blockquote>
<p>“摄影这一门，你进去时是ABC，出来时是HCB（Henri Cartier-Bresson：亨利·卡蒂埃·布列松）”——《日本摄影》杂志。</p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cartier_bresson_photo1.png" alt="图1 布列松本人及其作品<雕塑家贾柯米蒂>" title="">
                </div>
                <div class="image-caption">图1 布列松本人及其作品<雕塑家贾柯米蒂></雕塑家贾柯米蒂></div>
            </figure>
<p>其实，对于一位被冠以“他的摄影定义了20世纪”、“新闻摄影之父”称号的大师级摄影师来说，无需多言。然而<a href="https://baike.baidu.com/item/布列松" target="_blank" rel="external">布列松</a>提出的“决定性瞬间”的摄影艺术确确实实让我略微滤清了以往杂乱无章的“瞬间”摄影认知。在此之前，我一直很崇尚抓拍。可能是因为最初自己并不是特别了解一些摄影技法，在拍摄一些故事性很强的场景时，拍出的照片通常描述或还原不了那一时刻的故事。很多时候，摆拍的人物表情很不自然，一般也表现不出很强的故事性。“决定性瞬间”：“在一秒钟的很小一部分中，以一种精确的形式呈现出某一事件的重要性，使它成为这一事件的最恰当的描述。”布列松的作品总是恰到好处地抓住了事件最微妙的一瞬间。这或许与他自身的经历大大相关。</p>
<p>布列松曾前往法国的非洲殖民地科特迪瓦并以打猎为主。在打猎的过程中，他形成了贯穿他一生的摄影技巧——准备，等待，等待，等待…，最后扣动扳机（按下快门）。这一过程，造就了布列松面对巨大压力之下的沉着和冷静。他的作品就仿佛一直等在主体那里拍摄这一场景一般，这均得益于布列松的耐心、完美的拍摄时刻和一种无人可以匹敌的直觉。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cartier_bresson_photo2.png" alt="图2 布列松作品:< 布列松习作>（左）、<“决定性瞬间”的美学>（右，前景中跳跃的男子与背后的跳跃女郎互相呼应）" title="">
                </div>
                <div class="image-caption">图2 布列松作品:< 布列松习作>（左）、<“决定性瞬间”的美学>（右，前景中跳跃的男子与背后的跳跃女郎互相呼应）</“决定性瞬间”的美学></div>
            </figure>
<p>《<a href="https://baike.baidu.com/item/布列松习作" target="_blank" rel="external">布列松习作</a>》(上图)作为布列松的一幅名作，一方面以其娴熟的抓拍功底丰富而自然地表现出拍摄瞬间的故事性：小男孩情绪十分自然，踌躇满志的抱着两个大酒瓶回家，身后的小女孩也投来羡慕的目光…另一方面，这幅作品也很好的体现了布列松的摄影理念：“不论一幅作品技术多么到位，画面多么“好看”，如果它远离了爱，远离了对人类的理解，远离了对人类命运的认知，那么它一定不是一件成功的作品。”布列松的镜头虽然对准的是现实小场景，但他的立意高远，致力于以小见大，“最小的事物可以成为伟大的主题”。</p>
<h2 id="III-瞬间是一面“镜子”"><a href="#III-瞬间是一面“镜子”" class="headerlink" title="III. 瞬间是一面“镜子”"></a>III. 瞬间是一面“镜子”</h2><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cartier_bresson_photo3.png" alt="图3 <饥饿的苏丹>(上)、<时代广场的胜利之日>(下)" title="">
                </div>
                <div class="image-caption">图3 <饥饿的苏丹>(上)、<时代广场的胜利之日>(下)</时代广场的胜利之日></饥饿的苏丹></div>
            </figure>
<p>摄影大师的作品中往往呈现出非常鲜明的个性特征，赋予了其作品与众不同的表现力和故事性。摄影师在按下快门的那一刻，CCD/CMOS上接收的那些信号就变成了一张转瞬即逝一瞬间的记录。通常，摄影师抓拍的那一刻场景，很难再去复现，再加之摄影师独特的拍摄手法和艺术风格，使得每一张照片都变得独一无二，这也是瞬间反映的价值所在。因此，当我们去鉴赏这些作品、这些瞬间时，我们会被其表现出的感染力所吸引，《<a href="https://baike.baidu.com/item/饥饿的苏丹" target="_blank" rel="external">饥饿的苏丹</a>》带给我们巨大的震撼，《<a href="https://baike.baidu.com/item/时代广场之吻" target="_blank" rel="external">时代广场的胜利</a>》让我们体验到二战胜利的狂喜……。当然很多作品所表现出来的往往并不是“好看”的第一观感，它就如同一面可以窥视我们人类、社会、自然各种善恶丑美的镜子。直面这样的一面镜子，我们不免会产生强烈的情感冲击，因为这样的作品并不是单纯的、好看的、无意义的，而是承载着某些人文情怀和哲学思考。当我们深刻去理解它的时候，理所当然就会被其所揭示的内在所折服。</p>
<p>不过，摄影终归是自由的表现力、创造力的象征，这也是摄影术的魅力所在。我们需要不断学习和模仿经典作品的拍摄，但却不能有所束缚，当深刻地了解了这些规则后，就可以尝试打破这些规则，形成自己的风格！</p>
<blockquote>
<p>“Not everyone can become a great artist, but a great artist can come from anywhere.”, “Everyone Can Cook！”（《料理鼠王》电影台词）</p>
</blockquote>
<p>“摄影艺术”这门课程改变了我很多的认识和想法，或许最大的感受便是：“Everyone Can Shoot！”每个人都有对其生活环境、人生观、世界观、价值观的独特理解，每个人也都可以拿起手中的设备拍出自己独特的风格。对大师作品的品鉴和艺术赏析都有助于提升自身的艺术品位，但关键在于去拍、去学习、去发现、去创造。我想这门课程给了我信心可以站在巨人的肩膀上努力拍出自己的作品，毕竟<strong>摄影是自由的，这才是摄影术之魅力！</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章其实是我一年前研一《摄影艺术》课上的小论文，感觉写的还行，放在博客上。
    
    </summary>
    
    
      <category term="Lens" scheme="https://ex2tron.github.io/tags/Lens/"/>
    
      <category term="摄影" scheme="https://ex2tron.github.io/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="布列松" scheme="https://ex2tron.github.io/tags/%E5%B8%83%E5%88%97%E6%9D%BE/"/>
    
  </entry>
  
  <entry>
    <title>小白深度学习笔记3：浅层神经网络</title>
    <link href="https://ex2tron.github.io/2017/10/13/%E5%B0%8F%E7%99%BD%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03%EF%BC%9A%E6%B5%85%E5%B1%82%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>https://ex2tron.github.io/2017/10/13/小白深度学习笔记3：浅层神经网络/</id>
    <published>2017-10-13T07:15:18.000Z</published>
    <updated>2017-10-13T07:41:24.743Z</updated>
    
    <content type="html"><![CDATA[<p>logistic回归可以看作是只有1层1个神经元的神经网络，那么一般的神经网络是怎么样的呢？<a id="more"></a></p>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<blockquote>
<p><em>因为国民不富裕就不能受法律保护，就不能享受民主，这种说法我是无法接受的。</em>  ——<a href="https://movie.douban.com/subject/21937445/" target="_blank" rel="external">《辩护人》</a></p>
</blockquote>
<p>本文是我在观看吴恩达老师的<a href="https://mooc.study.163.com/smartSpec/detail/1001319001.htm" target="_blank" rel="external">《神经网络和深度学习》</a>视频课程时，相关的笔记整理，大佬勿喷！</p>
<hr>
<h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>前面学习了logistic回归，可以把logistic看作只有1层1个神经元的神经网络，如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/logistic_regression_singal_neural_network_sample.jpg" alt="logistic_regression_singal_neural_network_sample" title="">
                </div>
                <div class="image-caption">logistic_regression_singal_neural_network_sample</div>
            </figure>
<p>这个神经元做两个操作：</p>
<ol>
<li>计算\(z=w^Tx+b\)</li>
<li>计算\(\hat{y}=a=\sigma(z)\)</li>
</ol>
<p>而一般的神经网路包括输入层、隐藏层和输出层。如下图所示，是一个两层神经网络。层数从隐藏层(Hidden Layer)开始算，也就是这个图中，第1层是隐藏层，第2层是输出层(Output Layer)。可以把输入层(Input Layer)称为第0层。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/two_layers_neural_network_samples.jpg" alt="two_layers_neural_network_samples" title="">
                </div>
                <div class="image-caption">two_layers_neural_network_samples</div>
            </figure>
<p>浅层神经网络是相较于深层神经网络而言的，深层神经网络中，隐藏层的个数&gt;=2，层数越多，也就越深。</p>
<h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><p>如果把2层的神经网络看作是logistic回归的堆叠的话，那么这个神经网络的正向传播应该是下面这样的公式：</p>
<p>$$z^{[1]}=W^{[1]}x+b^{[1]}\tag{1}$$<br>$$a^{[1]}=\sigma(z^{[1]})\tag{2}$$<br>$$z^{[2]}=W^{[2]}x+b^{[2]}\tag{3}$$<br>$$a^{[2]}=\sigma(z^{[2]})\tag{4}$$</p>
<p>其中，sigmoid函数就是激活函数(Activation Function)。激活函数不一定是sigmoid函数，有的非线性函数要比sigmoid函数更好，这里介绍两种：tanh和ReLU。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/common_activation_functions.jpg" alt="common_activation_functions" title="">
                </div>
                <div class="image-caption">common_activation_functions</div>
            </figure>
<h3 id="tanh"><a href="#tanh" class="headerlink" title="tanh"></a>tanh</h3><p><a href="https://baike.baidu.com/item/tanh" target="_blank" rel="external">tanh</a>(Hyperbolic Tangent Function)双曲正切函数，\(a=tanh(z)=\frac{e^z-e^{-z}}{e^z+e^{-z}}\)。tanh往往比sigmoid表现更好，从上图中可以看出，这个激活函数的平均值更接近于0。但是输出层如果是二类分类的话，结果要么是0要么是1，那么我们预测值应该介于0~1之间，所以这种情况下，输出层的激活函数依然用sigmoid函数。</p>
<h3 id="ReLU"><a href="#ReLU" class="headerlink" title="ReLU"></a>ReLU</h3><p>如果仔细观察sigmoid和tanh函数曲线的话，就会发现，自变量z比较大或比较小时，这个函数的斜率就会很小，接近于0，这样会拖慢梯度下降法的速度。所以，另外一个经常使用到的激活函数是<a href="https://baike.baidu.com/item/%E7%BA%BF%E6%80%A7%E6%95%B4%E6%B5%81%E5%87%BD%E6%95%B0" target="_blank" rel="external">ReLU</a>(Rectified Linear Unit)。\(a=max(0,z)\)，z为正时，导数为1，z为负时，导数为0。</p>
<p>所以，总结三种激活函数，</p>
<ul>
<li>一般不使用sigmoid做激活函数，除非是二类分类，可用在输出层</li>
<li>tanh普遍效果要比sigmoid更好</li>
<li>最常用的默认激活函数是ReLU</li>
</ul>
<h2 id="正向传播"><a href="#正向传播" class="headerlink" title="正向传播"></a>正向传播</h2><p>如果我们选择tanh作为激活函数的话，开头那个2层神经网络的正向传播就是：</p>
<p>$$Z^{[1]}=W^{[1]}X+b^{[1]}\tag{1}$$<br>$$A^{[1]}=tanh(Z^{[1]})\tag{2}$$<br>$$Z^{[2]}=W^{[2]}X+b^{[2]}\tag{3}$$<br>$$A^{[2]}=tanh(Z^{[2]})\tag{4}$$</p>
<h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p>反向传播的推导跟logistic回归一样，只不过进行两次：</p>
<p>$$dZ^{[2]}=A^{[2]}-Y\tag{1}$$<br>$$dW^{[2]}=\frac{1}{m}dZ^{[2]}A^{[1]^T}\tag{2}$$<br>$$db^{[2]}=\frac{1}{m}np.sum(dZ^{[2]},axis=1,keepdims=True)\tag{3}$$<br>$$dZ^{[1]}=W^{[2]^T}dZ^{[2]}*tanh^{’[1]}(Z^{[1]})\tag{4}$$<br>$$dW^{[1]}=\frac{1}{m}dZ^{[1]}X^T\tag{5}$$<br>$$db^{[1]}=\frac{1}{m}np.sum(dZ^{[1]},axis=1,keepdims=True)\tag{6}$$</p>
<h2 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h2><p>之前在logistic回归中，我们可以将权重W初始化为0，但是对于神经网络而言，W都初始化为0的话，是无效的。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/no_zero_initialized_sample.jpg" alt="no_zero_initialized_sample" title="">
                </div>
                <div class="image-caption">no_zero_initialized_sample</div>
            </figure>
<p>举例来说，对于上图中的神经网络，隐藏层神经元个数是2，如果W全部初始化为0的话，那么：</p>
<p>$$<br>    W^{[1]}=<br>    \begin{bmatrix}<br>    0 &amp; 0 \newline<br>    0 &amp; 0<br>    \end{bmatrix}<br>$$</p>
<p>因为\(z^{[1]}=W^{[1]}x+b\)，这样的话\(z_1^{[1]}=z_2^{[1]}\)，\(a_1^{[1]}=a_2^{[1]}\)，也就是说，两个神经元的功能完全一样，计算相同的值，这样1个神经元和n个神经元对神经网络的作用是一样的，其他n-1个是多余的。</p>
<p>所以，在神经网络的参数初始化中，权重W是不能全部初始化为0的，b的话无所谓，都可以。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;logistic回归可以看作是只有1层1个神经元的神经网络，那么一般的神经网络是怎么样的呢？
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="神经网络" scheme="https://ex2tron.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="深度学习" scheme="https://ex2tron.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>numpy中几种矩阵的乘法</title>
    <link href="https://ex2tron.github.io/2017/10/11/numpy%E4%B8%AD%E5%87%A0%E7%A7%8D%E7%9F%A9%E9%98%B5%E7%9A%84%E4%B9%98%E6%B3%95/"/>
    <id>https://ex2tron.github.io/2017/10/11/numpy中几种矩阵的乘法/</id>
    <published>2017-10-11T02:26:09.000Z</published>
    <updated>2017-10-11T02:34:06.948Z</updated>
    
    <content type="html"><![CDATA[<p>最近在手动实现神经网络模型的时候，老是混淆numpy中几种矩阵乘法区别，所以特此记录一下。<a id="more"></a></p>
<blockquote>
<p><em>With great power comes great responsibility</em>  ——<a href="https://movie.douban.com/subject/1306612/" target="_blank" rel="external">《Spider-Man》</a><br><br><em>能力越大，责任越大。</em>——<a href="https://movie.douban.com/subject/1306612/" target="_blank" rel="external">《蜘蛛侠》</a></p>
</blockquote>
<hr>
<p>首先，这里规定一下，我们用numpy定义矩阵时全部采用标准的形式，举例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># 不推荐的方式</span></div><div class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</div><div class="line">print(a.shape)</div><div class="line"><span class="comment"># 推荐的方式</span></div><div class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</div><div class="line">print(b.shape)</div></pre></td></tr></table></figure>
<p>上面代码a的形状是<code>(3,)</code>，b的形状<code>(1,3)</code>，即1行3列的一个矩阵。</p>
<h2 id="np-dot"><a href="#np-dot" class="headerlink" title="np.dot"></a><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html" target="_blank" rel="external">np.dot</a></h2><p><code>np.dot(A,B)</code>就是实现同线性代数里面的矩阵乘法，也就是说，A的列数要等于B的行数才可以相乘：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</div><div class="line">b = np.array([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</div><div class="line">print(np.dot(a,b))</div></pre></td></tr></table></figure>
<p>a是<code>(2,3)</code>，b是<code>(3,1)</code>，所以输出结果是：[[14], [32]]。</p>
<h2 id="np-multiply"><a href="#np-multiply" class="headerlink" title="np.multiply"></a><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.multiply.html" target="_blank" rel="external">np.multiply</a></h2><p>np.multiply(A,B)和A*B效果一样，实现对应位置元素相乘。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># 示例一</span></div><div class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</div><div class="line">b = np.array([[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</div><div class="line">print(a*b)</div><div class="line">print(np.multiply(a,b))</div><div class="line"></div><div class="line"><span class="comment"># 示例二</span></div><div class="line">c = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</div><div class="line">d = np.array([[<span class="number">1</span>],[<span class="number">2</span>]])</div><div class="line">print(c*d)</div><div class="line">print(np.multiply(c,d))</div></pre></td></tr></table></figure>
<p>示例一输出结果是<code>[[4 10 18]]</code>，即<code>[[1*4 2*5 3*6]]</code>。<br>示例二输出结果是<code>[[1  2  3], [8 10 12]]</code>，这里涉及到一个numpy中<a href="http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html" target="_blank" rel="external">广播</a>的概念：因为c是(2,3)，而d是(2,1)，为了实现对应元素相乘，numpy会把d的列复制扩展成(2,3)，于是就有了上面的结果。</p>
<h2 id="np-inner"><a href="#np-inner" class="headerlink" title="np.inner"></a><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.inner.html#numpy.inner" target="_blank" rel="external">np.inner</a></h2><p>np.inner(A,B) 实现A,B的内积，要求A,B矩阵最后一维是相同的，如果是2维矩阵，即A,B矩阵的列数要相同。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</div><div class="line">b = np.array([[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</div><div class="line">print(np.inner(a,b))</div></pre></td></tr></table></figure>
<p>结果为<code>[[32]]</code>，即<code>1*4 + 2*10 + 3*6</code>。</p>
<h2 id="np-outer"><a href="#np-outer" class="headerlink" title="np.outer"></a><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.outer.html#numpy.outer" target="_blank" rel="external">np.outer</a></h2><p>np.outer(A,B)即A,B的外积：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</div><div class="line">b = np.array([[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</div><div class="line">print(np.outer(a,b))</div></pre></td></tr></table></figure>
<p>结果为<code>[[4  5  6], [8 10 12], [12 15 18]]</code>，即<code>[[1*4 1*5 1*6], [2*4 2*5 2*6], [3*4 3*5 3*6]]</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在手动实现神经网络模型的时候，老是混淆numpy中几种矩阵乘法区别，所以特此记录一下。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Python" scheme="https://ex2tron.github.io/tags/Python/"/>
    
      <category term="numpy" scheme="https://ex2tron.github.io/tags/numpy/"/>
    
      <category term="矩阵" scheme="https://ex2tron.github.io/tags/%E7%9F%A9%E9%98%B5/"/>
    
  </entry>
  
  <entry>
    <title>小白深度学习笔记2：Python实现logistic回归</title>
    <link href="https://ex2tron.github.io/2017/10/09/%E5%B0%8F%E7%99%BD%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02%EF%BC%9APython%E5%AE%9E%E7%8E%B0logistic%E5%9B%9E%E5%BD%92/"/>
    <id>https://ex2tron.github.io/2017/10/09/小白深度学习笔记2：Python实现logistic回归/</id>
    <published>2017-10-09T01:52:11.000Z</published>
    <updated>2017-10-09T03:13:17.501Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇了解了一些logistic回归的原理，现在我们用Python实现一个用于鉴别是否是一张猫的图片的分类器！<a id="more"></a></p>
<p>本文是我在观看吴恩达老师的<a href="https://mooc.study.163.com/smartSpec/detail/1001319001.htm" target="_blank" rel="external">《神经网络和深度学习》</a>视频课程时，相关的笔记整理，大佬勿喷！</p>
<blockquote>
<p><em>You’re not worried？ Would it help？</em>  ——<a href="https://movie.douban.com/subject/25908051/" target="_blank" rel="external">《Bridge of Spies》</a><br><br><em>你不担心吗？有用吗？</em>——<a href="https://movie.douban.com/subject/25908051/" target="_blank" rel="external">《间谍之桥》</a></p>
</blockquote>
<hr>
<p>首先，回顾一下，logistic回归其实就相当于只有一层的最简单的神经网络，如下图，正向传播计算出预测值和成本函数，而反向传播计算出的dw和db：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/logistic_forward_backword_propagation.png" alt="logistic_forward_backword_propagation" title="">
                </div>
                <div class="image-caption">logistic_forward_backword_propagation</div>
            </figure>
<p>p.s.本文其实是吴恩达老师<a href="http://pic.ex2tron.top/Logistic-Regression-with-a-Neural-Network-mindset.mhtml" target="_blank" rel="external">第二周教程的作业</a>，没答案，这里提供我写的，仅供参考！</p>
<h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><p>首先import我们要使用的包，其中lr_utils和数据样本点<a href="http://pic.ex2tron.top/l1w2_datasets_lr_utils.rar" target="_blank" rel="external">此处</a>下载：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> h5py</div><div class="line"><span class="keyword">import</span> scipy</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> ndimage</div><div class="line"><span class="keyword">from</span> lr_utils <span class="keyword">import</span> load_dataset</div></pre></td></tr></table></figure>
<h2 id="得到样本集"><a href="#得到样本集" class="headerlink" title="得到样本集"></a>得到样本集</h2><p>我们的训练样本和测试样本都在前面下载的文件中：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 加载样本</span></div><div class="line">train_set_x_orig,train_set_y,test_set_x_orig,test_set_y,classes = load_dataset()</div></pre></td></tr></table></figure>
<p>因为我们直接加载的样本集还需要进行处理，所以变量名上加了<code>_orig</code>。此时，train_set_x_orig中的每一个元素就是一副图片，可以用下面的方式让它显示出来：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 显示第11张图片</span></div><div class="line">plt.figure()</div><div class="line">plt.imshow(train_set_x_orig[<span class="number">10</span>])</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<p>如果打印出train_set_x_orig的形状，结果为：(209,64,64,3)。可知训练样本的个数m_train=209，图片的宽和高都是num_px=64。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(train_set_x_orig.shape)</div></pre></td></tr></table></figure>
<p>还记得上一篇中提到如果把图片量化吗？如果图片的维数是(num_px,num_px,3)，我们要变成(num_px*num_px*3,1)的形状。也就是说要把形状为(a,b,c,d)的矩阵变成形状数组为(b*c*d,a)的矩阵数组，这里可以用下面的一个小技巧：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">X_flatten = X.reshape(X.shape[<span class="number">0</span>], <span class="number">-1</span>).T</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[<span class="number">0</span>],<span class="number">-1</span>).T</div><div class="line">test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[<span class="number">0</span>],<span class="number">-1</span>).T</div></pre></td></tr></table></figure>
<p>编写神经网络的代码中经常出现的错误便是把矩阵的维数搞错，所以随时可以通过shape属性进行检查，经过上面的语句后，train_set_x_flatten的形状应该是(12288,209)，test_set_x_flatten的形状应该是(12288,50)。</p>
<p>因为像素值最大是255，为了避免数据过大，可以将数据归一化得到最终的训练/测试集样本：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">train_set_x = train_set_x_flatten/<span class="number">255</span></div><div class="line">test_set_x = test_set_x_flatten/<span class="number">255</span></div></pre></td></tr></table></figure>
<h2 id="编写各个模块"><a href="#编写各个模块" class="headerlink" title="编写各个模块"></a>编写各个模块</h2><h3 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h3><p>这里注意python自带math模块中的exp函数和numpy中的exp函数的区别，math.exp是没有<a href="https://docs.scipy.org/doc/numpy/user/basics.broadcasting.html" target="_blank" rel="external">广播</a>功能的，不适合此处的矩阵运算。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(x)</span>:</span></div><div class="line">    s = <span class="number">1</span>/(<span class="number">1</span>+np.exp(-x))</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sigmoid(np.array([<span class="number">0</span>,<span class="number">2</span>])))</div></pre></td></tr></table></figure></p>
<p>结果应为<code>[0.5         0.88079708]</code></p>
<h3 id="初始化w和b"><a href="#初始化w和b" class="headerlink" title="初始化w和b"></a>初始化w和b</h3><p>因为logistic回归相当于只有一个输出层的神经网络，根据上一篇的分析，w的形状是(nx,1)，b的形状是(1,1)，这里我们统一初始化为0：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize_with_zeros</span><span class="params">(dim)</span>:</span></div><div class="line">    w = np.zeros([dim,<span class="number">1</span>])</div><div class="line">    b = <span class="number">0.</span></div><div class="line">    <span class="keyword">return</span> w, b</div></pre></td></tr></table></figure></p>
<h3 id="正-反向传播"><a href="#正-反向传播" class="headerlink" title="正/反向传播"></a>正/反向传播</h3><p>这里的函数就是本文开头那张图上显示的正向传播和反向传播：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">propagate</span><span class="params">(w, b, X, Y)</span>:</span></div><div class="line">    m = X.shape[<span class="number">1</span>]</div><div class="line">    <span class="comment"># 正向传播</span></div><div class="line">    A = sigmoid(np.dot(w.T,X)+b)</div><div class="line">    <span class="comment"># 成本函数</span></div><div class="line">    cost = -np.sum(Y*np.log(A)+(<span class="number">1</span>-Y)*np.log(<span class="number">1</span>-A),axis=<span class="number">1</span>)/m</div><div class="line">    cost = np.squeeze(cost)</div><div class="line"></div><div class="line">    <span class="comment"># 反向传播</span></div><div class="line">    dw = np.dot(X,(A-Y).T)/m</div><div class="line">    db = np.sum(A-Y,axis=<span class="number">1</span>)/m</div><div class="line"></div><div class="line">    grads = &#123;<span class="string">"dw"</span>:dw,<span class="string">"db"</span>:db&#125;</div><div class="line">    <span class="keyword">return</span> cost,grads</div></pre></td></tr></table></figure></p>
<p>测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">w,b,X,Y = np.array([[<span class="number">1</span>],[<span class="number">2</span>]]),<span class="number">2</span>,np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]),np.array([[<span class="number">1</span>,<span class="number">0</span>]])</div><div class="line">cost,grads = propagate(w,b,X,Y)</div><div class="line">print(cost,grads)</div></pre></td></tr></table></figure></p>
<p>结果应为：<code>6.000064773192205 {&#39;dw&#39;: array([[0.99993216], [ 1.99980262]]), &#39;db&#39;: array([0.49993523])}</code></p>
<h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>反向传播完，我们需要更新w，b的值，即应用梯度下降法进行优化：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimize</span><span class="params">(w,b,X,Y,num_iterations,learning_rate,print_cost=False)</span>:</span></div><div class="line">    costs = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_iterations):</div><div class="line">        cost,grads = propagate(w,b,X,Y)</div><div class="line">        dw = grads[<span class="string">'dw'</span>]</div><div class="line">        db = grads[<span class="string">'db'</span>]</div><div class="line">        <span class="comment"># 更新w和b的值</span></div><div class="line">        w = w-learning_rate*dw</div><div class="line">        b = b-learning_rate*db</div><div class="line">        <span class="comment"># 每隔100次，记录下成本函数的值</span></div><div class="line">        <span class="keyword">if</span>(i%<span class="number">100</span> == <span class="number">0</span>):</div><div class="line">            costs.append(cost)</div><div class="line">            <span class="keyword">if</span>(print_cost):</div><div class="line">                print(<span class="string">"cost after iteration %i:%f"</span>%(i,cost))</div><div class="line">    </div><div class="line">    params=&#123;<span class="string">'w'</span>:w,<span class="string">'b'</span>:b&#125;</div><div class="line">    grads=&#123;<span class="string">'dw'</span>:dw,<span class="string">'db'</span>:db&#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> params,grads,costs</div></pre></td></tr></table></figure>
<p>测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">params, grads, costs = optimize(w, b, X, Y, num_iterations= <span class="number">100</span>, learning_rate = <span class="number">0.009</span>, print_cost = <span class="keyword">False</span>)</div><div class="line">print(params,grads,costs)</div></pre></td></tr></table></figure></p>
<p>结果应为<code>{&#39;w&#39;: array([[0.1124579 ],[0.23106775]]), &#39;b&#39;: array([ 1.55930492])} {&#39;dw&#39;: array([[ 0.90158428],[1.76250842]]), &#39;db&#39;: array([ 0.43046207])} [array(6.000064773192205)]</code></p>
<h3 id="预测函数"><a href="#预测函数" class="headerlink" title="预测函数"></a>预测函数</h3><p>通过优化器得到w和b参数之后，就可以用这两个参数预测X了，如果预测值&gt;=0.5，那结果就为1，即是一张有猫的图片，反之，结果为0，是一张没有猫的图片：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(w,b,X)</span>:</span></div><div class="line">    m = X.shape[<span class="number">1</span>]</div><div class="line">    Y_predictions = np.zeros([<span class="number">1</span>,m])</div><div class="line">    A = sigmoid(np.dot(w.T,X)+b)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(A.shape[<span class="number">1</span>]):</div><div class="line">        Y_predictions[<span class="number">0</span>,i] = <span class="number">1</span> <span class="keyword">if</span> A[<span class="number">0</span>,i]&gt;=<span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> Y_predictions</div></pre></td></tr></table></figure>
<h3 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h3><p>这样我们就编写好了所有的模块了，最后，把它们整合在一起，就是logistic回归的二类分类模型了：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(X_train,Y_train,X_test,Y_test,num_iterations=<span class="number">2000</span>,learning_rate=<span class="number">0.5</span>,print_cost=False)</span>:</span></div><div class="line">    w,b = initialize_with_zeros(X_train.shape[<span class="number">0</span>])</div><div class="line">    params,grads,costs = optimize(w,b,X_train,Y_train,num_iterations,learning_rate,print_cost)</div><div class="line"></div><div class="line">    w = params[<span class="string">'w'</span>]</div><div class="line">    b = params[<span class="string">'b'</span>]</div><div class="line"></div><div class="line">    Y_prediction_test = predict(w,b,X_test)</div><div class="line">    Y_prediction_train = predict(w,b,X_train)</div><div class="line"></div><div class="line">    print(<span class="string">"train accuracy:&#123;&#125; %"</span>.format(<span class="number">100</span>-np.mean(np.abs(Y_prediction_train-Y_train))*<span class="number">100</span>))</div><div class="line">    print(<span class="string">"test accuracy:&#123;&#125; %"</span>.format(<span class="number">100</span>-np.mean(np.abs(Y_prediction_test-Y_test))*<span class="number">100</span>))</div><div class="line"></div><div class="line">    d = &#123;<span class="string">"costs"</span>: costs,</div><div class="line">        <span class="string">"Y_prediction_test"</span>: Y_prediction_test, </div><div class="line">        <span class="string">"Y_prediction_train"</span> : Y_prediction_train, </div><div class="line">        <span class="string">"w"</span> : w, </div><div class="line">        <span class="string">"b"</span> : b,</div><div class="line">        <span class="string">"learning_rate"</span> : learning_rate,</div><div class="line">        <span class="string">"num_iterations"</span>: num_iterations&#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> d</div></pre></td></tr></table></figure></p>
<p>现在，可以把我们真正的样本数据传入这个模型，看它最后训练的结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = <span class="number">2000</span>, learning_rate = <span class="number">0.005</span>, print_cost = <span class="keyword">True</span>)</div></pre></td></tr></table></figure></p>
<p>如果一切正常，会打印出最后模型在训练集和测试集上的准确率：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">train accuracy:99.04306220095694 %</div><div class="line">test accuracy:70.0 %</div></pre></td></tr></table></figure></p>
<h2 id="验证和分析结果"><a href="#验证和分析结果" class="headerlink" title="验证和分析结果"></a>验证和分析结果</h2><p>可以看到当前的训练结果其实是过拟合的，测试集上的准确率并不高，但暂时足够了。我们可以显示和打印出真实的图片结果进行对比。比如说这里我们打开测试集上的第5张图片，并将学习率曲线画出来：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">index = <span class="number">4</span></div><div class="line">plt.imshow(test_set_x[:,index].reshape([num_px,num_px,<span class="number">3</span>]))</div><div class="line">print(<span class="string">"real result = "</span>+str(test_set_y[<span class="number">0</span>,index])+<span class="string">" and your predict = "</span>+str(d[<span class="string">'Y_prediction_test'</span>][<span class="number">0</span>,index]))</div><div class="line">plt.figure()</div><div class="line">plt.plot(np.squeeze(d[<span class="string">'costs'</span>]))</div><div class="line">plt.ylabel(<span class="string">'cost'</span>)</div><div class="line">plt.xlabel(<span class="string">'iterations(per hundreds)'</span>)</div><div class="line">plt.title(<span class="string">"learning rate = "</span>+str(d[<span class="string">'learning_rate'</span>]))</div><div class="line">plt.show()</div></pre></td></tr></table></figure></p>
<p>最后，源代码中包含了一段针对不同的学习率得到不同的训练结果的代码，大家可以参考下噢！~ o(<em>￣▽￣</em>)o</p>
<p>本文源代码：<a href="https://github.com/ex2tron/BlogCode/blob/master/python_implement_logistic_regression.py" target="_blank" rel="external">python_implement_logistic_regression.py</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇了解了一些logistic回归的原理，现在我们用Python实现一个用于鉴别是否是一张猫的图片的分类器！
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="神经网络" scheme="https://ex2tron.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="深度学习" scheme="https://ex2tron.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="logistic回归" scheme="https://ex2tron.github.io/tags/logistic%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>【利器篇】GitKraken——顶级酷炫Git图像化客户端</title>
    <link href="https://ex2tron.github.io/2017/10/05/%E3%80%90%E5%88%A9%E5%99%A8%E7%AF%87%E3%80%91GitKraken%E2%80%94%E2%80%94%E9%A1%B6%E7%BA%A7%E9%85%B7%E7%82%ABGit%E5%9B%BE%E5%83%8F%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    <id>https://ex2tron.github.io/2017/10/05/【利器篇】GitKraken——顶级酷炫Git图像化工具/</id>
    <published>2017-10-05T09:33:20.000Z</published>
    <updated>2017-10-05T09:42:42.530Z</updated>
    
    <content type="html"><![CDATA[<p>不喜欢敲命令？那么这款酷炫的Git客户端让你逼格满满！<a id="more"></a></p>
<blockquote>
<p><em>真正的忘记是不需要努力的。</em>——<a href="https://movie.douban.com/subject/5045678/" target="_blank" rel="external">《大鱼海棠》</a></p>
</blockquote>
<hr>
<p>首先废话一段：以前我上班的时候，公司里的<a href="https://baike.baidu.com/item/scm/2039966" target="_blank" rel="external">SCM</a>用的是perforce，你应该、可能没听过( ╯□╰ )。总之，就是集中式版本管理系统，相比于git的分布式有很多缺陷，具体可以看廖雪峰的这篇文章：“<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000" target="_blank" rel="external">集中式vs分布式</a>”。但作为一款商业软件，perforce提供的优秀客户端体验还是相当不错的。使用git后，一直都是敲命令的，一是因为习惯，毕竟码代码逼格高嘛，二是因为git的GUI客户端要不很丑，要不功能捉急，总之不想用。之后，在微博上看到这款软件，又同类似的<a href="http://www.sourcetreeapp.com/" target="_blank" rel="external">SourceTree</a>相比体验了一下，无奈，我，还是喜欢颜值高的~ o(<em>￣▽￣</em>)o另外，以前外教老师提问说《加勒比海盗2》中的那个怪物叫啥，阅片无数的我，那天竟然没回答上，装逼失败，所以对这只“挪威海怪kraken”影响特别深刻。好了，开始正题吧，扯远了~</p>
<p>官网/下载：<a href="https://www.gitkraken.com/" target="_blank" rel="external">GitKraken</a></p>
<p>GitKraken对Windows/Linux/Mac三大主流平台都支持，其方便之处在于，它不需要安装配置，双击打开就可以了。打开之后，可以选择用Github账号登陆，需要Github授权：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/gitkraken_sign_in_with_github.png" alt="gitkraken_sign_in_with_github" title="">
                </div>
                <div class="image-caption">gitkraken_sign_in_with_github</div>
            </figure>
<h2 id="打开-克隆-初始化"><a href="#打开-克隆-初始化" class="headerlink" title="打开/克隆/初始化"></a>打开/克隆/初始化</h2><p>GitKranken支持打开本地仓库，从指定的URL或Github、Gitlab、Bitbucket等上面直接克隆。前面我们已经用Github直接登陆了，所以，从Github克隆时，会直接列出你当前的所有仓库项目，非常方便。当然，也可以连接到Gitlab/Bitbucket平台：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/gitkraken_clone_from_github.png" alt="gitkraken_clone_from_github" title="">
                </div>
                <div class="image-caption">gitkraken_clone_from_github</div>
            </figure>
<p>初始化/新建项目也非常方便，在<code>Init</code>选项中，可以选择初始化一个本地仓库或类似Github之类的远程仓库。GitKraken初始化时还提供了.gitignore的文件的相关模板：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/gitkraken_init_github_repo.png" alt="gitkraken_init_github_repo" title="">
                </div>
                <div class="image-caption">gitkraken_init_github_repo</div>
            </figure>
<h2 id="界面-功能"><a href="#界面-功能" class="headerlink" title="界面/功能"></a>界面/功能</h2><p>打开一个仓库后，主界面如下图，酷炫简洁，顶部提供了常用的Git功能，就不细说了。我主要提及一下，如何进行版本差分：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/gitkraken_main_ui.png" alt="gitkraken_main_ui" title="">
                </div>
                <div class="image-caption">gitkraken_main_ui</div>
            </figure>
<p>在提交日志的主界面，如果要比较任意两个版本之间的差分，按住Ctrl键，选择要比较的版本，右边会自动列出两个版本之间所修改的文件，点击文件就可以看到diff了：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/gitkraken_view_commits_diff.png" alt="gitkraken_view_commits_diff" title="">
                </div>
                <div class="image-caption">gitkraken_view_commits_diff</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/gitkraken_view_file_diff.png" alt="gitkraken_view_file_diff" title="">
                </div>
                <div class="image-caption">gitkraken_view_file_diff</div>
            </figure>
<p>当然，最新版本（本文使用的是3.1版本）的GitKraken提供了Merge和Diff工具的自定义（File-Preferences-General中设置），比如说我最常用的Merge工具是WinMerge，就可以在这里配置。</p>
<p>抛砖引玉，大致介绍了一下，其实熟悉Git的话，这个工具使用起来还是蛮简单的~ o(<em>￣▽￣</em>)o</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不喜欢敲命令？那么这款酷炫的Git客户端让你逼格满满！
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="利器篇" scheme="https://ex2tron.github.io/tags/%E5%88%A9%E5%99%A8%E7%AF%87/"/>
    
      <category term="Git" scheme="https://ex2tron.github.io/tags/Git/"/>
    
      <category term="GitKraken" scheme="https://ex2tron.github.io/tags/GitKraken/"/>
    
  </entry>
  
  <entry>
    <title>小白深度学习笔记1：logistic回归</title>
    <link href="https://ex2tron.github.io/2017/10/02/%E5%B0%8F%E7%99%BD%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9Alogistic%E5%9B%9E%E5%BD%92/"/>
    <id>https://ex2tron.github.io/2017/10/02/小白深度学习笔记1：logistic回归/</id>
    <published>2017-10-02T13:06:32.000Z</published>
    <updated>2017-10-06T14:39:26.157Z</updated>
    
    <content type="html"><![CDATA[<p>开启神经网络与深度学习之坑！<a id="more"></a>本篇内容包含部分数学公式，需要用MathJax脚本渲染，所以页面需等待加载完成后，才可完整显示公式。</p>
<blockquote>
<p><em>When life ends up breathtakingly fucked, you can generally trace it back to one big, bad decision.</em>——<a href="https://movie.douban.com/subject/3718279/" target="_blank" rel="external">《DeadPool》</a><br><em>当你的生活变成一坨屎的时候，通常都是因为你当时做的傻逼决定。</em>——<a href="https://movie.douban.com/subject/3718279/" target="_blank" rel="external">《死侍》</a></p>
</blockquote>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<p>本文是我在观看吴恩达老师的<a href="https://mooc.study.163.com/smartSpec/detail/1001319001.htm" target="_blank" rel="external">《神经网络和深度学习》</a>视频课程时，相关的笔记整理，大佬勿喷！</p>
<hr>
<h2 id="二类分类"><a href="#二类分类" class="headerlink" title="二类分类"></a>二类分类</h2><p>比如说分析一张图片中有猫还是没猫，这就是一个二类分类（Binary Classification）问题。这里，我们用输出y=1表示有猫，y=0表示没有猫。输入是一张图片，做过图像处理的同学应该知道图片是以RGB三个矩阵存储的，把RGB三分量的值提取出来，作为X，如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/rgb_convert_input_x.png" alt="rgb_convert_input_x" title="">
                </div>
                <div class="image-caption">rgb_convert_input_x</div>
            </figure>
<p>那么当有m个样本时，X就是一个(nx,m)，即nx行、m列的矩阵，而输出Y的形状（形状就是指矩阵的行数和列数）是(1,m)。</p>
<h2 id="logistic回归"><a href="#logistic回归" class="headerlink" title="logistic回归"></a>logistic回归</h2><p>logistic回归（<a href="https://baike.baidu.com/item/Logistic%E6%A8%A1%E5%9E%8B?fromtitle=Logistic+regression&amp;fromid=18080373" target="_blank" rel="external">Logistic Regression</a>）就是一个用于二类分类的学习算法：假定给出输入的特征向量\(x_1\)（如一张图片），我们希望程序给出一个预测值\(\hat{y}\)，它指出这张图片中有猫还是没猫的概率，即：<br>$$\hat{y}=P(y=1\ or\ 0\mid x)$$</p>
<p>既然\(\hat{y}\)是一个概率，那么\(\hat{y}\in[0,1]\)。如果按照线性回归，输出值应该是：\(\hat{y}=w^Tx+b\)，w形状是(nx,1)，b形状是(1,1)，但是这个值可能远比1大或者出现负数，所以，需要用一个sigmoid函数做限定，最终输出为：<br>$$\hat{y}=\sigma(w^Tx+b)$$</p>
<p>观察sigmoid函数\(\sigma(z)=\frac{1}{1+e^{-z}}\)的曲线图：</p>
<p>\(z\rightarrow\infty,\sigma(z)\rightarrow1;z\rightarrow-\infty,\sigma(z)\rightarrow0;z=0,\sigma(z)=0.5\)</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/sigmoid_function_graph.png" alt="sigmoid_function_graph" title="">
                </div>
                <div class="image-caption">sigmoid_function_graph</div>
            </figure>
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>既然我们的目标就是训练得到logistic回归函数中的w和b参数，那么怎么衡量算法的运行情况呢？我们可以用损失函数（Loss Function）L表示预测值与真值的接近程度。最简单的损失函数可以定义成\(L(\hat{y},y)=\hat{y}-y\)。但是不会这样用，因为要考虑到优化算法的运算速度和效率，排除多个局部最优解。一般，损失函数定义为：<br>$$L(\hat{y},y)=-[y\log\hat{y}+(1-y)\log(1-\hat{y})]$$</p>
<p>显然，损失函数越小，结果越好。那么这个损失函数如何起作用的呢？</p>
<p>假设真值y=1，那么上式就会变成：\(L(\hat{y},1)=-\log\hat{y}\)，要让损失函数尽量小，那么\(\log\hat{y}\)尽量大，也就是说\(\hat{y}\)尽量大，由于\(\hat{y}\in[0,1]\)，所以，这个损失函数会使预测值\(\hat{y}\)尽量接近1，即真值。同样，大家可以推一下真值y=0的情况。</p>
<h2 id="成本函数"><a href="#成本函数" class="headerlink" title="成本函数"></a>成本函数</h2><p>前面所说的损失函数是针对单个训练样本定义的，我们可以用成本函数（Cost Function）来定义全体训练样本上的算法运行情况，定义如下：<br>$$J(w,b)=\frac{1}{m}\sum_{i=1}^mL(\hat{y^i},y^i)$$</p>
<h2 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h2><p>好，到这里，先总结一下：</p>
<ul>
<li>logistic回归模型是用于二类分类的一种学习算法</li>
<li>损失函数衡量参数w和b在单个训练样本的效果</li>
<li>成本函数衡量参数w和b在全体训练样本的效果</li>
<li>训练目标：找到使成本函数J尽可能小的参数w和b</li>
</ul>
<p>那么w和b参数是怎么调整的呢？为了说明梯度下降法（Gradient Descent），吴恩达老师假定w和b都是实数，那么J(w,b)的函数图形类似下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cost_function_graph.png" alt="cost_function_graph" title="">
                </div>
                <div class="image-caption">cost_function_graph</div>
            </figure>
<p>一般，先随机初始化w和b，然后朝着最快下降的方向不断按下面的公式调整w和b参数，最后得到最优解（:=表示更新w的值）：</p>
<p>$$w:=w-\alpha\frac{dJ(w,b)}{dw}$$<br>$$b:=b-\alpha\frac{dJ(w,b)}{db}$$</p>
<p>\(\alpha\)成为学习率（Learning Rate），表示梯度下降法的步长。</p>
<p>好了，这就是相关的logistic回归的简单理论笔记。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开启神经网络与深度学习之坑！
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="神经网络" scheme="https://ex2tron.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="深度学习" scheme="https://ex2tron.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="logistic回归" scheme="https://ex2tron.github.io/tags/logistic%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>【算法贴】三点定位算法</title>
    <link href="https://ex2tron.github.io/2017/09/29/%E3%80%90%E7%AE%97%E6%B3%95%E8%B4%B4%E3%80%91%E4%B8%89%E7%82%B9%E5%AE%9A%E4%BD%8D%E7%AE%97%E6%B3%95/"/>
    <id>https://ex2tron.github.io/2017/09/29/【算法贴】三点定位算法/</id>
    <published>2017-09-29T10:58:31.000Z</published>
    <updated>2017-10-05T09:52:33.563Z</updated>
    
    <content type="html"><![CDATA[<p>已知三个点的坐标和未知点到这三个点的距离，求未知点？<a id="more"></a></p>
<blockquote>
<p><em>过去的如果就这么过去了，以后只会越来越糟。</em>——<a href="https://movie.douban.com/subject/25921812/" target="_blank" rel="external">《驴得水》</a></p>
</blockquote>
<hr>
<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<p>p.s.本文引用了mathjax脚本用来显示数学公式，所以需等待加载完成才能显示正常。</p>
<h2 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h2><p>如下图所示，以三个已知点为圆心，d1,d2,d3为半径作圆，交点便是要求解的未知点：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/trilateration_sample.png" alt="trilateration_sample" title="">
                </div>
                <div class="image-caption">trilateration_sample</div>
            </figure>
<p>刚开始百度了一下，各种稀奇的算法，包括将三角形平移、旋转啥的，其实不用这么麻烦，直接通过勾股定理死算就可以了。</p>
<p>$$(x_1-x_0)^2+(y_1-y_0)^2=d_1^2$$</p>
<p>$$(x_2-x_0)^2+(y_2-y_0)^2=d_2^2$$</p>
<p>$$(x_3-x_0)^2+(y_3-y_0)^2=d_3^2$$</p>
<p>将上面三个式子展开：</p>
<p>$$x_1^2+x_0^2-2x_0x_1+y_1^2+y_0^2-2y_0y_1=d_1^2 ①$$<br>$$x_2^2+x_0^2-2x_0x_2+y_2^2+y_0^2-2y_0y_2=d_2^2 ②$$<br>$$x_3^2+x_0^2-2x_0x_3+y_3^2+y_0^2-2y_0y_3=d_3^2 ③$$</p>
<p>显然通过三个式子中的任意两个相减，比如①-③和②-③就可以得到两个未知数的两个式子：</p>
<p>$$x_1^2-x_3^2-2x_0(x_1-x_3)+y_1^2-y_3^2-2y_0(y_1-y_3)=d_1^2-d_3^2$$<br>$$x_2^2-x_3^2-2x_0(x_2-x_3)+y_2^2-y_3^2-2y_0(y_2-y_3)=d_2^2-d_3^2$$</p>
<p>接下来就不用说了，其实这都是初中数学的问题( ╯□╰ )</p>
<h2 id="算法实现CSharp"><a href="#算法实现CSharp" class="headerlink" title="算法实现CSharp"></a>算法实现CSharp</h2><p>根据上面的推导，我们的算法就很好写了。先定义一个Point的结构体或类，然后编写一个函数，将已知的三个点和三个距离传入：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></div><div class="line"><span class="comment"><span class="doctag">///</span> 定义Point结构体</span></div><div class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></div><div class="line"><span class="keyword">public</span> <span class="keyword">struct</span> Point</div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span> X;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span> Y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> Point <span class="title">GetMobilePoint</span>(<span class="params">Point p1, Point p2, Point p3, <span class="keyword">double</span> d1, <span class="keyword">double</span> d2, <span class="keyword">double</span> d3</span>)</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">//相当于①式-③式</span></div><div class="line">    <span class="keyword">double</span> A = p1.X - p3.X;</div><div class="line">    <span class="keyword">double</span> B = p1.Y - p3.Y;</div><div class="line">    <span class="keyword">double</span> C = Math.Pow(p1.X, <span class="number">2</span>) - Math.Pow(p3.X, <span class="number">2</span>) + Math.Pow(p1.Y, <span class="number">2</span>) - Math.Pow(p3.Y, <span class="number">2</span>) + Math.Pow(d3, <span class="number">2</span>) - Math.Pow(d1, <span class="number">2</span>);</div><div class="line"></div><div class="line">    <span class="comment">//相当于②式-③式</span></div><div class="line">    <span class="keyword">double</span> D = p2.X - p3.X;</div><div class="line">    <span class="keyword">double</span> E = p2.Y - p3.Y;</div><div class="line">    <span class="keyword">double</span> F = Math.Pow(p2.X, <span class="number">2</span>) - Math.Pow(p3.X, <span class="number">2</span>) + Math.Pow(p2.Y, <span class="number">2</span>) - Math.Pow(p3.Y, <span class="number">2</span>) + Math.Pow(d3, <span class="number">2</span>) - Math.Pow(d2, <span class="number">2</span>);</div><div class="line">    </div><div class="line">    <span class="comment">//计算结果</span></div><div class="line">    <span class="keyword">double</span> x0 = (B * F - E * C) / (<span class="number">2</span> * B * D - <span class="number">2</span> * A * E);</div><div class="line">    <span class="keyword">double</span> y0 = (A * F - D * C) / (<span class="number">2</span> * A * E - <span class="number">2</span> * B * D);</div><div class="line"></div><div class="line">    Point resultPoint;</div><div class="line">    resultPoint.X = x0;</div><div class="line">    resultPoint.Y = y0;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> resultPoint;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;已知三个点的坐标和未知点到这三个点的距离，求未知点？
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="三角定位" scheme="https://ex2tron.github.io/tags/%E4%B8%89%E8%A7%92%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="算法贴" scheme="https://ex2tron.github.io/tags/%E7%AE%97%E6%B3%95%E8%B4%B4/"/>
    
  </entry>
  
  <entry>
    <title>构建法、杀死变量</title>
    <link href="https://ex2tron.github.io/2017/09/28/%E6%9E%84%E5%BB%BA%E6%B3%95%E3%80%81%E6%9D%80%E6%AD%BB%E5%8F%98%E9%87%8F/"/>
    <id>https://ex2tron.github.io/2017/09/28/构建法、杀死变量/</id>
    <published>2017-09-28T13:23:45.000Z</published>
    <updated>2017-10-05T09:43:18.673Z</updated>
    
    <content type="html"><![CDATA[<p>如果你仔细回想一下，平日阅读代码的时候，是什么占用了你大量的时间和精力？毫无疑问：变量。<a id="more"></a></p>
<blockquote>
<p><em>Why do we fall, Bruce? So we can learn to pick ourselves up.</em>  ——《<a href="https://movie.douban.com/subject/1309069/" target="_blank" rel="external">Batman Begins</a>》<br><br><em>我们为何会跌倒？这样我们才可以学会自己爬起来。</em>——《<a href="https://movie.douban.com/subject/1309069/" target="_blank" rel="external">蝙蝠侠：侠影之谜</a>》</p>
</blockquote>
<hr>
<p>如果一个变量在代码中很分散，阅读者在同一时间内考虑的代码行数势必会增加，编写者引入Bug的概率也会增大。那么，该如何从减少变量的作用域角度提高代码质量呢？</p>
<p>p.s.本文相关内容仍旧是我阅读<a href="https://www.amazon.cn/%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8-%E5%8F%B2%E8%92%82%E5%A4%AB%E2%80%A2%E8%BF%88%E5%85%8B%E5%BA%B7%E5%A5%88%E5%B0%94/dp/B0061XKRXA/ref=sr_1_1?ie=UTF8&amp;qid=1506601446&amp;sr=8-1&amp;keywords=%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8" target="_blank" rel="external">《代码大全》</a>时的笔记与总结，大佬勿喷！</p>
<h3 id="变量跨度与存活时间"><a href="#变量跨度与存活时间" class="headerlink" title="变量跨度与存活时间"></a>变量跨度与存活时间</h3><h4 id="建议一：把对变量的引用尽可能集中在一起，使变量局部化"><a href="#建议一：把对变量的引用尽可能集中在一起，使变量局部化" class="headerlink" title="建议一：把对变量的引用尽可能集中在一起，使变量局部化"></a>建议一：把对变量的引用尽可能集中在一起，使变量局部化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = 0; </div><div class="line">b = 0;</div><div class="line">c = 0;</div><div class="line">a = b + c;</div><div class="line">b += 1;</div></pre></td></tr></table></figure>
<p>跨度（span）是衡量变量不同引用点靠近程度的一种方法。比如说上面的代码，对a的第一次引用和第二次引用之间有2行代码，那么变量a的跨度就是2。引用多次的话，可以取平均跨度。如b的第一次和第二次引用之间行数为1，第二次和第三次引用之间行数为0，所以平均跨度span(b)=(1+0)/2=0.5。</p>
<p>另外一个概念是：存活时间（live time）。跟跨度类似，不过存活时间只跟变量第一次和最后一次引用有关。比如对于上面代码中的b变量，跨度是0.5，但是存活时间是4条语句。</p>
<p>显然，我们的目标就是<strong>缩短变量的跨度和存活时间</strong>。如果用这两个概念考察全局变量，就会发现全局变量的跨度和存活时间都很长，这也是为什么避免使用全局变量的原因之一。</p>
<h3 id="减小作用域的建议"><a href="#减小作用域的建议" class="headerlink" title="减小作用域的建议"></a>减小作用域的建议</h3><h4 id="建议二：把相关语句放在一起"><a href="#建议二：把相关语句放在一起" class="headerlink" title="建议二：把相关语句放在一起"></a>建议二：把相关语句放在一起</h4><p>把变量的引用点集中在一起，使代码易于自上而下的阅读，举例来说：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//跳来跳去的糟糕代码</div><div class="line">MarketingData marketingData;</div><div class="line">SalesData salesData;</div><div class="line">TravelData travelData;</div><div class="line"></div><div class="line">travelData.ComputeWeekly();</div><div class="line">salesData.ComputeWeekly();</div><div class="line">marketingData.ComputeWeekly();</div><div class="line"></div><div class="line">salesData.ComputeAnnually();</div><div class="line">travelData.ComputeAnnually();</div><div class="line">marketingData.ComputeAnnually();</div><div class="line"></div><div class="line">salesData.print();</div><div class="line">travelData.print();</div><div class="line">marketingData.print();</div></pre></td></tr></table></figure>
<p>显然，如果你要想知道marketingData的计算流程，就必须在这段代码的不同行数跳跃。所以，这样组织代码会更好：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//组织良好，从上而下阅读</div><div class="line">MarketingData marketingData;</div><div class="line">marketingData.ComputeWeekly();</div><div class="line">marketingData.ComputeAnnually();</div><div class="line">marketingData.print();</div><div class="line"></div><div class="line">SalesData salesData;</div><div class="line">salesData.ComputeWeekly();</div><div class="line">salesData.ComputeAnnually();</div><div class="line">salesData.print();</div><div class="line"></div><div class="line">TravelData travelData;</div><div class="line">travelData.ComputeWeekly();</div><div class="line">travelData.ComputeAnnually();</div><div class="line">travelData.print();</div></pre></td></tr></table></figure>
<p>《代码大全》中介绍了一种简便的检查相关语句是否组成得当的方法，把你的代码片段打印出来，然后把相关的语句画上框，组织得当的话， 这些框是不会重叠的：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/good_grouping_related_statements.png" alt="good_grouping_related_statements" title="">
                </div>
                <div class="image-caption">good_grouping_related_statements</div>
            </figure>
<h4 id="建议三：把相关语句提取成单独的子程序"><a href="#建议三：把相关语句提取成单独的子程序" class="headerlink" title="建议三：把相关语句提取成单独的子程序"></a>建议三：把相关语句提取成单独的子程序</h4><p>更短的子程序相比长的子程序，变量的跨度和存活时间更小。比如，可以尝试这样重构上面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//重构，提取子程序</div><div class="line">ComputeMarketingData();</div><div class="line"></div><div class="line">ComputeSalesData();</div><div class="line"></div><div class="line">ComputeTravelData();</div></pre></td></tr></table></figure>
<h4 id="建议四：开始使用最小的作用域，然后根据需求再扩展"><a href="#建议四：开始使用最小的作用域，然后根据需求再扩展" class="headerlink" title="建议四：开始使用最小的作用域，然后根据需求再扩展"></a>建议四：开始使用最小的作用域，然后根据需求再扩展</h4><p>一句话解释就是：<strong>把全局变量转换为成员局部变量要比局部变量转换为全局变量难的多</strong>。因此，在设计程序时，如果对变量的作用域犹豫不决时，优先倾向于最小的作用域。</p>
<h4 id="建议五：循环开始之前再去初始化循环变量"><a href="#建议五：循环开始之前再去初始化循环变量" class="headerlink" title="建议五：循环开始之前再去初始化循环变量"></a>建议五：循环开始之前再去初始化循环变量</h4><p>一个不好的编程习惯就是在程序开头初始化好循环所使用的变量，如<code>int i = 0,j = 0;</code>。而在很后面才使用到循环。这样做的坏处一是查看循环时需要跳到开头才知道循环变量的值，另外，如果要修改这个循环，往往会忘记同时修改循环变量。</p>
<p>往期【构建法】系列回顾：</p>
<ul>
<li><a href="http://www.lofter.com/lpost/1d7338a1_f50d92d" target="_blank" rel="external">构建法、单点控制</a></li>
<li><a href="http://www.lofter.com/lpost/1d7338a1_10204bea" target="_blank" rel="external">构建法、表驱动法</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你仔细回想一下，平日阅读代码的时候，是什么占用了你大量的时间和精力？毫无疑问：变量。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="构建法" scheme="https://ex2tron.github.io/tags/%E6%9E%84%E5%BB%BA%E6%B3%95/"/>
    
      <category term="变量" scheme="https://ex2tron.github.io/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="作用域" scheme="https://ex2tron.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>【片单】诺兰神作集</title>
    <link href="https://ex2tron.github.io/2017/09/24/%E3%80%90%E7%89%87%E5%8D%95%E3%80%91%E8%AF%BA%E5%85%B0%E7%A5%9E%E4%BD%9C%E9%9B%86/"/>
    <id>https://ex2tron.github.io/2017/09/24/【片单】诺兰神作集/</id>
    <published>2017-09-24T12:37:41.000Z</published>
    <updated>2017-12-05T14:48:53.945Z</updated>
    
    <content type="html"><![CDATA[<p>有的导演，虽然没拿过奥斯卡，作品不多，但每部却都被影迷奉为神作。没错，说的就是诺神<a id="more"></a>：<a href="https://baike.baidu.com/item/克里斯托弗·诺兰" target="_blank" rel="external">克里斯托弗·诺兰</a></p>
<h2 id="克里斯托弗·诺兰"><a href="#克里斯托弗·诺兰" class="headerlink" title="克里斯托弗·诺兰"></a>克里斯托弗·诺兰</h2><p>今天周末，回顾了下诺神的<a href="https://movie.douban.com/subject/1851857/" target="_blank" rel="external">蝙蝠侠</a>和<a href="https://movie.douban.com/subject/3541415/" target="_blank" rel="external">盗梦空间</a>，加上前段时间刚看完<a href="https://movie.douban.com/subject/26607693/" target="_blank" rel="external">敦刻尔克</a>，按耐不住，就分享下诺兰的神作电影下载链接吧。</p>
<p><strong>作品按时间排序，点击片名或者右键复制链接即可：</strong></p>
<h3 id="敦刻尔克-Dunkirk"><a href="#敦刻尔克-Dunkirk" class="headerlink" title="敦刻尔克 | Dunkirk"></a><a href="ed2k://|file|敦刻尔克.Dunkirk.2017.1080p.BluRay.x264.中英字幕-Fantopia.mp4|2418179223|b806cdcd02f7fbd63ce89832aa186ba3|h=452tao356tv7yxm75mzernkj43akb4ib|/" target="_blank" rel="external">敦刻尔克 | Dunkirk</a></h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.tmdb.org/t/p/w740_and_h416_bestv2/fudEG1VUWuOqleXv6NwCExK0VLy.jpg" alt="Dunkirk" title="">
                </div>
                <div class="image-caption">Dunkirk</div>
            </figure>
<h3 id="星际穿越-Interstellar"><a href="#星际穿越-Interstellar" class="headerlink" title="星际穿越 | Interstellar"></a><a href="ed2k://|file|Interstellar.2014.%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A.720p.Chi_Eng.ZMZ-BD-MP4-V2.mp4|2448135931|ad26bb8d5386690810d948ece0499744|h=zo7ee5uktzrarrfj37z2bpk3enoxsxxz|/" target="_blank" rel="external">星际穿越 | Interstellar</a></h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.tmdb.org/t/p/w740_and_h416_bestv2/walWq52PP2IGRc98VkPG7Wp77lK.jpg" alt="Interstellar" title="">
                </div>
                <div class="image-caption">Interstellar</div>
            </figure>
<h3 id="蝙蝠侠：黑暗骑士崛起-The-Dark-Knight-Rises"><a href="#蝙蝠侠：黑暗骑士崛起-The-Dark-Knight-Rises" class="headerlink" title="蝙蝠侠：黑暗骑士崛起 | The Dark Knight Rises"></a><a href="ed2k://|file|The.Dark.Knight.Rises.2012.%E8%9D%99%E8%9D%A0%E4%BE%A0%E5%89%8D%E4%BC%A03.%E9%BB%91%E6%9A%97%E9%AA%91%E5%A3%AB%E5%B4%9B.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.HR-HDTV.AC3.1024X576.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86%E5%88%B6%E4%BD%9C.mkv|2696715142|1b873142c39aa7bfe7924264026b0ae4|h=s3nom7fhjxntisny4hypfimmmtxzcyw2|/" target="_blank" rel="external">蝙蝠侠：黑暗骑士崛起 | The Dark Knight Rises</a></h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.tmdb.org/t/p/w740_and_h416_bestv2/3bgtUfKQKNi3nJsAB5URpP2wdRt.jpg" alt="The Dark Knight Rises" title="">
                </div>
                <div class="image-caption">The Dark Knight Rises</div>
            </figure>
<h3 id="盗梦空间-Inception"><a href="#盗梦空间-Inception" class="headerlink" title="盗梦空间 | Inception"></a><a href="ed2k://|file|盗梦空间.Inception.2010.中英字幕.BDrip.AAC.720p.x264-人人影视.mp4|2216102241|744dced4b7d5c6fa22db48188c6b7327|h=vn5yfyvbcn2p2gf673pfrscnnonahxbj|/" target="_blank" rel="external">盗梦空间 | Inception</a></h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.tmdb.org/t/p/w740_and_h416_bestv2/s2bT29y0ngXxxu2IA8AOzzXTRhd.jpg" alt="Inception" title="">
                </div>
                <div class="image-caption">Inception</div>
            </figure>
<h3 id="蝙蝠侠：黑暗骑士-The-Dark-Knight"><a href="#蝙蝠侠：黑暗骑士-The-Dark-Knight" class="headerlink" title="蝙蝠侠：黑暗骑士 | The Dark Knight"></a><a href="ed2k://|file|The.Dark.Knight.2008.%E8%9D%99%E8%9D%A0%E4%BE%A0%E5%89%8D%E4%BC%A02%EF%BC%9A%E9%BB%91%E6%9A%97%E9%AA%91%E5%A3%AB.%E5%8F%8C%E8%AF%AD%E5%AD%97%E5%B9%95.%E5%9B%BD%E8%8B%B1%E9%9F%B3%E8%BD%A8.HR-HDTV.AC3.1024X576.x264-%E4%BA%BA%E4%BA%BA%E5%BD%B1%E8%A7%86%E5%88%B6%E4%BD%9C.mkv|2869506431|c9f803597ad8ffa4d7acda888129cc94|h=ehcceg3xz2qx3msc7jvebyvmghbnd4n6|/" target="_blank" rel="external">蝙蝠侠：黑暗骑士 | The Dark Knight</a></h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.tmdb.org/t/p/w740_and_h416_bestv2/nnMC0BM6XbjIIrT4miYmMtPGcQV.jpg" alt="The Dark Knight" title="">
                </div>
                <div class="image-caption">The Dark Knight</div>
            </figure>
<h3 id="致命魔术-The-Prestige"><a href="#致命魔术-The-Prestige" class="headerlink" title="致命魔术 | The Prestige"></a><a href="ed2k://|file|The.Prestige.致命魔术.双语字幕.HR-HDTV.AC3.1024X576.x264-人人影视制作.mkv|2077111129|A18F57470B0AB144D1B4889C8ECAF3C0|h=U6WQH2SXKRDMDCMTARJKD2IH7WOS2UUU|/" target="_blank" rel="external">致命魔术 | The Prestige</a></h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.tmdb.org/t/p/w740_and_h416_bestv2/nbQQ6L4qRTk0WMVkRhTxc4MMRd9.jpg" alt="The Prestige" title="">
                </div>
                <div class="image-caption">The Prestige</div>
            </figure>
<h3 id="蝙蝠侠-侠影之谜-Batman-Begins"><a href="#蝙蝠侠-侠影之谜-Batman-Begins" class="headerlink" title="蝙蝠侠.侠影之谜 | Batman Begins"></a><a href="ed2k://|file|蝙蝠侠.侠影之谜.Batman.Begins.2005.BD-720p.1280X720.中英双语-电波字幕组.mkv|2490413875|E8FA6BDC8DD5A22E1582728C2B34B5E3|h=D2EEMY7CD7GJ33GNLHEMFSPQVPC3IZ6I|/" target="_blank" rel="external">蝙蝠侠.侠影之谜 | Batman Begins</a></h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.tmdb.org/t/p/w740_and_h416_bestv2/v0p5dxVa9Giq6e0h31VifY0dWOX.jpg" alt="Batman Begins" title="">
                </div>
                <div class="image-caption">Batman Begins</div>
            </figure>
<h3 id="记忆碎片-Memento"><a href="#记忆碎片-Memento" class="headerlink" title="记忆碎片 | Memento"></a><a href="ed2k://|file|Memento.10th.Anniversary.2000.记忆碎片.双语字幕.HR-HDTV.AC3.1024X544.X264-人人影视制作.mkv|1944503362|EDA2166CB8699364B9062F7F9CB700EC|h=ETS47DE4SLODZQSZ5LU2RVF6V5VA36GW|/" target="_blank" rel="external">记忆碎片 | Memento</a></h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://image.tmdb.org/t/p/w740_and_h416_bestv2/oBUznaSdjkY3HtQUzAxgdIZqh4w.jpg" alt="Memento" title="">
                </div>
                <div class="image-caption">Memento</div>
            </figure>
<p>p.s.本文所有的图片均来自<a href="https://www.themoviedb.org/" target="_blank" rel="external">TMDB</a>，如果你觉得很酷炫的话，我会在后期开发一款专门下载影视壁纸的APP，敬请期待！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的导演，虽然没拿过奥斯卡，作品不多，但每部却都被影迷奉为神作。没错，说的就是诺神
    
    </summary>
    
    
      <category term="Lens" scheme="https://ex2tron.github.io/tags/Lens/"/>
    
      <category term="片单" scheme="https://ex2tron.github.io/tags/%E7%89%87%E5%8D%95/"/>
    
      <category term="诺兰" scheme="https://ex2tron.github.io/tags/%E8%AF%BA%E5%85%B0/"/>
    
      <category term="蝙蝠侠" scheme="https://ex2tron.github.io/tags/%E8%9D%99%E8%9D%A0%E4%BE%A0/"/>
    
      <category term="敦刻尔克" scheme="https://ex2tron.github.io/tags/%E6%95%A6%E5%88%BB%E5%B0%94%E5%85%8B/"/>
    
      <category term="盗梦空间" scheme="https://ex2tron.github.io/tags/%E7%9B%97%E6%A2%A6%E7%A9%BA%E9%97%B4/"/>
    
      <category term="星际穿越" scheme="https://ex2tron.github.io/tags/%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A/"/>
    
  </entry>
  
  <entry>
    <title>【利器篇】七牛云——用做每月免费10G的图床</title>
    <link href="https://ex2tron.github.io/2017/09/18/%E3%80%90%E5%88%A9%E5%99%A8%E7%AF%87%E3%80%91%E4%B8%83%E7%89%9B%E4%BA%91%E2%80%94%E2%80%94%E7%94%A8%E5%81%9A%E6%AF%8F%E6%9C%88%E5%85%8D%E8%B4%B910G%E7%9A%84%E5%9B%BE%E5%BA%8A/"/>
    <id>https://ex2tron.github.io/2017/09/18/【利器篇】七牛云——用做每月免费10G的图床/</id>
    <published>2017-09-18T11:55:38.000Z</published>
    <updated>2017-10-05T09:52:02.800Z</updated>
    
    <content type="html"><![CDATA[<p>随着越来越多的人开始使用Markdown写自己的独立博客，一个好用稳定的图床是必不可少的了。<a id="more"></a></p>
<h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>在<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云</a>之前，我使用过国外的<a href="https://www.getcloudapp.com/" target="_blank" rel="external">Cloud App</a>和<a href="https://www.aliyun.com/product/oss?utm_content=se_877546" target="_blank" rel="external">阿里云的oss对象存储</a>。</p>
<ol>
<li><p>首先，国外的东西在国内稳定性和速度都是相对较差的，我试着在阿里云和Cloud App上上传同一张图片并生成外链，Cloud App要比阿里的加载速度延迟1-2s，阿里基本秒开。</p>
</li>
<li><p>阿里的oss对象存储虽然很稳定，但是并不提供免费的空间。相对来说，七牛云提供的每月10G免费流量，对于博客来说，绰绰有余了。</p>
</li>
<li><p>另外，七牛云提供了诸多的图片处理接口，如水印、格式转换、缩放等，很实用，很强大。</p>
</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>注册并登陆<a href="https://www.qiniu.com/" target="_blank" rel="external">七牛云</a>，在七牛云的产品列表中，添加一个<code>对象存储</code>，如这里取名为<code>picblog</code>：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/create_new_bucket.png" alt="create_new_bucket" title="">
                </div>
                <div class="image-caption">create_new_bucket</div>
            </figure>
<p>创建好之后，七牛云会自动生成一个测试域名：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/test_domain_name.png" alt="test_domain_name" title="">
                </div>
                <div class="image-caption">test_domain_name</div>
            </figure>
<p>这个域名就是你文件的前缀了。比如，我们点击<code>内容管理</code>，点击<code>上传文件</code>，选择一幅图片上传。上传完成后，复制该文件的外链地址：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/copy_file_link.png" alt="copy_file_link" title="">
                </div>
                <div class="image-caption">copy_file_link</div>
            </figure>
<p>这个地址就是你的图片地址辣，你可以在浏览器中访问该地址，比如你可以访问我的这个：<a href="http://pic.ex2tron.top/mycli_demo.gif" target="_blank" rel="external">mysql_demo</a></p>
<h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><h3 id="添加二级域名"><a href="#添加二级域名" class="headerlink" title="添加二级域名"></a>添加二级域名</h3><p>如同前面那张图上所说，七牛云默认的测试域名有很多限制。所以，你如果已经购买了域名的话，可以在这里绑定自己的二级域名，这样既好记又方便管理。</p>
<p>比如，这里我已经在万网上购买了<code>ex2tron.xin</code>的域名，这里我演示如何将七牛云的存储空间绑定<code>pic.ex2tron.xin</code>这个域名。</p>
<p>在七牛云的存储空间页面，点击<code>绑定域名</code>，只需要在加速域名处填写要绑定的域名，其他项保持默认即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">加速域名： pic.ex2tron.xin</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/bucket_binding_domain_name.png" alt="bucket_binding_domain_name" title="">
                </div>
                <div class="image-caption">bucket_binding_domain_name</div>
            </figure>
<p>创建后，系统会配置一段时间，等待处理完成，会显示一个诸如<code>xxx.qiniudns.com</code>的CNAME记录值，记下此值，后面要用到。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/cname_for_binding.png" alt="cname_for_binding" title="">
                </div>
                <div class="image-caption">cname_for_binding</div>
            </figure>
<h3 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h3><p>打开万网的域名控制台，添加一条CNAME的解析：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">记录类型：CNAME</div><div class="line">主机记录：pic</div><div class="line">记录值：xxx.qiniudns.com</div><div class="line"># 其他选型保持默认</div></pre></td></tr></table></figure></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/add_dns_for_qiniu.png" alt="add_dns_for_qiniu" title="">
                </div>
                <div class="image-caption">add_dns_for_qiniu</div>
            </figure>
<p>这样，你上传的图片外链就是：<code>http://pic.ex2tron.xin/filename.png</code>之类的了。</p>
<h2 id="添加图片样式"><a href="#添加图片样式" class="headerlink" title="添加图片样式"></a>添加图片样式</h2><p>利用七牛云做图床的另外一个强大之处在于丰富的图片样式。点击<code>图片样式</code>-<code>新建图片样式</code>，七牛云提供了如下很多种场景：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/api_for_image_process.png" alt="api_for_image_process" title="">
                </div>
                <div class="image-caption">api_for_image_process</div>
            </figure>
<p>比如，这里我们选择<code>指定宽高，强行缩放+打图片水印</code>，然后添加一个文字水印，可以调整文字的字体样式，位置等等：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/add_water_mark_api.png" alt="add_water_mark_api" title="">
                </div>
                <div class="image-caption">add_water_mark_api</div>
            </figure>
<p>调整好之后，为样式取个名称，如<code>webpic</code>，这样，只要在原来外链的后面添加<code>-webpic</code>就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://pic.ex2tron.xin/filename.png-webpic</div></pre></td></tr></table></figure>
<p>其中<code>-</code>这个连接符可以通过存储空间控制面板的<code>样式分隔符设置</code>中进行修改。</p>
<h2 id="图床工具"><a href="#图床工具" class="headerlink" title="图床工具"></a>图床工具</h2><p>对于七牛云，每张图片都在网页端上传还是比较麻烦的，所以用一些图床客户端工具会更加快速。</p>
<p>这里推荐使用<a href="http://mpic.lzhaofu.cn/" target="_blank" rel="external">MPic</a>图床神器。打开软件后，设置好自己的AK和SK（可在七牛云的个人中心-密钥管理中看到）。MPic支持文件拖拽上传，点击复制就可以复制外链，非常方便：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/mpic_qiniu.png" alt="mpic_qiniu" title="">
                </div>
                <div class="image-caption">mpic_qiniu</div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着越来越多的人开始使用Markdown写自己的独立博客，一个好用稳定的图床是必不可少的了。
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="利器篇" scheme="https://ex2tron.github.io/tags/%E5%88%A9%E5%99%A8%E7%AF%87/"/>
    
      <category term="qiniu" scheme="https://ex2tron.github.io/tags/qiniu/"/>
    
      <category term="七牛云" scheme="https://ex2tron.github.io/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
      <category term="图床" scheme="https://ex2tron.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github Pages轻松搭博客(2)——在Github上部署</title>
    <link href="https://ex2tron.github.io/2017/09/13/Hexo-Github-Pages%E8%BD%BB%E6%9D%BE%E6%90%AD%E5%8D%9A%E5%AE%A2-2-%E2%80%94%E2%80%94%E5%9C%A8Github%E4%B8%8A%E9%83%A8%E7%BD%B2/"/>
    <id>https://ex2tron.github.io/2017/09/13/Hexo-Github-Pages轻松搭博客-2-——在Github上部署/</id>
    <published>2017-09-13T12:15:47.000Z</published>
    <updated>2017-09-25T12:24:03.108Z</updated>
    
    <content type="html"><![CDATA[<p>使用免费的Github Pages服务或者部署在自己服务器上，别人就可以访问你的博客啦！<a id="more"></a></p>
<p>如果你已经有配置好的云服务器，直接可以将Hexo博客生成的public目录文件放在服务器上就好了。比如我购买的是阿里云服务器（apache），只需要将public下的文件放在<em>/var/www/html/</em>下面就可以用你服务器地址访问博客了。很容易，不过，考虑到云服务器的价格，这里我们还是用免费的Github吧。</p>
<hr>
<h2 id="关联Github"><a href="#关联Github" class="headerlink" title="关联Github"></a>关联Github</h2><p>首先登陆<a href="https://github.com/" target="_blank" rel="external">Github</a>，没有账号的话，先注册一个。新建一个名为username.github.io的仓库，<strong>username必须与你的账户名相同</strong>，比如我的就是ex2tron.github.io，这就是你博客的域名地址了（绑定独立域名之后再说）。<strong>新建时注意勾选”<em>Initialize this repository with a README</em>“</strong>，因为这个仓库必须不能为空。</p>
<blockquote>
<p>如果你是git新用户的话，推荐看：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000" target="_blank" rel="external">廖雪峰的Git教程-远程仓库</a></p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/create_github_pages_repository.png" alt="create_github_pages_repository" title="">
                </div>
                <div class="image-caption">create_github_pages_repository</div>
            </figure>
<p>接下来打开博客目录下的_config.yml配置文件，定位到最后的deploy选项，修改如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> <span class="string">git</span></div><div class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:ex2tron/ex2tron.github.io.git</span></div><div class="line"><span class="attr">  branch:</span> <span class="string">master</span></div></pre></td></tr></table></figure></p>
<p>注意冒号后面有个空格，不然会出错滴~~~配置好之后，使用下面的命令就可以部署到Github上了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
<p>这样通过Github提供的域名地址（如我的：<a href="https://ex2tron.github.io">https://ex2tron.github.io</a>）就可以访问你的博客了，简单快速高效！</p>
<h2 id="发布新博客"><a href="#发布新博客" class="headerlink" title="发布新博客"></a>发布新博客</h2><p>博客搭建起来之后，就可以用Markdown写博客辣，使用下面的命令，创建新博客（如名为：我的第一篇博客）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">'我的第一篇博客'</span></div></pre></td></tr></table></figure></p>
<p>此命令会在博客目录\source_posts\h下生成“我的第一篇博客.md”文件，这就是你的博客源文件啦，文件开头如下，记得冒号后面有空格噢，不然会出错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: 我的第一篇博客</div><div class="line">date: 2017-09-13 20:15:47</div><div class="line">tags: #文章标签，格式：[1,2,3]</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>不熟悉Markdown语法的可以看：<a href="http://www.appinn.com/markdown/" target="_blank" rel="external">Markdown 语法说明</a>。写完之后依然使用之前的三条命令发布：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure></p>
<p>后面两条指令也可以简化为一条：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g -d</div></pre></td></tr></table></figure></p>
<h2 id="常出现的问题"><a href="#常出现的问题" class="headerlink" title="常出现的问题"></a>常出现的问题</h2><ol>
<li><p>在hexo d进行部署时，如果出现ERROR Deployer not found: git的问题，可以先用下面的命令修复：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
<li><p>如果你没配置过ssh导致部署失败（可以通过ssh -T username@example.com来测试ssh有无配置成功），可以参考这篇文章：<a href="http://www.cnblogs.com/xsilence/p/6001938.html" target="_blank" rel="external">针对github权限导致hexo部署失败的解决方案</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用免费的Github Pages服务或者部署在自己服务器上，别人就可以访问你的博客啦！
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Hexo" scheme="https://ex2tron.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://ex2tron.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github Pages轻松搭博客(1)</title>
    <link href="https://ex2tron.github.io/2017/09/13/Hexo-Github-Pages%E8%BD%BB%E6%9D%BE%E6%90%AD%E5%8D%9A%E5%AE%A2-1/"/>
    <id>https://ex2tron.github.io/2017/09/13/Hexo-Github-Pages轻松搭博客-1/</id>
    <published>2017-09-13T08:07:06.000Z</published>
    <updated>2017-09-25T12:23:48.596Z</updated>
    
    <content type="html"><![CDATA[<p>想用Github Pages轻松搭建自己的博客，用Hexo，10分钟！<a id="more"></a></p>
<blockquote>
<p>废话区域：我在接触Hexo（可以读作Hack So）之前，绝对没少尝试建立一个完全自由、自己说了算的独立博客：WordPress定位重量级，功能强大，生成的是动态网站，依赖数据库……太繁琐了，放弃~而Jekyll和Hexo都是静态建站工具，但Jekyll的依赖项也很多，也不简约，不想用~最后才是名气相对不高的Hexo，相信我，熟练的情况下，10分钟就可以搭出来：</p>
</blockquote>
<hr>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>是一个免费的静态Blog生成工具。简单来说，就是把你写的Markdown博客文件生成静态网页，把这个网页放在Github或者你自己的服务器上就可以快速访问了。软件界，从来不缺自动化工具(ง •_•)ง</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网文档：<a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo Docs</a></p>
<p>Hexo安装前，你的电脑上需要先有下面这两个东西：</p>
<ul>
<li><a href="https://nodejs.org/" target="_blank" rel="external">Node.js</a></li>
<li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a></li>
</ul>
<p>如果已经安装了的话，命令行下一句话就好啦：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<h2 id="初始化博客目录"><a href="#初始化博客目录" class="headerlink" title="初始化博客目录"></a>初始化博客目录</h2><p>在你的本地新建一个存放博客的目录，比如”<em>D:\MyHexoBlog</em>“，然后在这个目录右键，选择”<em>Git Bash Here</em>“，输入下面两条命令进行初始化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div><div class="line">$ npm install</div></pre></td></tr></table></figure></p>
<p>初始化完成之后，你的目录结构应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml</div><div class="line">├── package.json</div><div class="line">├── scaffolds</div><div class="line">├── source</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes</div></pre></td></tr></table></figure></p>
<p>如果没有出错的话，继续执行下面的指令启动服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g </div><div class="line">$ hexo s</div></pre></td></tr></table></figure></p>
<p>启动之后，在浏览器中访问：<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，是不是看到了漂亮的Hexo博客页面了。不过目前这个博客还是运行在你本机上的，下篇我们看一下怎么样让别人也能访问这个博客。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/default_hexo_theme.png" alt="default_hexo_index" title="">
                </div>
                <div class="image-caption">default_hexo_index</div>
            </figure>
<p>参考资料：</p>
<ul>
<li><a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo Docs</a></li>
<li><a href="http://blog.csdn.net/cl534854121/article/details/76121066" target="_blank" rel="external">Hexo+Github搭建个人博客(一)——开始搭建 </a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想用Github Pages轻松搭建自己的博客，用Hexo，10分钟！
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="Hexo" scheme="https://ex2tron.github.io/tags/Hexo/"/>
    
      <category term="Github" scheme="https://ex2tron.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>【利器篇】用VS Code写Markdown</title>
    <link href="https://ex2tron.github.io/2017/09/11/%E3%80%90%E5%88%A9%E5%99%A8%E7%AF%87%E3%80%91%E7%94%A8VSCode%E5%86%99Markdown/"/>
    <id>https://ex2tron.github.io/2017/09/11/【利器篇】用VSCode写Markdown/</id>
    <published>2017-09-11T07:11:22.000Z</published>
    <updated>2017-10-05T09:52:19.495Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown以其简洁、优雅整齐的风格，成为目前非常流行的博客文件格式。甚至有人说：每个人都应该用Markdown写博客<a id="more"></a>。关于Markdown相较富文本的优势，我就不细说了。</p>
<h2 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h2><p>支持Markdown的工具有很多，大家可以参考网上，如这篇文章：<a href="https://sspai.com/post/32483" target="_blank" rel="external">码字必备：18 款优秀的 Markdown 写作工具 | 2015 年度盘点</a>。就我自己目前在Windows上使用的而言有：<a href="http://www.jianshu.com/" target="_blank" rel="external">简书</a>、<a href="http://note.youdao.com/" target="_blank" rel="external">有道云笔记</a>、<a href="https://www.typora.io/#windows" target="_blank" rel="external">Typora</a>、<a href="https://code.visualstudio.com" target="_blank" rel="external">VSCode</a></p>
<p>简书本身就是一个博客平台，有道云笔记是类似OneNote和印象笔迹的应用。如果你已经在使用这两个平台的话，就不用多说了。但如果只是想用一个单纯的Markdown编辑器的话，推荐极致简洁的Typora。虽说界面简洁，但功能强大，不仅内置了常见的一些Markdown样式，还支持PDF/HTML等多种格式导出：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/markdown_in_typora.png" alt="markdown_in_typora" title="">
                </div>
                <div class="image-caption">markdown_in_typora</div>
            </figure>
<p>你是一枚文青的话，千万不要错过这款编辑器。不过，对于程序猿来说，VSCode才显得更有味道。</p>
<h2 id="用VSCode写Markdown"><a href="#用VSCode写Markdown" class="headerlink" title="用VSCode写Markdown"></a>用VSCode写Markdown</h2><p>VSCode就不过多介绍了，我之前也写过关于它的介绍：</p>
<ul>
<li><p><a href="http://ex2tron.lofter.com/post/1d7338a1_86f8f92" target="_blank" rel="external">Visual Studio Code Preview初体验</a></p>
</li>
<li><p><a href="http://ex2tron.lofter.com/post/1d7338a1_870beb7" target="_blank" rel="external">Visual Studio Code Preview深度体验、使用技巧</a></p>
</li>
</ul>
<p>现在版本的VSCode默认已经支持Markdown预览，不需要下载插件。用VSCode打开md文件或将当前文件更改为Markdown格式就可以开始书写了：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/markdown_in_vscode.png" alt="markdown_in_vscode" title="">
                </div>
                <div class="image-caption">markdown_in_vscode</div>
            </figure>
<p>VSCode支持两种预览方式：</p>
<ul>
<li>按下Ctrl+K V，像上图一样左右同步实时预览</li>
<li>按下Ctrl+Shift+V，只预览最终渲染结果</li>
</ul>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/editor_preview_Synchronization.gif" alt="editor_preview_Synchronization" title="">
                </div>
                <div class="image-caption">editor_preview_Synchronization</div>
            </figure>
<p>如上图，编写和预览界面是实时同步的，不需要的话，可以按下Ctrl+,组合键，添加如下两条设置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">"markdown.preview.scrollEditorWithPreview": false,</div><div class="line">"markdown.preview.scrollPreviewWithEditorSelection": false</div></pre></td></tr></table></figure>
<p>另外，目前VSCode预览样式中，中文的显示很别扭，这里推荐下载<a href="https://github.com/ex2tron/MyLibsAndSamples/blob/master/Configs/VSCode/markdown-github.css" target="_blank" rel="external">Github风格的CSS</a></p>
<p>下载完成后，配置css文件的设置如下即可：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"markdown.styles": [</div><div class="line">    <span class="string">"file:///D:/markdown-github.css"</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>另外，VSCode中有很多Markdown相关的插件，如”Markdown All in One”和”Markdown Theme Kit”等，大家可以下载下来尝试一下哈！</p>
<blockquote>
<p>参考资料：<a href="https://code.visualstudio.com/docs/languages/markdown" target="_blank" rel="external">Markdown editing with Visual Studio Code</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown以其简洁、优雅整齐的风格，成为目前非常流行的博客文件格式。甚至有人说：每个人都应该用Markdown写博客
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="利器篇" scheme="https://ex2tron.github.io/tags/%E5%88%A9%E5%99%A8%E7%AF%87/"/>
    
      <category term="Markdown" scheme="https://ex2tron.github.io/tags/Markdown/"/>
    
      <category term="VSCode" scheme="https://ex2tron.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>【利器篇】MyCLI——自动补全和语法高亮的MySQL命令行工具</title>
    <link href="https://ex2tron.github.io/2017/09/11/%E3%80%90%E5%88%A9%E5%99%A8%E7%AF%87%E3%80%91MyCLI%E2%80%94%E2%80%94%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E5%92%8C%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E7%9A%84MySQL%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <id>https://ex2tron.github.io/2017/09/11/【利器篇】MyCLI——自动补全和语法高亮的MySQL命令行工具/</id>
    <published>2017-09-11T06:32:14.000Z</published>
    <updated>2017-10-05T09:52:10.798Z</updated>
    
    <content type="html"><![CDATA[<p>mycli是MySQL命令行工具，支持关键字语法高亮和自动补全，看下面的动图你就知道了：<a id="more"></a></p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/mycli_demo.gif" alt="mycli_demo" title="">
                </div>
                <div class="image-caption">mycli_demo</div>
            </figure>
<p>mycli不仅会提示MySQL的关键字，更牛掰的是数据库名、表名、字段名都可以提示，非常方便。如果你经常在命令行里码MySQL命令，相信这款工具一定会让你满意。</p>
<p>官网：<a href="http://www.mycli.net/" target="_blank" rel="external">MyCLI</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>其实mycli是一个Python的包，所以你已经安装了Python(pip)的话，用下面一条指令就好了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; pip install mycli</div></pre></td></tr></table></figure>
<p>如果出现问题，可以参考<a href="http://www.mycli.net/" target="_blank" rel="external">官网</a>，有详细的说明。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/install_mycli.png" alt="install_mycli" title="">
                </div>
                <div class="image-caption">install_mycli</div>
            </figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装好之后，在cmd下，将以往登陆MySQL用的mysql换成mycli就可以了：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://pic.ex2tron.top/login_with_mycli.png" alt="login_with_mycli" title="">
                </div>
                <div class="image-caption">login_with_mycli</div>
            </figure>
<p>好了，大家觉得好用的话，欢迎扩散噢！</p>
<blockquote>
<p><em>Never give up. Never stop fighting. Excelsior!</em></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mycli是MySQL命令行工具，支持关键字语法高亮和自动补全，看下面的动图你就知道了：
    
    </summary>
    
    
      <category term="Code" scheme="https://ex2tron.github.io/tags/Code/"/>
    
      <category term="利器篇" scheme="https://ex2tron.github.io/tags/%E5%88%A9%E5%99%A8%E7%AF%87/"/>
    
      <category term="MyCLI" scheme="https://ex2tron.github.io/tags/MyCLI/"/>
    
      <category term="MySQL" scheme="https://ex2tron.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>博客新篇章！Brave New World</title>
    <link href="https://ex2tron.github.io/2017/08/23/%E5%8D%9A%E5%AE%A2%E6%96%B0%E7%AF%87%E7%AB%A0%EF%BC%81/"/>
    <id>https://ex2tron.github.io/2017/08/23/博客新篇章！/</id>
    <published>2017-08-23T12:56:32.000Z</published>
    <updated>2017-11-16T14:33:08.434Z</updated>
    
    <content type="html"><![CDATA[<p>从2014/08/23在lofter上写我的<a href="http://ex2tron.lofter.com/post/1d7338a1_86b724e" target="_blank" rel="external">第一篇博客</a>开始，已经过去了整整三年……<a id="more"></a></p>
<h2 id="再见，lofter"><a href="#再见，lofter" class="headerlink" title="再见，lofter"></a>再见，lofter</h2><p>lofter是一个非常不错的轻博客平台，我喜欢它的设计和定位。但lofter终究不适合程序猿，长久以来不支持markdown也让我很头痛。现在，终于还是要说再见了!</p>
<blockquote>
<p><a href="http://ex2tron.lofter.com" target="_blank" rel="external">http://ex2tron.lofter.com</a></p>
</blockquote>
<h2 id="旧的66篇博客"><a href="#旧的66篇博客" class="headerlink" title="旧的66篇博客"></a>旧的66篇博客</h2><h3 id="【Code-编程-开发】"><a href="#【Code-编程-开发】" class="headerlink" title="【Code/编程/开发】"></a>【Code/编程/开发】</h3><p><a href="http://www.lofter.com/lpost/1d7338a1_f50d92d" target="_blank" rel="external">构建法、单点控制</a></p>
<p><a href="http://www.lofter.com/lpost/1d7338a1_10204bea" target="_blank" rel="external">构建法、表驱动法</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_f0c9638" target="_blank" rel="external">【云端漫步】一起上“阿里云”（1）、购买学生党套餐</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_fea154c" target="_blank" rel="external">【云端漫步】一起上“阿里云”（2）、远程登陆服务器</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_ffa2f60" target="_blank" rel="external">【云端漫步】一起上“阿里云”（3）、LAMP环境搭建</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_ffad954" target="_blank" rel="external">【云端漫步】一起上“阿里云”（4）、搭建Git服务器</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_10171f1e" target="_blank" rel="external">【云端漫步】一起上“阿里云”（5）、域名购买和解析</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_f59f87a" target="_blank" rel="external">Python多字节二进制文件读取</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_eaa8b0d" target="_blank" rel="external">C#中集合List的深浅拷贝</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_eb8cdad" target="_blank" rel="external">C#中常用的集合List去重方法</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_f59ed25" target="_blank" rel="external">C#多字节二进制文件读取</a></p>
<p><a href="http://www.lofter.com/lpost/1d7338a1_da4b787" target="_blank" rel="external">深入理解C#（01）：堆栈、值类型和引用类型、值传递和引用传递</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_870bee8" target="_blank" rel="external">宽字符</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86c86dd" target="_blank" rel="external">编程命名法</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_8b70ad4" target="_blank" rel="external">编程字体推荐</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_a9009ce" target="_blank" rel="external">Json序列化与反序列化（1）-JavaScriptSerializer</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_cb8b36b" target="_blank" rel="external">Json序列化与反序列化（2）-Json.Net</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_cc1a00c" target="_blank" rel="external">Json序列化与反序列化（3）-DataContractJsonSerializer</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86b7467" target="_blank" rel="external">CR与LF（操作系统“下一行”的不同）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86f8f92" target="_blank" rel="external">Visual Studio Code Preview初体验</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_870beb7" target="_blank" rel="external">Visual Studio Code Preview深度体验、使用技巧</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_ca1a61f" target="_blank" rel="external">Brand7-品牌漆上架商店啦！</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_c388b82" target="_blank" rel="external">UWP应用Brand7开发小记（1）、判断App是否是第一次启动</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_c665a5c" target="_blank" rel="external">UWP应用Brand7开发小记（2）、用Excel和Json初始化本地数据源Part1</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_c66b082" target="_blank" rel="external">UWP应用Brand7开发小记（2）、用Excel和Json初始化本地数据源Part2</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_c7ae2f8" target="_blank" rel="external">UWP 应用Brand7开发小记（3）、判断GridView的滚动方向</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_c7f56c1" target="_blank" rel="external">UWP应用Brand7开发小记（4）、集合控件的虚拟化问题</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_cccfc2d" target="_blank" rel="external">UWP 应用Brand7开发小记（5）、控件嵌入标题栏</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_cc38035" target="_blank" rel="external">MySQL学习小记（1）-不能启动MySQL服务</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_cca3bd7" target="_blank" rel="external">MySQL学习小记（2）-添加远程访问权限详解</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_d3d0794" target="_blank" rel="external">MySQL学习小记（3）-外键的使用</a></p>
<p><a href="http://www.lofter.com/lpost/1d7338a1_d5494fc" target="_blank" rel="external">MySQL学习小记（4）-最大连接数</a></p>
<p><a href="http://www.lofter.com/lpost/1d7338a1_10c4cf02" target="_blank" rel="external">MySQL学习小记（5）-主从服务器同步</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86dd19e" target="_blank" rel="external">VS至强插件ReSharper指南01、安装入门</a></p>
<h3 id="【视觉与图像】"><a href="#【视觉与图像】" class="headerlink" title="【视觉与图像】"></a>【视觉与图像】</h3><p><a href="http://ex2tron.lofter.com/post/1d7338a1_fa820b3" target="_blank" rel="external">【视觉与图像】摄像头篇（1）、CCD靶面尺寸</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_fad34dc" target="_blank" rel="external">【视觉与图像】摄像头篇（2）、焦距和视角</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_10bc7d39" target="_blank" rel="external">CMake编译OpenCV3.2（Qt平台）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_10bc7e4e" target="_blank" rel="external">Qt+OpenCV环境搭建</a></p>
<h3 id="【Design-演示-设计】"><a href="#【Design-演示-设计】" class="headerlink" title="【Design/演示/设计】"></a>【Design/演示/设计】</h3><p><a href="http://ex2tron.lofter.com/post/1d7338a1_86c7385" target="_blank" rel="external">玩转PPT放映第一篇、演示者视图</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86dc94e" target="_blank" rel="external">玩转PPT放映第二篇、快捷键</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_870bc93" target="_blank" rel="external">玩转PPT放映第三篇、自定义放映</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86d9038" target="_blank" rel="external">【PPT动画】钟摆效果</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_87060ac" target="_blank" rel="external">【PPT动画】模糊渐变切换效果</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86c72ce" target="_blank" rel="external">【PPT动画】制作左、右浮入效果</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_8700201" target="_blank" rel="external">PPT制作画中画效果</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_870bdfa" target="_blank" rel="external">PPT绘制长阴影图标</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86c9304" target="_blank" rel="external">PPT三维立体图形绘制</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86dd125" target="_blank" rel="external">PPT巧用矩形等分区域（黄金分割线）</a></p>
<h3 id="【Lens-摄影-影视】"><a href="#【Lens-摄影-影视】" class="headerlink" title="【Lens/摄影/影视】"></a>【Lens/摄影/影视】</h3><p><a href="http://ex2tron.lofter.com/post/1d7338a1_eaa874a" target="_blank" rel="external">家乡 | 黑白 | PENTAX K-50 | 看见不一样</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86dc98c" target="_blank" rel="external">看见，时光（延时摄影短片）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_a483017" target="_blank" rel="external">我那时的“计量”（一），黑白质感</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_a526318" target="_blank" rel="external">我那时的“计量”（二），迎新色彩</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_a1952f4" target="_blank" rel="external">Lumia 1520 by iPhone6s</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_a93fda1" target="_blank" rel="external">历届奥斯卡最佳动画长片下载（1）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_a9207ea" target="_blank" rel="external">历届奥斯卡最佳动画长片下载（2）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_8bc8efc" target="_blank" rel="external">「精品」皮克斯15部动画长片下载</a></p>
<h3 id="【Other-科普-发现】"><a href="#【Other-科普-发现】" class="headerlink" title="【Other/科普/发现】"></a>【Other/科普/发现】</h3><p><a href="http://ex2tron.lofter.com/post/1d7338a1_86b724e" target="_blank" rel="external">PPI与DPI</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_87060f2" target="_blank" rel="external">USB接口类型（2.0概述）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_f078121" target="_blank" rel="external">Type-C和USB3.0（3.1）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_dda20a4" target="_blank" rel="external">发现Win10 Bug两枚（均得微软官方确认，一枚已解决）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_9f2bdda" target="_blank" rel="external">再战之后，这场旅途，只属于我</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_a1b9c49" target="_blank" rel="external">Win8以上系统安装PL2303驱动</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86f6444" target="_blank" rel="external">硬盘容量计算的差别</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_8700192" target="_blank" rel="external">硬盘整数分区原理及计算（附工具下载）</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_870619b" target="_blank" rel="external">详解Windows运行组件第一篇、原理篇</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_870bd17" target="_blank" rel="external">详解Windows运行组件第二篇、自定义运行指令</a></p>
<p><a href="http://ex2tron.lofter.com/post/1d7338a1_86dd0c5" target="_blank" rel="external">Windows 10技术预览版体验视频</a></p>
<blockquote>
<p><em>Never give up. Never stop fighting. Excelsior!</em></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从2014/08/23在lofter上写我的&lt;a href=&quot;http://ex2tron.lofter.com/post/1d7338a1_86b724e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;第一篇博客&lt;/a&gt;开始，已经过去了整整三年……
    
    </summary>
    
    
  </entry>
  
</feed>
